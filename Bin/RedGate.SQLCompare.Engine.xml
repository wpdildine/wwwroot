<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.SQLCompare.Engine</name>
    </assembly>
    <members>
        <member name="T:antlr.ASTFactory">
            <summary>
            AST Support code shared by TreeParser and Parser.
            </summary>
            <remarks>
            <para>
            We use delegation to share code (and have only one 
            bit of code to maintain) rather than subclassing
            or superclassing (forces AST support code to be
            loaded even when you don't want to do AST stuff).
            </para>
            <para>
            Typically, <see cref="M:antlr.ASTFactory.setASTNodeType(System.String)"/>  is used to specify the
            homogeneous type of node to create, but you can override
            <see cref="M:antlr.ASTFactory.create"/>  to make heterogeneous nodes etc...
            </para>
            </remarks>
        </member>
        <member name="M:antlr.ASTFactory.#ctor">
            <summary>
            Constructs an <c>ASTFactory</c> with the default AST node type of
            <see cref="T:antlr.CommonAST"/>.
            </summary>
        </member>
        <member name="M:antlr.ASTFactory.#ctor(System.String)">
            <summary>
            Constructs an <c>ASTFactory</c> and use the specified AST node type
            as the default.
            </summary>
            <param name="nodeTypeName">
            	Name of default AST node type for this factory.
            </param>
        </member>
        <member name="F:antlr.ASTFactory.defaultASTNodeTypeObject_">
            <summary>
            Stores the Type of the default AST node class to be used during tree construction.
            </summary>
        </member>
        <member name="F:antlr.ASTFactory.heteroList_">
            <summary>
            Stores the mapping between custom AST NodeTypes and their NodeTypeName/NodeTypeClass
            and ASTNodeCreator.
            </summary>
        </member>
        <member name="F:antlr.ASTFactory.typename2creator_">
            <summary>
            Stores the mapping between AST node typenames and their token ID.
            </summary>
        </member>
        <member name="M:antlr.ASTFactory.setTokenTypeASTNodeType(System.Int32,System.String)">
            <summary>
            Specify an "override" for the <see cref="T:antlr.collections.AST"/> type created for
            the specified Token type.
            </summary>
            <remarks>
            This method is useful for situations that ANTLR cannot oridinarily deal 
            with (i.e., when you  create a token based upon a nonliteral token symbol 
            like #[LT(1)].  This is a runtime value and ANTLR cannot determine the token 
            type (and hence the AST) statically.
            </remarks>
            <param name="tokenType">Token type to override.</param>
            <param name="NodeTypeName">
            	Fully qualified AST typename (or null to specify 
            	the factory's default AST type).
            </param>
        </member>
        <member name="M:antlr.ASTFactory.registerFactory(System.Int32,System.String)">
            <summary>
            Register an AST Node Type for a given Token type ID.
            </summary>
            <param name="NodeType">The Token type ID.</param>
            <param name="NodeTypeName">The AST Node Type to register.</param>
        </member>
        <member name="M:antlr.ASTFactory.setTokenTypeASTNodeCreator(System.Int32,antlr.ASTNodeCreator)">
            <summary>
            Register an ASTNodeCreator for a given Token type ID.
            </summary>
            <param name="NodeType">The Token type ID.</param>
            <param name="creator">The creater to register.</param>
        </member>
        <member name="M:antlr.ASTFactory.setASTNodeCreator(antlr.ASTNodeCreator)">
            <summary>
            Register an ASTNodeCreator to be used for creating node by default.
            </summary>
            <param name="creator">The ASTNodeCreator.</param>
        </member>
        <member name="M:antlr.ASTFactory.setMaxNodeType(System.Int32)">
            <summary>
            Pre-expands the internal list of TokenTypeID-to-ASTNodeType mappings
            to the specified size.
            This is primarily a convenience method that can be used to prevent 
            unnecessary and costly re-org of the mappings list.
            </summary>
            <param name="NodeType">Maximum Token Type ID.</param>
        </member>
        <member name="M:antlr.ASTFactory.addASTChild(antlr.ASTPair,antlr.collections.AST)">
            <summary>
            Add a child to the current AST
            </summary>
            <param name="currentAST">The AST to add a child to</param>
            <param name="child">The child AST to be added</param>
        </member>
        <member name="M:antlr.ASTFactory.create">
            <summary>
            Creates a new uninitialized AST node. Since a specific AST Node Type
            wasn't indicated, the new AST node is created using the current default
            AST Node type - <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/>
            </summary>
            <returns>An uninitialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(System.Int32)">
            <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(System.Int32,System.String)">
            <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <param name="txt">Text for initializing the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(System.Int32,System.String,System.String)">
            <summary>
            Creates a new AST node using the specified AST Node Type name. Once created,
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined solely by <c>ASTNodeTypeName</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <param name="txt">Text for initializing the new AST Node.</param>
            <param name="ASTNodeTypeName">Fully qualified name of the Type to be used for creating the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(antlr.IToken,System.String)">
            <summary>
            Creates a new AST node using the specified AST Node Type name.
            </summary>
            <param name="tok">Token instance to be used to initialize the new AST Node.</param>
            <param name="ASTNodeTypeName">
            	Fully qualified name of the Type to be used for creating the new AST Node.
            </param>
            <returns>A newly created and initialized AST node object.</returns>
            <remarks>
            Once created, the new AST node is initialized with the specified Token 
            instance. The <see cref="T:System.Type"/> used for creating this new AST 
            node is  determined solely by <c>ASTNodeTypeName</c>.
            <para>The AST Node type must have a default/parameterless constructor.</para>
            </remarks>
        </member>
        <member name="M:antlr.ASTFactory.create(antlr.collections.AST)">
            <summary>
            Creates and initializes a new AST node using the specified AST Node instance.
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined solely by <c>aNode</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
            <param name="aNode">AST Node instance to be used for creating the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(antlr.IToken)">
            <summary>
            Creates and initializes a new AST node using the specified Token instance.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="tok">Token instance to be used to create new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.dup(antlr.collections.AST)">
            <summary>
            Returns a copy of the specified AST Node instance. The copy is obtained by
            using the <see cref="T:System.ICloneable"/> method Clone().
            </summary>
            <param name="t">AST Node to copy.</param>
            <returns>An AST Node (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:antlr.ASTFactory.dupList(antlr.collections.AST)">
            <summary>
            Duplicate AST Node tree rooted at specified AST node and all of it's siblings.
            </summary>
            <param name="t">Root of AST Node tree.</param>
            <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:antlr.ASTFactory.dupTree(antlr.collections.AST)">
            <summary>
            Duplicate AST Node tree rooted at specified AST node. Ignore it's siblings.
            </summary>
            <param name="t">Root of AST Node tree.</param>
            <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:antlr.ASTFactory.make(antlr.collections.AST[])">
            <summary>
            Make a tree from a list of nodes.  The first element in the
            array is the root.  If the root is null, then the tree is
            a simple list not a tree.  Handles null children nodes correctly.
            For example, build(a, b, null, c) yields tree (a b c).  build(null,a,b)
            yields tree (nil a b).
            </summary>
            <param name="nodes">List of Nodes.</param>
            <returns>AST Node tree.</returns>
        </member>
        <member name="M:antlr.ASTFactory.make(antlr.collections.impl.ASTArray)">
            <summary>
            Make a tree from a list of nodes, where the nodes are contained
            in an ASTArray object.
            </summary>
            <param name="nodes">List of Nodes.</param>
            <returns>AST Node tree.</returns>
        </member>
        <member name="M:antlr.ASTFactory.makeASTRoot(antlr.ASTPair,antlr.collections.AST)">
            <summary>
            Make an AST the root of current AST.
            </summary>
            <param name="currentAST"></param>
            <param name="root"></param>
        </member>
        <member name="M:antlr.ASTFactory.setASTNodeType(System.String)">
            <summary>
            Sets the global default AST Node Type for this ASTFactory instance.
            This method also attempts to load the <see cref="T:System.Type"/> instance
            for the specified typename.
            </summary>
            <param name="t">Fully qualified AST Node Type name.</param>
        </member>
        <member name="M:antlr.ASTFactory.error(System.String)">
            <summary>
            To change where error messages go, can subclass/override this method
            and then setASTFactory in Parser and TreeParser.  This method removes
            a prior dependency on class antlr.Tool.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:antlr.ASTNodeCreator">
            <summary>
            A creator of AST node instances.
            </summary>
            <remarks>
            <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of AST node objects.
            </para>
            <para>
            Parsers and TreeParsers already use the ASTFactory class in ANTLR whenever
            they need to create an AST node objeect. What this class does is to support
            performant extensibility of the basic ASTFactory. The ASTFactory can now be
            extnded as run-time to support more new AST node types without using needing
            to use reflection.
            </para>
            </remarks>
        </member>
        <member name="M:antlr.ASTNodeCreator.Create">
            <summary>
            Constructs an <see cref="T:antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:antlr.ASTNodeCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="T:antlr.collections.AST">
            <summary>
            Minimal AST node interface used by ANTLR AST generation and tree-walker.
            </summary>
        </member>
        <member name="M:antlr.collections.AST.addChild(antlr.collections.AST)">
            <summary>
            Add a (rightmost) child to this node
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:antlr.collections.AST.getFirstChild">
            <summary>
            Get the first child of this node; null if no children
            </summary>
        </member>
        <member name="M:antlr.collections.AST.getNextSibling">
            <summary>
            Get	the next sibling in line after this one
            </summary>
        </member>
        <member name="M:antlr.collections.AST.getText">
            <summary>
            Get the token text for this node
            </summary>
            <returns></returns>
        </member>
        <member name="M:antlr.collections.AST.getNumberOfChildren">
            <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
            <returns>Number of children</returns>
        </member>
        <member name="M:antlr.collections.AST.setFirstChild(antlr.collections.AST)">
            <summary>
            Set the first child of a node.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:antlr.collections.AST.setNextSibling(antlr.collections.AST)">
            <summary>
            Set the next sibling after this one.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:antlr.collections.AST.setText(System.String)">
            <summary>
            Set the token text for this node
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:antlr.collections.AST.setType(System.Int32)">
            <summary>
            Set the token type for this node
            </summary>
            <param name="ttype"></param>
        </member>
        <member name="P:antlr.collections.AST.Type">
            <summary>
            Get the token type for this node
            </summary>
        </member>
        <member name="T:antlr.ASTVisitor">
            <summary>
            Summary description for ASTVisitor.
            </summary>
        </member>
        <member name="M:antlr.BaseAST.getNumberOfChildren">
            <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
            <returns>Number of children</returns>
        </member>
        <member name="T:antlr.InputBuffer">
            <summary>
            Represents a stream of characters fed to the lexer from that can be rewound 
            via mark()/rewind() methods.
            </summary>
            <remarks>
            <para>
            A dynamic array is used to buffer up all the input characters.  Normally,
            "k" characters are stored in the buffer.  More characters may be stored 
            during guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
            Consumption of characters is deferred.  In other words, reading the next
            character is not done by conume(), but deferred until needed by LA or LT.
            </para>
            </remarks>
        </member>
        <member name="F:antlr.ByteBuffer.buf">
            <summary>
            Small buffer used to avoid reading individual chars
            </summary>
        </member>
        <member name="F:antlr.CharBuffer.buf">
            <summary>
            Small buffer used to avoid reading individual chars
            </summary>
        </member>
        <member name="F:antlr.CharScanner.tokenCreator">
            <summary>Used for creating Token instances.</summary>
        </member>
        <member name="F:antlr.CharScanner.cached_LA1">
            <summary>Used for caching lookahead characters.</summary>
        </member>
        <member name="M:antlr.CharScanner.panic(System.String)">
            <summary>
            This method is executed by ANTLR internally when it detected an illegal
            state that cannot be recovered from.
            The previous implementation of this method called <see cref="M:System.Environment.Exit(System.Int32)"/>
            and writes directly to <see cref="P:System.Console.Error"/>, which is usually not 
            appropriate when a translator is embedded into a larger application.
            </summary>
            <param name="s">Error message.</param>
        </member>
        <member name="T:antlr.TokenCreator">
            <summary>
            A creator of Token object instances.
            </summary>
            <remarks>
            <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of Token objects.
            </para>
            <para>
            Since Lexers in ANTLR use a single Token type, each TokenCreator can 
            create one class of Token objects (that's why it's not called TokenFactory).
            </para>
            </remarks>
        </member>
        <member name="M:antlr.TokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.TokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="F:antlr.CharScanner.ReflectionBasedTokenCreator.tokenTypeName">
            <summary>
            The fully qualified name of the Token type to create.
            </summary>
        </member>
        <member name="F:antlr.CharScanner.ReflectionBasedTokenCreator.tokenTypeObject">
            <summary>
            Type object used as a template for creating tokens by reflection.
            </summary>
        </member>
        <member name="M:antlr.CharScanner.ReflectionBasedTokenCreator.SetTokenType(System.String)">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:antlr.CharScanner.ReflectionBasedTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CharScanner.ReflectionBasedTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:antlr.CommonAST.CommonASTCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonAST.CommonASTCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="M:antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="T:antlr.IToken">
            <summary>
            A token is minimally a token type.  Subclasses can add the text matched
            for the token and line info. 
            </summary>
        </member>
        <member name="M:antlr.CommonToken.CommonTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonToken.CommonTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="T:antlr.DumpASTVisitor">
            <summary>
            Summary description for DumpASTVisitor.
            </summary>
            Simple class to dump the contents of an AST to the output 
        </member>
        <member name="M:antlr.Parser.panic">
            <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
            
        </member>
        <member name="M:antlr.Parser.setASTFactory(antlr.ASTFactory)">
            <summary>
            Specify an object with support code (shared by Parser and TreeParser.
            Normally, the programmer does not play with this, using 
            <see cref="M:antlr.Parser.setASTNodeClass(System.String)"/> instead.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:antlr.Parser.setASTNodeClass(System.String)">
            <summary>
            Specify the type of node to create during tree building. 
            </summary>
            <param name="cl">Fully qualified AST Node type name.</param>
        </member>
        <member name="M:antlr.Parser.setASTNodeType(System.String)">
            <summary>
            Specify the type of node to create during tree building. 
            use <see cref="M:antlr.Parser.setASTNodeClass(System.String)"/> now to be consistent with 
            Token Object Type accessor.
            </summary>
            <param name="nodeType">Fully qualified AST Node type name.</param>
        </member>
        <member name="E:antlr.Parser.EnterRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:antlr.MismatchedCharException.appendCharName(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append a char to the msg buffer.  If special, then show escaped version
            </summary>
            <param name="sb">Message buffer</param>
            <param name="c">Char to append</param>
        </member>
        <member name="M:antlr.ParseTree.getLeftmostDerivationStep(System.Int32)">
            <summary>
            Walk parse tree and return requested number of derivation steps.
            If steps less-than 0, return node text.  If steps equals 1, return derivation
            string at step.
            </summary>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="M:antlr.ParseTree.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
            <summary>
            Get derivation and return how many you did (less than requested for
            subtree roots.
            </summary>
            <param name="buf">string buffer</param>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="M:antlr.ParseTreeRule.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
            <summary>
            Do a step-first walk, building up a buffer of tokens until
            you've reached a particular step and print out any rule subroots
            insteads of descending.
            </summary>
            <param name="buf">derivation buffer</param>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="T:antlr.TokenStreamRewriteEngine">
            <summary>
            This token stream tracks the *entire* token stream coming from
            a lexer, but does not pass on the whitespace (or whatever else
            you want to discard) to the parser.
            </summary>
            <remarks>
            <para>
            This class can then be asked for the ith token in the input stream.
            Useful for dumping out the input stream exactly after doing some
            augmentation or other manipulations.  Tokens are index from 0..n-1
            </para>
            <para>
            You can insert stuff, replace, and delete chunks.  Note that the
            operations are done lazily--only if you convert the buffer to a
            string.  This is very efficient because you are not moving data around
            all the time.  As the buffer of tokens is converted to strings, the
            toString() method(s) check to see if there is an operation at the
            current index.  If so, the operation is done and then normal string
            rendering continues on the buffer.  This is like having multiple Turing
            machine instruction streams (programs) operating on a single input tape. :)
            </para>
            <para>
            Since the operations are done lazily at toString-time, operations do not
            screw up the token index values.  That is, an insert operation at token
            index i does not change the index values for tokens i+1..n-1.
            </para>
            <para>
            Because operations never actually alter the buffer, you may always get
            the original token stream back without undoing anything.  Since
            the instructions are queued up, you can easily simulate transactions and
            roll back any changes if there is an error just by removing instructions.
            For example,
            </para>
            <example>For example:
            <code>
            TokenStreamRewriteEngine rewriteEngine = new TokenStreamRewriteEngine(lexer);
            JavaRecognizer           parser        = new JavaRecognizer(rewriteEngine);
            ...
            rewriteEngine.insertAfter("pass1", t, "foobar");}
            rewriteEngine.insertAfter("pass2", u, "start");}
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass1"));
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass2"));
            </code>
            </example>
            <para>
            You can also have multiple "instruction streams" and get multiple
            rewrites from a single pass over the input.  Just name the instruction
            streams and use that name again when printing the buffer.  This could be
            useful for generating a C file and also its header file--all from the
            same buffer.
            </para>
            <para>
            If you don't use named rewrite streams, a "default" stream is used.
            </para>
            <para>
            Terence Parr, parrt@cs.usfca.edu
            University of San Francisco
            February 2004
            </para>
            </remarks>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.tokens">
            <summary>
            Track the incoming list of tokens
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.programs">
            <summary>
            You may have multiple, named streams of rewrite operations.
            I'm calling these things "programs."
            Maps string (name) -> rewrite (List)
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.lastRewriteTokenIndexes">
            <summary>
            Map string (program name) -> Integer index
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.index">
            <summary>
            track index of tokens
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.stream">
            <summary>
            Who do we suck tokens from?
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.discardMask">
            <summary>
            Which (whitespace) token(s) to throw out
            </summary>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.rollback(System.String,System.Int32)">
            <summary>
            Rollback the instruction stream for a program so that
            the indicated instruction (via instructionIndex) is no
            longer in the stream.
            </summary>
            <remarks>
            UNTESTED!
            </remarks>
            <param name="programName"></param>
            <param name="instructionIndex"></param>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.deleteProgram(System.String)">
            <summary>
            Reset the program so that no instructions exist
            </summary>
            <param name="programName"></param>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.addToSortedRewriteList(antlr.TokenStreamRewriteEngine.RewriteOperation)">
            <summary>
            If op.index > lastRewriteTokenIndexes, just add to the end.
            Otherwise, do linear
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.RewriteOperation.execute(System.Text.StringBuilder)">
            <summary>
            Execute the rewrite operation by possibly adding to the buffer.
            </summary>
            <param name="buf">rewrite buffer</param>
            <returns>The index of the next token to operate on.</returns>
        </member>
        <member name="T:antlr.TokenWithIndex">
            <summary>
            This token tracks it's own index 0..n-1 relative to the beginning 
            of the stream. It is designed to work with 
            <see cref="T:antlr.TokenStreamRewriteEngine"/> in TokenStreamRewriteEngine.cs
            </summary> 
        </member>
        <member name="F:antlr.TokenWithIndex.index">
            <summary>
            Index into token array indicating position in input stream
            </summary>
        </member>
        <member name="M:antlr.TreeParser.panic">
            <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
            
        </member>
        <member name="F:antlr.debug.ANTLREventArgs.type_">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="T:antlr.debug.DebuggingParser">
            <summary> This type was created in VisualAge.
            </summary>
        </member>
        <member name="M:antlr.debug.DebuggingCharScanner.reportError(antlr.MismatchedCharException)">
            <summary>Report exception errors caught in nextToken() 
            </summary>
        </member>
        <member name="M:antlr.debug.DebuggingCharScanner.reportError(System.String)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.DebuggingCharScanner.reportWarning(System.String)">
            <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.GuessingEventArgs.setValues(System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="M:antlr.debug.InputBufferEventArgs.setValues(System.Int32,System.Char,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.InputBufferListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.InputBufferListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.InputBufferListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferConsume(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "CharConsumed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferLA(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "CharLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferMark(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "Mark" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferRewind(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "Rewind" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferReporter.inputBufferConsume(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary> charBufferConsume method comment.
            </summary>
        </member>
        <member name="M:antlr.debug.InputBufferReporter.inputBufferLA(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary> charBufferLA method comment.
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.consume">
            <summary>Get another token object from the token stream 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.LA(System.Int32)">
            <summary>Return the token type of the ith token of lookahead where i=1
            is the current token being examined by the parser (i.e., it
            has not been matched yet).
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.match(System.Int32)">
            <summary>Make sure current lookahead symbol matches token type <tt>t</tt>.
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.match(antlr.collections.impl.BitSet)">
            <summary>Make sure current lookahead symbol matches the given set
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.reportError(antlr.RecognitionException)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.reportError(System.String)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.reportWarning(System.String)">
            <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.setupDebugging(antlr.TokenStream,antlr.TokenBuffer)">
            <summary>User can override to do their own debugging 
            </summary>
        </member>
        <member name="M:antlr.debug.MessageEventArgs.setValues(System.Int32,System.String)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.MessageListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.MessageListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.MessageListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.MessageListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.MessageListenerBase.reportError(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportError" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.MessageListenerBase.reportWarning(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportWarning" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.NewLineEventArgs.ToString">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.ParserEventSupport">
            <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
        </member>
        <member name="T:antlr.debug.ParserListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.enterRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "EnterRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.exitRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "ExitRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserConsume(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "Consume" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserLA(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "ParserLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "Match" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMismatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatch" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMismatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.reportError(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportError" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.reportWarning(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportWarning" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.semanticPredicateEvaluated(System.Object,antlr.debug.SemanticPredicateEventArgs)">
            <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateFailed(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredFailed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateStarted(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredStarted" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateSucceeded(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.MatchEventArgs.setValues(System.Int32,System.Int32,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.ParserMatchListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserMatchListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserMatchListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "Match" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMismatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatch" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMismatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:antlr.debug.TraceListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.TraceListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.TraceListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.TraceListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.TraceListenerBase.enterRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "EnterRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.TraceListenerBase.exitRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "ExitRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.TokenEventArgs.setValues(System.Int32,System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.ParserTokenListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserTokenListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserTokenListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParserTokenListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserTokenListenerBase.parserConsume(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "Consume" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserTokenListenerBase.parserLA(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "ParserLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:antlr.debug.ParseTreeDebugParser">
            <summary>
            Specifies the behaviour required (i.e. parser modifications) 
            specifically to support parse tree debugging and derivation.
            </summary>
            <remarks>
            <para>
            Override the standard matching and rule entry/exit routines
            to build parse trees.  This class is useful for 2.7.3 where
            you can specify a superclass like
            </para>
            <para>
            class TinyCParser extends Parser(ParseTreeDebugParser);
            </para>
            </remarks>
        </member>
        <member name="F:antlr.debug.ParseTreeDebugParser.currentParseTreeRoot">
            <summary>
            Each new rule invocation must have it's own subtree. Tokens are
            added to the current root so we must have a stack of subtree roots.
            </summary>
        </member>
        <member name="F:antlr.debug.ParseTreeDebugParser.mostRecentParseTreeRoot">
            <summary>
            Track most recently created parse subtree so that when parsing
            is finished, we can get to the root.
            </summary>
        </member>
        <member name="F:antlr.debug.ParseTreeDebugParser.numberOfDerivationSteps">
            <summary>
            For every rule replacement with a production, we bump up count.
            </summary>
        </member>
        <member name="M:antlr.debug.ParseTreeDebugParser.addCurrentTokenToParseTree">
            <summary>
            Adds LT(1) to the current parse subtree.
            </summary>
            <remarks>
            <para>
            Note that the match() routines add the node before checking for 
            correct match.  This means that, upon mismatched token, there 
            will a token node in the tree corresponding to where that token 
            was expected.  For no viable alternative errors, no node will 
            be in the tree as nothing was matched() (the lookahead failed 
            to predict an alternative).
            </para>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParseTreeDebugParser.traceIn(System.String)">
            <summary>
            Create a rule node, add to current tree, and make it current root
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:antlr.debug.ParseTreeDebugParser.traceOut(System.String)">
            <summary>
            Pop current root; back to adding to old root
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:antlr.debug.ScannerEventSupport">
            <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
        </member>
        <member name="M:antlr.debug.SemanticPredicateEventArgs.setValues(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.SemanticPredicateListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.SemanticPredicateListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.SemanticPredicateListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.SemanticPredicateListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SemanticPredicateListenerBase.semanticPredicateEvaluated(System.Object,antlr.debug.SemanticPredicateEventArgs)">
            <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:antlr.debug.SyntacticPredicateListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.SyntacticPredicateListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.SyntacticPredicateListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateFailed(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredFailed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateStarted(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredStarted" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateSucceeded(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.TraceEventArgs.setValues(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.misc.ASTFrame">
            <summary>
            Summary description for myASTFrame.
            </summary>
        </member>
        <member name="F:antlr.debug.misc.ASTFrame.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:antlr.debug.misc.ASTFrame.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:antlr.debug.misc.ASTFrame.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:antlr.debug.misc.JTreeASTPanel">
            <summary>
            Summary description for myJTreeASTPanel.
            </summary>
        </member>
        <member name="F:antlr.debug.misc.JTreeASTPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:antlr.debug.misc.JTreeASTPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:antlr.debug.misc.JTreeASTPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey">
            <summary>An asymmetric key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObject">
            <summary>A schema object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabaseObject">
            <summary>An interface implemented by database objects.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares two database objects.</summary>
            <returns>
            	<em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IHasPermissions">
            <summary>The database object may have permissions associated with it.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IHasPermissions.Permissions">
            <summary>
            The permissions of the object.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_Permissions">
            <summary>Permissions.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_Database">
            <summary>Perent database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_Owner">
            <summary>Owner.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_Name">
            <summary>Name.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_ID">
            <summary>Identifier.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_CaseSensitive">
            <summary>Case sensitivity.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObject.m_FullyQualifiedName">
            <summary>Temporary cache for the fully qualified name.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the schema objects are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the schema object with a specified schema object.</summary>
            <param name="targetObject">The object to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObject.pset_Name(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObject.pset_Owner(System.String)">
            <summary>
            Sets the owner or the schema of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObject.ToString">
            <summary>
            Returns the fully-qualified name of the object prefixed with the object
            type.
            </summary>
            <returns>The fully-qualified name of the object prefixed with the object type.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.ObjectType">
            <summary>
            The object type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.ID">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Owner">
            <summary>
            The owner or the schema of the object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Permissions">
            <summary>The permissions on the object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IHasAuthorization">
            <summary>
            Marks objects that have authorization instead of owner.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IHasAuthorization.Owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ISqlScriptable">
            <summary>
            ISqlScriptable allows retrieving the creation script for a db object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlScriptable.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the asymmetric key with a specified asymmetric key.</summary>
            <returns>
            	<em>True</em> if the asymmetric keys are identical; otherwise,
            <em>false.</em>
            </returns>
            <param name="targetObject">The asymmetric key to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKey.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options, for example quoted identifier on or off.</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.FullyQualifiedName">
            <summary>The fully-qualified name of the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.ObjectType">
            <summary>Returns ObjectType.AsymmetricKey</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.ThumbPrint">
            <summary>The thumb print for the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.KeyAlgorithm">
            <summary>
            The key algorithm.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.KeyLength">
            <summary>The length of the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.PrivateKeyEncryption">
            <summary>The encryption type of the asymmetric key's private key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption">
            <summary>How the private key of the asymmetric key is encrypted.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.NotAvailable">
            <summary>NA = There is no private key for the asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.MasterKey">
            <summary>MK = Private key is encrypted by the master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.PrivateKey">
            <summary>PW = Private key is encrypted by a user-defined password.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.ServiceKey">
            <summary>
            SK = Private key is encrypted by the service master key.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm">
            <summary>The asymmetric key encryption algorithm.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA512">
            <summary>
            1R = RSA 512
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA1024">
            <summary>
            1R = RSA 1024
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA2048">
            <summary>
            1R = RSA 2048
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKeys">
            <summary>A collection of asymmetric keys.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SerializableCollection">
            <summary>A collection that can be serialized to disk.</summary>
            <remarks>For internal use by SQL Compare.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection.GetKey(System.Object)">
            <summary>
            For internal use
            </summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection.GetEnumerator">
            <summary>Returns an enumerator.</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SerializableCollection.Count">
            <summary>The number of items in the collection.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabaseObjects">
            <summary>A collection of database objects.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObjects.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.GetKey(System.Object)">
            <summary>
            Generates a key for an asymmetric key.
            </summary>
            <param name="value">The asymmetric key for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <exclude/>
            <excludetoc/>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKeys.Item(System.String)">
            <summary>Returns an asymmetric key given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.BlobStore">
            <summary>
            Summary description for BlobStore.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificate">
            <summary>A certificate.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificate.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the certificates are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the certificate with a specified certificate.</summary>
            <param name="targetObject">The certificate to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificate.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.FullyQualifiedName">
            <summary>The fully-qualified name of the certificate.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ObjectType">
            <summary>Returns ObjectType.Certificate</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.SerialNumber">
            <summary>
            The certificate's serial number.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.StartDate">
            <summary>The start date of the certificate.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ExpiryDate">
            <summary>
            The expiry date of the certificate.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ActiveForDialog">
            <summary>
            True if the certificate is available to the initiator of a Service Broker dialog
            conversation.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.IssuerName">
            <summary>The name of the certificate's issuer.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.KeyEncryptionType">
            <summary>
            The certificate's private key encryption type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.Subject">
            <summary>
            The certificate's subject.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ThumbPrint">
            <summary>The thumb print for this certificate.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption">
            <summary>
            How the private key of the certificate is encrypted.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.NotAvailable">
            <summary>NA = There is no private key for the certificate.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.MasterKey">
            <summary>MK = Private key is encrypted by the master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.PrivateKey">
            <summary>PW = Private key is encrypted by a user-defined password.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.ServiceKey">
            <summary>
            SK = Private key is encrypted by the service master key.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificates">
            <summary>A collection of certificates.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.GetKey(System.Object)">
            <summary>
            Generates a key for a certificate .
            </summary>
            <param name="value">The certificate for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificates.Item(System.String)">
            <summary>Returns a certificate given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.CheckConstraint">
            <summary>A check constraint.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraint.Equals(RedGate.SQLCompare.Engine.CheckConstraint,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the check constraint with a specified check constraint.</summary>
            <returns>Compares the table with a specified table.</returns>
            <param name="value">The constraint to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Fields">
            <summary>The fields in the check constraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.NoCheck">
            <summary>
            True if the constraint is marked as WITH NOCHECK (that is, it is not
            trusted).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Name">
            <summary>The constraint name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.NotForReplication">
            <summary>True if the check constraint is marked <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Disabled">
            <summary>True if the check constraint is disabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Text">
            <summary>The constraint text.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.CheckConstraints">
            <summary>A collection of check constraints.</summary>
            <moduleiscollection/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.GetKey(System.Object)">
            <summary>
            Generates a key for a check constraint.
            </summary>
            <param name="value">The check constraint for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(System.Int32)">
            <summary>Returns a check constraint.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(System.String)">
            <summary>
            Returns a check constraint given a name.
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(RedGate.SQLCompare.Engine.Table,System.String)">
            <summary>
            Returns a check constraint given a table and a name.
            </summary>
            <param name="table">The table component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrAssemblies">
            <summary>A collection of Common Language Runtime (CLR) assemblies.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.GetKey(System.Object)">
            <summary>
            Generates a key for a CLR assembly.
            </summary>
            <param name="value">The CLR assembly for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssemblies.Item(System.String)">
            <summary>Returns a CLR assembly given its name.</summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionSet">
            <summary>
            The code access permissions for CLR assemblies.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.SAFE">
            <summary>Safe.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.EXTERNAL_ACCESS">
            <summary>External access.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.UNSAFE">
            <summary>Unsafe.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrAssembly">
            <summary>A Common Language Runtime (CLR) assembly.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ISysobjectIdentifiable">
            <summary>
            For classes that store object that can be uniquely identified using a sys.objects identifier.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ISysobjectIdentifiable.SysobjectID">
            <summary>
            The sysobject identier of the object.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the assemblies are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the assembly with a specified assembly.</summary>
            <param name="targetObject">The assembly to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.CanBeAlteredTo(RedGate.SQLCompare.Engine.ClrAssembly)">
            <summary>
            This method check if a CLR assembly can be altered to the target assembly, i.e. all of 
            its method signatures are the same.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.FullyQualifiedName">
            <summary>The fully-qualified name of the assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.SysobjectID">
            <summary>The sysobject identifier for the CLR assembly.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.PermissionSet">
            <summary>
            The code access permission for the CLR assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.CLRName">
            <summary>
            The CLR name of the assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Visibility">
            <summary>
            Indicates whether the assembly's visibility is set to on or off.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Files">
            <summary>The files that belong to the assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ExtendedProperties">
            <summary>The extended properties defined for the CLR assembly.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Clr.ClrAssemblyComparerException">
            <summary>
            This exception is used when two CLR assemblies are compared.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareException">
            <summary>This exception is used as the general exception for SQL Compare.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor">
            <summary>Constructs a SqlCompareException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.String)">
            <summary>Constructs a SqlCompareException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.String,System.Exception)">
            <summary>Constructs a SqlCompareException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an SqlCompareException exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyComparerException.#ctor">
            <summary>
            Constructs an AssemblyComparerException exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyComparerException.#ctor(System.String)">
            <summary>
            Constructs an AssemblyComparerException exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyComparerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an AssemblyComparerException exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyComparerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an ClrAssemblyComparerException exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyMetaData.RvaToOffset(System.UInt32)">
            <summary>
            Converts relative virtual addresses to physical offsets.
            </summary>
            <param name="rva"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyMetaData.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructs the AssemblyMetaData class. 
            </summary>
            <param name="binaryReader"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyMetaData.GetStringFromStringStream(System.Int32)">
            <summary>
            Gets a UTF8 string from the string stream (note that the string stream might not be contiguous and
            may contain all kinds of crap)
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyMetaData.GetBlobFromBlobStream(System.Int32,System.IO.BinaryReader)">
            <summary>
            Gets a binary blob from the blob stream. (note that the blob stream might not be contiguous and
            may contain all kinds of crap)
            </summary>
            <param name="offset"></param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Clr.ClrAssemblyMetaData.GetPEHeaderOffset(System.UInt32,System.IO.BinaryReader)">
            <summary>
            Gets the PE file header offset from the dos stub
            </summary>
            <param name="dosStubOffset"></param>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrFile">
            <summary>A Common Language Runtime (CLR) file.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.Name">
            <summary>The name of the CLR file.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.Contents">
            <summary>
            The raw data of the CLR assembly file.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrFiles">
            <summary>A collection of CLR files.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrFiles.GetEnumerator">
            <summary>
            Returns an enumerator for the CLR files.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFiles.Item(System.Int32)">
            <summary>Returns a CLR file.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFiles.Count">
            <summary>
            The number of CLR files stored.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ConnectionProperties">
            <summary>The connection properties used to connect to a SQL Server database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor">
            <summary>Constructor for the ConnectionProperties class.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor(System.String,System.String)">
            <summary>Constructor for integrated security.</summary>
            <param name="serverName">The SQL Server name.</param>
            <param name="databaseName">The database name.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor for SQL security.</summary>
            <param name="serverName">The SQL Server name.</param>
            <param name="databaseName">The database name.</param>
            <param name="userName">The user name to use to connect to the SQL Server.</param>
            <param name="password">The password to use to connect to the SQL Server.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used in serialization.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.ToString">
            <summary>
            Returns the connection string for this connection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.ServerName">
            <summary>The name of the SQL Server to connect to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.DatabaseName">
            <summary>The name of the database to connect to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.IntegratedSecurity">
            <summary>
            True to use integrated authentication, false for SQL Server
            authentication.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.UserName">
            <summary>The user name to use when connecting to the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.Password">
            <summary>The password to use when connecting to the SQL Server.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Contract">
            <summary>A contract.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IIsSystemObject">
            <summary>
            Indicates that an object instance is a system object when implemented by a
            class.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IIsSystemObject.IsSystemObject">
            <summary>Indicates that the object is a system object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the contracts are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the contract with a specified contract.</summary>
            <param name="targetObject">The contract to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.pset_Name(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>
            
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.PatchUpAfterDeserialization2(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Prerequisites: services loaded!, message types are available
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.ExtendedProperties">
            <summary>The extended properties defined for the contract.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.FullyQualifiedName">
            <summary>The fully-qualified name of the contract.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.IsSystemObject">
            <summary>Indicates whether the object is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Usages">
            <summary>The message types used by the contract.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Services">
            <summary>The services that depend on the contract.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Contracts">
            <summary>A collection of contracts.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.GetKey(System.Object)">
            <summary>
            Generates a key for a contract.
            </summary>
            <param name="value">The contract for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contracts.Item(System.String)">
            <summary>Returns a contract given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Database">
            <summary>A SQL Server database.</summary>
            <remarks>
            	<para>
                    Use <see cref="M:RedGate.SQLCompare.Engine.Database.Register(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)"/> to register the database from a live server or
                    <see cref="M:RedGate.SQLCompare.Engine.Database.LoadFromDisk(System.String)"/> to load a database from a snapshot.
                </para>
            	<para>
                    Registering a database is a long-running operation. Status feedback is provided
                    via the <see cref="P:RedGate.SQLCompare.Engine.Database.Status"/> event handler. To cancel the operation, call
                    CancelOperation.
                </para>
            	<para>
                    You must call <see cref="M:RedGate.SQLCompare.Engine.Database.Dispose"/> when you have finished using a
                    Database object.
                </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.#cctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToDisk(System.String)">
            <summary>Saves the database to disk.</summary>
            <example>
                The example shows how you save and load a snapshot.
                <code lang="CS">
            //register a database using integrated security
            Database db1=new Database();
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            //save the database to disk
            db1.SaveToDisk(@"c:\WidgetStaging.snp");
             
            Database db2=new Database();
            db2.LoadFromDisk(@"c:\WidgetStaging.snp");
             
            //dispose of the objects
            db1.Dispose();
            db2.Dispose();
                </code>
            	<code lang="VB">
            'register a database using integrated security
            Dim db1 As New Database()
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            'save the database to disk
            db1.SaveToDisk("c:\WidgetStaging.snp")
             
            Dim db2 As New Database()
            db2.LoadFromDisk("c:\WidgetStaging.snp")
             
            'dispose of the objects
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
            <param name="fileName">The name of the snapshot file to be created.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.LoadFromDisk(System.String)">
            <summary>Loads the database from disk.</summary>
            <remarks>Progress events are fired via the Status event.</remarks>
            <example>
            See <see cref="M:RedGate.SQLCompare.Engine.Database.SaveToDisk(System.String)"/> for a code sample.
            </example>
            <param name="fileName">The name of the database snapshot file to load.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetConnectionPropertiesFromFile(System.String)">
            <summary>Reads connection properties from a file.</summary>
            <returns>Connection properties.</returns>
            <remarks>
            Provides a way to retrieve SQL Server name, database name, and other connection
            information from a .snp file without loading the file.
            </remarks>
            <param name="fileName">The name of a .scdb file.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.#ctor">
            <summary>
            Constructor
            </summary>
            
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Registers a database.</summary>
            <remarks>
            Connects to a database and retrieves all schema information. The database object
            can then be saved to disk or used in a comparison. Progress feedback is provided via
            the Status event.
            </remarks>
            <example>
                This example shows how you register a database from a live server, with feedback.
                <code lang="CS">
            using System;
            using RedGate.SQL.Shared;
            using RedGate.SQLCompare.Engine;
             
            namespace ConsoleApplication2
            {
                /// &lt;summary&gt;
                /// Summary description for SQLDataCompareSnippets.
                /// &lt;/summary&gt;
                public class Class1
                {
             
                    public static void Main()
                    {
                        Class1 c1=new Class1();
                        c1.Run();
                    }
             
                    private void StatusCallback(object sender, StatusEventArgs e)
                    {
                        //fired by the SqlProvider to indicate events
             
                        if (e.Message!=null)
                        {
                            Console.WriteLine(e.Message);
                        }
             
                        if (e.Percentage!=-1)
                        {
                            Console.WriteLine("{0}%", e.Percentage);
                        }
             
                    }
             
                    private void Run()
                    {
                        Database db=new Database();
                        db.Status+=new StatusEventHandler(this.StatusCallback);
                        db.Register(new ConnectionProperties(".", "WidgetStaging"),Options.Default);
                        db.Dispose();
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQL.Shared
            Imports RedGate.SQLCompare.Engine
             
            Module Module3
             
                Sub Main()
             
                    Dim c As Class1 = New Class1()
             
                    c.Run()
                    Console.WriteLine("Press [Enter]")
                    Console.ReadLine()
             
                End Sub
             
                Public Class Class1
             
                    Sub StatusCallback(ByVal sender As Object, ByVal e As StatusEventArgs)
             
                        If Not (e.Message Is Nothing) Then
                            Console.WriteLine(e.Message)
                        End If
             
                        If e.Percentage &lt;&gt; -1 Then
                            Console.WriteLine("{0}%", e.Percentage)
                        End If
             
             
                    End Sub
             
                    Sub Run()
             
                        Dim db As New Database()
                        db.Status = New StatusEventHandler(AddressOf Me.StatusCallback)
                        db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
                        db.Dispose()
                    End Sub
             
             
                End Class
            End Module
                </code>
            </example>
            <param name="connectionProperties">The connection properties associated with the database.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties)">
            <summary>
            Registers a database for SQL Data Compare.
            </summary>
            <param name="connectionProperties">The connection properties to use for the database connection.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Registers a database for SQL Data Compare.
            </summary>
            <param name="connectionProperties">The connection properties to use for the database connection.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDependencyViewer(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Internal use only.
            </summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the database with another database.</summary>
            <returns>
                A <see cref="T:RedGate.SQLCompare.Engine.Differences"/> collection containing the differences between the
                two databases.
            </returns>
            <remarks>
            	<para>
                    When two databases have been compared they can be synchronized using the
                    <see cref="T:RedGate.SQLCompare.Engine.Work"/> class. Note that all objects that differ are selected
                    for synchronization by default.
                </para>
            	<para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <example>
                This example shows how you compare two databases and print out a summary of the
                differences. 
                <code lang="CS">
            Database db1=new Database();
            Database db2=new Database();
             
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
             
            Differences differences=db1.CompareWith(db2, Options.Default);
             
            foreach (Difference difference in differences)
            {
                Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name);
            }
             
            //dispose of the objects
            db1.Dispose();
            db2.Dispose();
                </code>
            	<code lang="VB">
            Dim db1 As New Database()
            Dim db2 As New Database()
             
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
             
            Dim differences As Differences = db1.CompareWith(db2, Options.Default)
             
            Dim difference As Difference
             
            For Each difference In differences
                Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name)
            Next
             
            'dispose of the objects
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>Compares the database with another database.</summary>
            <returns>
                A <see cref="T:RedGate.SQLCompare.Engine.Differences"/> collection containing the differences between the
                two databases.
            </returns>
            <remarks>
            	<para>
                    When two databases have been compared they can be synchronized using the
                    <see cref="T:RedGate.SQLCompare.Engine.Work"/> class. Note that all objects that differ are selected
                    for synchronization by default.
                </para>
            	<para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="mappings">Owner mappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetFullyQualifiedName(System.String)">
            <summary>
            Converts full names to names with []. E.g. dbo.table -> [dbo].[table]
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.OnStatus(RedGate.SQL.Shared.StatusEventArgs)">
            <summary>
            Fire the status events
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Dispose">
            <summary>Disposes of the object.</summary>
            <remarks>
            It is important to dispose of the object to delete any temporary files it
            uses.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetAvailableOptions">
            <summary>Returns a list of available options.</summary>
            <returns>A list of options.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetDependencies(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the dependencies of a particular string of SQL code. Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.ParseObjectName(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Breaks up a name into its constituent parts, such as object name, owner name, database name, and server name.
            </summary>
            <param name="fullyQualifiedName"></param>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <param name="ownerName"></param>
            <param name="objectName"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetDependencyStacks">
            <summary>
            For internal use only.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.AddDependencyStack(System.Int32,System.Collections.Hashtable,System.Collections.Specialized.HybridDictionary,System.Collections.Stack)">
            <summary>
            For internal use only.
            </summary>
            <param name="id"></param>
            <param name="objectIDs"></param>
            <param name="objectNames"></param>
            <param name="dependencyStack"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetSchemaMappedName(RedGate.SQLCompare.Engine.IDatabaseObject,System.String)">
            <summary>
            To be used instead of FullyQualified names in the case of schemamapped objects.
            </summary>
            <param name="obj"></param>
            <param name="newOwner"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DateScripted">
            <summary>The date the database object was created.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ExtendedProperties">
            <summary>Database-level extended properties.</summary>
            <remarks>
            The collection contains extended properties that have been defined at the
            database level. Individual database objects (such as tables and users) can also have
            extended properties defined on them.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ConnectionProperties">
            <summary>The connection properties for the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.FullTextEnabled">
            <summary>True if the database has full text enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Tables">
            <summary>The tables in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.StoredProcedures">
            <summary>The stored procedures in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Views">
            <summary>The views in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Defaults">
            <summary>The defaults in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.UserDefinedTypes">
            <summary>The user-defined types in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Rules">
            <summary>The rules in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Functions">
            <summary>The user-defined functions in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Users">
            <summary>The users in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Triggers">
            <summary>The DML triggers in the database.</summary>
            <remarks>This will not be implemented for a while, hence it is internal now. Dead code!</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DdlTriggers">
            <summary>The DDL triggers in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Roles">
            <summary>The roles in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Schemas">
            <summary>
            The schemas in the database. Note that schemas were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Assemblies">
            <summary>
            The CLR assemblies in the database. Note that CLR assemblies were introduced in
            SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.MessageTypes">
            <summary>
            The message types in the database. Note that message types were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Synonyms">
            <summary>
            The synonyms in the database. Note that synonyms were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.EventNotifications">
            <summary>
            The database-level event notifications in the database. Note that event
            notifications were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Routes">
            <summary>
            The routes in the database. Note that routes were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Queues">
            <summary>
            The queues in the database. Note that queues were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Contracts">
            <summary>
            The contracts in the database. Note that contracts were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Services">
            <summary>
            The services in the database. Note that services were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.XmlSchemaCollections">
            <summary>
            The XML schema collections in the database. Note that XML schema collections were
            introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.PartitionSchemes">
            <summary>
            The partition schemes in the database. Note that partitions schemes were
            introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.PartitionFunctions">
            <summary>
            The partition functions in the database. Note that partition functions were
            introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServiceBindings">
            <summary>
            The service bindings in the database. Note that service bindings were introduced
            in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Certificates">
            <summary>
            The certificates in the database. Note that certificates were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.SymmetricKeys">
            <summary>
            The symmetric keys in the database. Note that symmetric keys were introduced in
            SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.AsymmetricKeys">
            <summary>
            The asymmetric keys in the database. Note that asymmetric keys were introduced in
            SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Dependencies">
            <summary>The dependencies in the database.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.FullTextCatalogs">
            <summary>The full-text catalogs in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Status">
            <summary>Used to provide status events.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.MajorVersion">
            <summary>
            The major version of the SQL Server for the database. This reflects the
            compatibility mode of the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServerMajorVersion">
            <summary>
                The major server version of the SQL Server for the database. This may be different
                from the <see cref="P:RedGate.SQLCompare.Engine.Database.MajorVersion">MajorVersion</see> property if the database is
                running in a compatibility mode.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Database.EventLogFullException">
            <summary>
            This exception is used when debugging is enabled and the event log is
            full.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.EventLogFullException.#ctor">
            <summary>
            Constructs an event log full exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.EventLogFullException.#ctor(System.String)">
            <summary>
            Constructs an event log full  exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.EventLogFullException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an event log full exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.Populate">
            <summary>
            This method populates the entire database based on the information in a live database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.LightWeightPopulate">
            <summary>
            This method populates part of the database based on the information in a live database.
            Mainly used for sql data compare. Note that dependencies are set, but their
            transitive closure is not calculated.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.SanitizeDatabaseCleanDanglingObjects">
            <summary>
            This goes through the just populated database, and sanitizes it, and adds links if they
            were missed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.SanitizeDatabaseDependencyRelated">
            <summary>
            This goes through the just populated database, and sanitizes it, and adds links if they
            were missed. This step first expands dependencies, and sanitizes the database.
            Prerequisite: SanitizeDatabaseCleanDanglingObjects
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.GetString(System.String)">
            <summary>
            Internationalization support.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateCounterInformation(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates counter information for progress trancking :)
            Prerequisites: Version
            Modifies: 
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateVersionInformation(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates the version information. This is among the very first steps that need to be 
            performed, as the version information that it retrieves is used to determine 
            the scripts that are used subsequently. This method sets the m_MajorVersion and
            m_Database.Guid variables.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateFullTextCatalogs(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates the full text catalogs.
            Prerequisites: Version information.
            Modifies: FullTextCatalogs
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateObjectNames(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates local m_ObjectNames and m_ObjectIDs collections.
            Prerequisites: version information.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateAssemblies(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates the assemblies.
            Prerequisite: Version
            Modifies: Assemblies
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulatePartitions(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Partition functions,
            
            Prerequisites: Version
            Modifies: PartitionFunctions, 
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateTables(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates the tables in the database. It does not retrieve field information,
            just the name of the tables, and some of their properties.
            
            Prerequisites: The database must have the FullTextCatalogs and the PartitionsSchemes populated.
            Also, version information must be known!
            Modifies: Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateObjectText(System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Populates Comments.
            Prerequsite: m_ObjectIds, m_ObjectNames, functions, XML Schema Collections!
            Modifies: Comments.
            </summary>
            <param name="connection"></param>
            <param name="isForDataCompare"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateDefaults(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates defaults
            Prerequisites: version, 
            Modifies: Defaults
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateRules(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Rules
            Prerequisites: Version
            Modifies: Rules
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateUDTs(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates user defined types
            Prerequisites: version, Assemblies, Defaults, Rules
            Modifies: UserDefinedTypes
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateXmlSchemaCollections(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates XML schemata
            Prerequisites: version
            Modifies: XMLSchemaData, XmlSchemaCollections
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateXmlSchemaCollectionDependencies(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates XML schemata dependencies (e.g. for stored procedures)
            Prerequisites: version, xml schema collections,
            Modifies: XMLSchemaData, XmlSchemaCollections
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateFunctions(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates functions
            Prerequisites: version, Assemblies, Users
            Modifies: Functions
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateTableColumns(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates columns for tables only!
            Prerequisites: Tables, Defaults, Rules, XMLCollections, Comments
            Modifies: DependencyStack
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateViews(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Views
            Prerequisites: version, 
            Modifies: Views
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateViewColumns(System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Populates view columns. This is a much simpler thing than for tables, since
            the view script is available, thus udts, ... are not looked up :)
            Prerequisites: Version, Views
            Modifies: Views
            </summary>
            <param name="connection"></param>
            <param name="isForDataCompare">Indicates whether this will be for datacompare.</param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateStoredProcedures(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates stored procedures
            Prerequisites: Assemblies, Users
            Modifies: StoredProcedures
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateIndexes(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates index information.
            Prerequisites: Version, Tables, Views
            Modifies: Indexes
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateYukonStatistics(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates statistics information.
            Prerequisites: Version, Tables, Views
            Modifies: Indexes
            Note that this used only for Yukon servers (includind Yukon's 2k compatibility modes),
            for 2k servers this is populated with indexes.
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateForeignKeys(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates foreign keys
            Prerequisites: Version, Tables, 
            Modifies: ForeignKeys, Dependencies
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateConstraints(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Constraints
            Prerequisites: Tables
            Modifies: Constraints, DependencyStack, Tables
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateTriggers(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Triggers
            Prerequisites: Version, Tables, Views, Assemblies, Users
            Modifies: Triggers, Dependencies, Tables
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateDdlTriggers(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates ddl triggers
            Prerequisites: Version, Assemblies, Users
            Modifies: DdlTriggers
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateUdtDependencies(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates udt dependencies
            Prerequisites: Version, UserDefinedTypes, Tables, StoredProcedures, Functions
            Modifies: Tables, StoredProcedures, Functions
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateUsers(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Users
            Prerequisites: Version
            Modifies: Users
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateRoles(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates roles
            Prerequisites: Version, 
            Modifies: Roles
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateRoleMembership(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates role membership
            Prerequisites: Roles, Users
            Modifies: Roles
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateExtendedProperties(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates extended properties
            Prerequisites: UserDefinedTypes, Users, Tables, Views, Defaults, Rules, StoredProcedures, Functions, and most
            of the Yukon objects!!!
            Modifies: ExtendedProperties, Tables, Views, Defaults, Rules, StoredProcedures, Functions
            Note: This does not make sense on pre SS2K, for those we ignore this.
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulatePermissions(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates permissions
            Prerequisites: Tables, Views, Functions, StoredProcedures,
            Assemblies, Types, XMLSchemaCollections, MessageTypes, ServiceContracts, Services,
            RemoteServiceBindings, Routes, ...
            Modifies: Tables, Views, Functions, StoredProcedures, ...
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulatePermissionsPreYukon(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates permissions
            Prerequisites: Tables, Views, Functions, StoredProcedures
            Modifies: Tables, Views, Functions, StoredProcedures
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulatePermissionsPostYukon(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates permissions
            Prerequisites: Tables, Views, Functions, StoredProcedures
            Modifies: Tables, Views, Functions, StoredProcedures
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateSchemas(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates schemas 
            Prerequisites: version
            Modifies: Schemas
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateAssemblyFiles(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates assembly files
            Prerequisites: Assemblies
            Modifies: AssemblyData
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateSynonyms(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates synonyms
            Prerequisites: Version, 
            Modifies: Synonyms
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateMessageTypes(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates message types
            Prerequisites: Version, XmlSchemaCollections
            Modifies: 
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateContracts(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates contracts
            Prerequisites: Version
            Modifies: Contracts
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateContractMessages(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates contract messages
            Prerequisites: Version, Contracts
            Modifies: Contracts
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateQueues(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates queues
            Prerequisites: Version
            Modifies: 
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateCertificates(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Certificates
            Prerequisites: Version
            Modifies: Certificates
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateSymmetricKeys(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Symmetric Keys
            Prerequisites: Version
            Modifies: SymmetricKeys
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateAsymmetricKeys(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates Asymmetric Keys
            Prerequisites: Version
            Modifies: AsymmetricKeys
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateServices(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates services
            Prerequisites: Version, Queues
            Modifies: Services
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateServiceBindings(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates remote service bindings
            Prerequisites: Version, Services
            Modifies: ServiceBindings
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateServiceContracts(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates service contracts
            Prerequisites: Version, Services, Contracts
            Modifies: Contracts
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateRoutes(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates reoutes
            Prerequisites: Version
            Modifies: Routes
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateParameters(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates parameters
            Prerequisites: Version, StoredProcedures, Functions, XmlSchemaCollections
            Modifies: 
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateEventNotifications(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates event notifications
            Prerequisites: Version, EventNotifications, Tables, Views, Functions, ...
            Modifies: 
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactory.PopulateDatabaseSettings(System.Data.SqlClient.SqlConnection)">
            <summary>
            Populates some database settings (now only checks if fulltext is enabled).
            Prerequisites: Version
            Modifies: The database's fullTextEnabled flag.
            </summary>
            <param name="connection"></param>		
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseFromLiveDBFactoryHelper">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction">
            <summary>The database-level permission.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.None">
            <summary>
            None, this is for internal use only.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Alter">
            <summary>
             Alter (AL ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyAsymmetricKey">
            <summary>
             Alter Any Asymmetric Key (ALAK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyApplicationRole">
            <summary>
             Alter Any Application Role (ALAR) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyAssembly">
            <summary>
             Alter Any Assembly (ALAS) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyCertificate">
            <summary>
             Alter Any Certificate (ALCF) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyDataspace">
            <summary>Alter Any Data Space (ALDS)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyDatabaseEventNotification">
            <summary>
             Alter Any Database Event Notification (ALED) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyFulltextCatalog">
            <summary>Alter Any Full Text Catalog (ALFT)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyMessageType">
            <summary>
             Alter Any Message Type (ALMT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyRole">
            <summary>
             Alter Any Role (ALRL) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyRoute">
            <summary>
             Alter Any Route (ALRT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyRemoteServiceBinding">
            <summary>
             Alter Any Remote Service Binding (ALSB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyContract">
            <summary>
             Alter Any Contract (ALSC) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnySymmetricKey">
            <summary>
             Alter Any Symmetric Key (ALSK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnySchema">
            <summary>
             Alter Any Schema (ALSM) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyService">
            <summary>
             Alter Any Service (ALSV) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyDatabaseDdlTrigger">
            <summary>Alter Any Database DDL Trigger (ALTG)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.AlterAnyUser">
            <summary>
             Alter Any User (ALUS) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Authenticate">
            <summary>
             Authenticate (AUTH) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.BackupDatabase">
            <summary>Back Up Database (BADB)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.BackupLog">
            <summary>Back Up Log (BALO)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Control">
            <summary>
             Control (CL ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Connect">
            <summary>
             Connect (CO ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.ConnectReplication">
            <summary>
             Connect Replication (CORP) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Checkpoint">
            <summary>
             Checkpoint (CP ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateAggregate">
            <summary>
             Create Aggregate (CRAG) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateAsymmetricKey">
            <summary>
             Create Asymmetric Key (CRAK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateAssembly">
            <summary>
             Create Assembly (CRAS) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateCertificate">
            <summary>
             Create Certificate (CRCF) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateDatabase">
            <summary>
             Create Database (CRDB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateDefault">
            <summary>
             Create Default (CRDF) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateDatabaseDdlEventNotification">
            <summary>Create Database DDL Event Notification (CRED)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateFunction">
            <summary>
             Create Function (CRFN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateFulltextCatalog">
            <summary>Create Full Text Catalog (CRFT)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateMessageType">
            <summary>
             Create Message Type (CRMT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateProcedure">
            <summary>
             Create Procedure (CRPR) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateQueue">
            <summary>
             Create Queue (CRQU) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRole">
            <summary>
             Create Role (CRRL) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRoute">
            <summary>
             Create Route (CRRT) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRule">
            <summary>
             Create Rule (CRRU) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateRemoteServiceBinding">
            <summary>
             Create Remote Service Binding (CRSB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateContract">
            <summary>
             Create Contract (CRSC) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateSymmetricKey">
            <summary>
             Create Symmetric Key (CRSK) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateSchema">
            <summary>
             Create Schema (CRSM) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateSynonym">
            <summary>
             Create Synonym (CRSN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateService">
            <summary>
             Create Service (CRSV) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateTable">
            <summary>
             Create Table (CRTB) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateType">
            <summary>
             Create Type (CRTY) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateView">
            <summary>
             Create View (CRVW) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.CreateXmlSchemaCollection">
            <summary>Create XML Schema Collection (CRXS)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Delete">
            <summary>Delete (DL)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Execute">
            <summary>Execute (EX)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Impersonate">
            <summary>Impersonate (IM)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Insert">
            <summary>
             Insert (IN ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Receive">
            <summary>Receive (RC)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.References">
            <summary>References (RF)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Select">
            <summary>Select (SL)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Send">
            <summary>Send (SN)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Showplan">
            <summary>
             Showplan (SPLN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.SubscribeQueryNotifications">
            <summary>
             Subscribe Query Notifications (SUQN) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.TakeOwnership">
            <summary>
             Take Ownership (TO ) 
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.Update">
            <summary>Update (UP)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.ViewDefinition">
            <summary>View Definition (VW)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction.ViewDatabaseState">
            <summary>
             View Database State (VWDS) 
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermission">
            <summary>A database-level permission.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermission.GetPermissionActionName(RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction)">
            <summary>Returns the SQL text name for a database-level permission.</summary>
            <returns>The SQL text name for a database-level permission.</returns>
            <param name="pa">The permission action for which the SQL name is requested.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.UserName">
            <summary>The user or role to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.Action">
            <summary>The action to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.Type">
            <summary>The type of permission.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissions">
            <summary>A collection of database-level permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Equals(RedGate.SQLCompare.Engine.DatabaseLevelPermissions,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the database-level permisssions are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>
            Compares the database-level permission with a specified database-level
            permission.
            </summary>
            <param name="targetPermissions">The database-level permissions to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Item(RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction)">
            <summary>
            The permission type for a specific permission action.
            </summary>
            <param name="permission">The permission type.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.LiveDatabaseSource">
            <summary>A standard SQL Server database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.Deserialize(System.Int32,RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Deserializes data.</summary>
            <param name="nVersionId">The serialization version.</param>
            <param name="obj">The ISerializeFormatter for deserialization.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.Serialize(RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Serializes the specified object.</summary>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.IsDifferentSource(RedGate.SQL.Shared.DataSource)">
            <summary>Compares the data source with a specified data source.</summary>
            <returns><em>true</em> if the data sources are different.</returns>
            <param name="comparisonDataSource">The data source to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.Clone">
            <summary>Clones the data source.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveDatabaseSource.ToConnectionProperties">
            <summary>Returns the ConnectionProperties.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.IsWriteable">
            <summary>The data source can be written to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.DatabaseName">
            <summary>Gets or sets the name of the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.IntegratedSecurity">
            <summary>
            Specifies whether Windows Integrated security or SQL authentication is
            used.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.Password">
            <summary>Gets or sets the password for the SQL user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.SavePassword">
            <summary>
            Specifies whether the password should be written to disk when serializing the
            project.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.ServerName">
            <summary>Gets or sets the name of the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.UserName">
            <summary>
            Gets or sets the SQL Server user name with which to connect to the SQL
            Server.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveDatabaseSource.Version">
            <summary>Gets the current serialized version number of LiveDatabaseSource.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SnapshotSource">
            <summary>A SQL Server database encapsulated within a snapshot.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.#ctor">
            <summary>Constructs a snapshot.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.#ctor(System.String)">
            <summary>Constructs the snapshot file name.</summary>
            <param name="snapshotFileName">The file name of the snapshot.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.IsDifferentSource(RedGate.SQL.Shared.DataSource)">
            <summary>Compares the data source with a specified data source.</summary>
            <returns><em>true</em> if the data sources are different.</returns>
            <param name="comparisonDataSource">The data source to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.Clone">
            <summary>Clones the data source.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.Deserialize(System.Int32,RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Deserializes data.</summary>
            <returns><em>true</em> if the data can be deserialized.</returns>
            <param name="versionId">The serialization version.</param>
            <param name="formatter">The ISerializeFormatter for deserialization.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SnapshotSource.Serialize(RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Serializes data.</summary>
            <param name="formatter">The ISerializeFormatter for serialization.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.IsWriteable">
            <summary>The data source <strong>cannot</strong> be written to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.DatabaseName">
            <summary>Gets or sets the name of the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.ServerName">
            <summary>Gets or sets the name of the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.CreationTime">
            <summary>
            Gets the creation time of the snapshot file (the time at which the file was last
            written to).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.FileName">
            <summary>Gets or sets the snapshot file name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SnapshotSource.Version">
            <summary>Gets the current serialized version number of the snapshot.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidSnapshotType">
            <summary>
            InvalidSnapshotType
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidSnapshotFileException">
            <summary>
            InvalidSnapshotFileException
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DdlTrigger">
            <summary>A DDL trigger.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDependsOnClrAssembly">
            <summary>
            This interface is used to mark database objects that can be directly dependent on
            a CLR assembly. For example a stored procedure may refer to an assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDependsOnClrAssembly.Assembly">
            <summary>
            The CLR assembly for the implementing object, if this is a CLR object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDependsOnClrAssembly.CLRObject">
            <summary>
            True if the implementing object is a CLR object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IExecuteAs">
            <summary>
            Used by database objects that can be executed as a specific user. This is used
            only for SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExecuteAs.ExecuteAs">
            <summary>The user whose security context is to be used.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the DDL trigger with a specified DDL trigger.</summary>
            <returns><em>True</em> if the DDL triggers are identical; otherwise <em>false</em>.</returns>
            <param name="value">The DDL trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.Equals(RedGate.SQLCompare.Engine.DdlTrigger,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the DDL trigger with the specified DDL trigger.</summary>
            <returns><em>True</em> if the DDL triggers are identical; otherwise <em>false</em>.</returns>
            <param name="target">The DDL trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifiers on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ObjectType">
            <summary>Returns ObjectType.DdlTrigger</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.After">
            <summary>True if the trigger is an <em>after</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.InsteadOf">
            <summary>True if the trigger is an <em>instead of</em> trigger<em>.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.IsDisabled">
            <summary>True if the trigger is <em>disabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.FullyQualifiedName">
            <summary>The fully-qualified name of the DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.CLRObject">
            <summary>True if the DDL trigger is a Common Language Runtime (CLR) DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.QuotedIdentifierOn">
            <summary>True if the trigger was created with <em>quoted identifiers on.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AnsiNullsOn">
            <summary>True if the trigger was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Encrypted">
            <summary>True if the DDL trigger definition is <em>encrypted</em>.</summary>
            <remarks>The contents of the trigger cannot be decrypted.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.EventTypes">
            <summary>
            The event types for the DDL trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the DDL
            trigger. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Assembly">
            <summary>The CLR assembly for the DDL trigger, for a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AssemblyClass">
            <summary>The CLR assembly class name for the DDL trigger, for a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AssemblyMethod">
            <summary>The CLR assembly method name for the DDL trigger, for a CLR trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Text">
            <summary>The text of the DDL trigger, if it is not a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExtendedProperties">
            <summary>The extended properties defined for the DDL trigger.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DdlTriggers">
            <summary>A collection of DDL triggers.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.get_UntypedItem(System.String)">
            <summary>Internal use only.</summary>
            <exclude/>
            <param name="fullyQualifiedName">The string-based index to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.GetKey(System.Object)">
            <summary>
            Generates a key for a DDL trigger.
            </summary>
            <param name="value">The DDL trigger for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Internal.
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Internal
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTriggers.Item(System.String)">
            <summary>Returns a DDL trigger given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Default">
            <summary>A database default.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Default.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the defaults are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the default with a specified default.</summary>
            <param name="target">The object to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Default.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.ObjectType">
            <summary>Returns ObjectType.Default</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.SysobjectID">
            <summary>The sysobject identifier for the default.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.ExtendedProperties">
            <summary>The extended properties associated with the default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.Owner">
            <summary>The owner of the default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.Name">
            <summary>The name of the default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.Text">
            <summary>The text of the default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.FullyQualifiedName">
            <summary>The fully-qualified name in the format [owner].[name]</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.Database">
            <summary>The database to which the default belongs.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Defaults">
            <summary>A collection of defaults.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.get_UntypedItem(System.String)">
            <summary>For internal use.</summary>
            <returns>For internal use.</returns>
            <param name="fullyQualifiedName">For internal use.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.GetKey(System.Object)">
            <summary>
            Generates a key for a default.
            </summary>
            <param name="value">The default for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Defaults.Item(System.Int32)">
            <summary>Returns a default.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Defaults.Item(System.String)">
            <summary>Returns a default given a fully qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Defaults.Item(System.String,System.String)">
            <summary>
            Returns a default given its owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Dependencies">
            <summary>A dependency.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.AddDependency(System.Int32,System.Int32,System.Boolean)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <param name="dependencyID"></param>
            <param name="strong"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.IsDependent(System.Int32,System.Int32)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <param name="dependencyID"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderedList(System.Collections.Hashtable)">
            <summary>For internal use only.</summary>
            <param name="workitems"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderListPart1(System.Collections.ArrayList)">
            <summary>
            Iteration one, ignores directed circles.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.OrderListPart2(System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Iteration one, breaks circles for non schemabound functions and procedures.
            This basically adds in random order all the stored procs and functions that are NOT schema 
            bound (their definition does not check internals).
            </summary>
            <param name="list"></param>
            <param name="workitems"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetParents(System.Int32)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetShallowParents(System.Int32)">
            <summary>For internal use only.</summary>
            <param name="id"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.ResetNodes">
            <summary>
            Sets <em>removed</em> to false for all the nodes, that is, for all the
            dependencies.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetUnresetChildren(System.Int32)">
            <summary>
            Enumerates all the child nodes that have not yet been marked as removed, and
            marks them as removed.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetEnumerator">
            <summary>
            Internal use.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetIds(System.UInt64,System.Int32@,System.Int32@)">
            <summary>For internal use only.</summary>
            <param name="key"></param>
            <param name="id"></param>
            <param name="depid"></param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Dependencies.NodeID">
            <summary>
            For a linked list of small node ids, which are just integers.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InternalCollectionBase">
            <summary>A base type for collections used by SQL Compare.</summary>
            <remarks>Used internally by SQL Compare.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.InternalCollectionBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.InternalCollectionBase.GetEnumerator">
            <summary>Returns an enumerator.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.InternalCollectionBase.Count">
            <summary>The number of items in the list.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.InternalCollectionBase.InnerList">
            <summary>
            The underlying ArrayList
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DifferenceType">
            <summary>The type of difference.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.OnlyIn1">
            <summary>The object exists only in the first database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.OnlyIn2">
            <summary>The object exists only in the second database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.Different">
            <summary>The object exists in both databases, but is different.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.DifferenceType.Equal">
            <summary>The object exists in both databases and is identical.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectType">
            <summary>The type of database object.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.None">
            <summary>Not used.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Table">
            <summary>Table.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.StoredProcedure">
            <summary>Stored procedure.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.View">
            <summary>View.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Default">
            <summary>Default.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.FullTextCatalog">
            <summary>Full text catalog.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Function">
            <summary>User-defined function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Role">
            <summary>Role.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Rule">
            <summary>Rule.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.User">
            <summary>User.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.UserDefinedType">
            <summary>User-defined type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Trigger">
            <summary>Trigger.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.DdlTrigger">
            <summary>DDL trigger.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Assembly">
            <summary>Assembly.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Synonym">
            <summary>Synonym.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.XmlSchemaCollection">
            <summary>XML schema collection.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.MessageType">
            <summary>Message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Contract">
            <summary>Contract.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Queue">
            <summary>Queue.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Service">
            <summary>Service.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Route">
            <summary>Route.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.EventNotification">
            <summary>Event notification.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.PartitionScheme">
            <summary>
            Partition scheme.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.PartitionFunction">
            <summary>Partition function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Field">
            <summary>Field.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Index">
            <summary>Index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Schema">
            <summary>Schema.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.ServiceBinding">
            <summary>Service binding.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.Certificate">
            <summary>Certificate.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.SymmetricKey">
            <summary>Symmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ObjectType.AsymmetricKey">
            <summary>Asymmetric key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Difference">
            <summary>A difference between two database objects.</summary>
            <remarks>
                See <see cref="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)"/> and <see cref="T:RedGate.SQLCompare.Engine.Work"/> for more
                information.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Difference.m_SelectedImplicitly">
            <summary>
            This field is for v5 UI to show what has been included implicitly. This is basically very similar
            to m_SelectedAsDependency, BUT it is NOT the same. Also, note that this is used before
            script generation in which m_SelectedAsDependency is used, thus it cannot be reset.
            Also, m_SelectedAsDependency is selecting more (for rebuilds), thus it cannot be used for the UI.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.SelectedAsDependency">
            <summary>
            For internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.SelectedImplicity">
            <summary>
            For internal use only.
            </summary>
            <remarks>
            This is used for the UI only. It has no sideffects, thus it may be set if one wishes to.
            </remarks>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Selected">
            <summary>True if the difference is selected.</summary>
            <remarks>Set to <em>true</em> to include the difference in a migration script.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.DatabaseObjectType">
            <summary>The type of database object the difference represents.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.ObjectIn1">
            <summary>The object in the first database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Name">
            <summary>The name of the database object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.ObjectIn2">
            <summary>The object in the second database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Type">
            <summary>The type of difference.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.MustRebuildTo1">
            <summary>
            Indicates whether we must rebuild the object when migrating to database 1.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.MustRebuildTo2">
            <summary>
            Indicates whether we must rebuild the object when migrating to database 2.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Differences">
            <summary>
            A collection of differences representing the differences between two
            databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Database1">
            <summary>The first database to be compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Database2">
            <summary>The second database to be compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.OwnerMappings">
            <summary>
            Access to the owner mappings.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Item(System.Int32)">
            <summary>A difference.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventNotification">
            <summary>An event notification.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the event notifications are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the event notification with a specified event notification.</summary>
            <param name="targetObject">The event notification to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.FullyQualifiedName">
            <summary>The fully-qualified name of the event notification.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ServiceName">
            <summary>
            The name of the service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.BrokerInstance">
            <summary>
            The broker instance.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.FanIn">
            <summary>True if the event notification has the <em>fan in</em> option enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.EventTypes">
            <summary>
            The event types.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ExtendedProperties">
            <summary>The extended properties defined for the event notification.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventNotifications">
            <summary>A collection of event notifications.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.#ctor(System.Boolean)">
            <summary>
            This is used only for database level event notifications!! queue level ones should use the
            other constructors that set the parent!
            </summary>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.Equals(RedGate.SQLCompare.Engine.EventNotifications,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the event notification collections are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>
            Compares the event notification collection with a specified event notification
            collection.
            </summary>
            <param name="target">The object to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.GetKey(System.Object)">
            <summary>
            Generates a key for an event notification.
            </summary>
            <param name="value">The event notification for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotifications.Item(System.String)">
            <summary>Returns an event notification given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventType">
            <summary>The type of event.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Insert">
            <summary>INSERT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Update">
            <summary>UPDATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Delete">
            <summary>DELETE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateTable">
            <summary>CREATE_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterTable">
            <summary>ALTER_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropTable">
            <summary>DROP_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateIndex">
            <summary>CREATE_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterIndex">
            <summary>ALTER_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropIndex">
            <summary>DROP_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateStatistics">
            <summary>CREATE_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UpdateStatistics">
            <summary>UPDATE_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropStatistics">
            <summary>DROP_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSynonym">
            <summary>CREATE_SYNONYM</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSynonym">
            <summary>DROP_SYNONYM</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateView">
            <summary>CREATE_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterView">
            <summary>ALTER_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropView">
            <summary>DROP_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateProcedure">
            <summary>CREATE_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterProcedure">
            <summary>ALTER_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropProcedure">
            <summary>DROP_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFunction">
            <summary>CREATE_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFunction">
            <summary>ALTER_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFunction">
            <summary>DROP_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateTrigger">
            <summary>CREATE_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterTrigger">
            <summary>ALTER_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropTrigger">
            <summary>DROP_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEventNotification">
            <summary>CREATE_EVENT_NOTIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEventNotification">
            <summary>DROP_EVENT_NOTIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateType">
            <summary>CREATE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropType">
            <summary>DROP_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAssembly">
            <summary>CREATE_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAssembly">
            <summary>ALTER_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAssembly">
            <summary>DROP_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateUser">
            <summary>CREATE_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterUser">
            <summary>ALTER_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropUser">
            <summary>DROP_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRole">
            <summary>CREATE_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRole">
            <summary>ALTER_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRole">
            <summary>DROP_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateApplicationRole">
            <summary>CREATE_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterApplicationRole">
            <summary>ALTER_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropApplicationRole">
            <summary>DROP_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSchema">
            <summary>CREATE_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSchema">
            <summary>ALTER_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSchema">
            <summary>DROP_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLogin">
            <summary>CREATE_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterLogin">
            <summary>ALTER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLogin">
            <summary>DROP_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMessageType">
            <summary>CREATE_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMessageType">
            <summary>ALTER_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMessageType">
            <summary>DROP_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateContract">
            <summary>CREATE_CONTRACT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropContract">
            <summary>DROP_CONTRACT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateQueue">
            <summary>CREATE_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterQueue">
            <summary>ALTER_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropQueue">
            <summary>DROP_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BrokerQueueDisabled">
            <summary>BROKER_QUEUE_DISABLED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateService">
            <summary>CREATE_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterService">
            <summary>ALTER_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropService">
            <summary>DROP_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRoute">
            <summary>CREATE_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRoute">
            <summary>ALTER_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRoute">
            <summary>DROP_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.GrantServer">
            <summary>GRANT_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DenyServer">
            <summary>DENY_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.RevokeServer">
            <summary>REVOKE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.GrantDatabase">
            <summary>GRANT_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DenyDatabase">
            <summary>DENY_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.RevokeDatabase">
            <summary>REVOKE_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QueueActivation">
            <summary>QUEUE_ACTIVATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRemoteServiceBinding">
            <summary>CREATE_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRemoteServiceBinding">
            <summary>ALTER_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRemoteServiceBinding">
            <summary>DROP_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateXmlSchemaCollection">
            <summary>CREATE_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterXmlSchemaCollection">
            <summary>ALTER_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropXmlSchemaCollection">
            <summary>DROP_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEndpoint">
            <summary>CREATE_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterEndpoint">
            <summary>ALTER_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEndpoint">
            <summary>DROP_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePartitionFunction">
            <summary>CREATE_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPartitionFunction">
            <summary>ALTER_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPartitionFunction">
            <summary>DROP_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePartitionScheme">
            <summary>CREATE_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPartitionScheme">
            <summary>ALTER_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPartitionScheme">
            <summary>DROP_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCertificate">
            <summary>CREATE_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCertificate">
            <summary>ALTER_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCertificate">
            <summary>DROP_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabase">
            <summary>CREATE_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabase">
            <summary>ALTER_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabase">
            <summary>DROP_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAuthorizationServer">
            <summary>ALTER_AUTHORIZATION_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAuthorizationDatabase">
            <summary>ALTER_AUTHORIZATION_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateXmlIndex">
            <summary>CREATE_XML_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddRoleMember">
            <summary>ADD_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRoleMember">
            <summary>DROP_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddServerRoleMember">
            <summary>ADD_SERVER_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerRoleMember">
            <summary>DROP_SERVER_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLogin">
            <summary>AUDIT_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLogout">
            <summary>AUDIT_LOGOUT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginFailed">
            <summary>AUDIT_LOGIN_FAILED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Eventlog">
            <summary>EVENTLOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Errorlog">
            <summary>ERRORLOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockDeadlock">
            <summary>LOCK_DEADLOCK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Exception">
            <summary>EXCEPTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCachemiss">
            <summary>SP_CACHEMISS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCacheinsert">
            <summary>SP_CACHEINSERT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCacheremove">
            <summary>SP_CACHEREMOVE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpRecompile">
            <summary>SP_RECOMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectCreated">
            <summary>OBJECT_CREATED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectDeleted">
            <summary>OBJECT_DELETED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.HashWarning">
            <summary>HASH_WARNING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockDeadlockChain">
            <summary>LOCK_DEADLOCK_CHAIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockEscalation">
            <summary>LOCK_ESCALATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbErrors">
            <summary>OLEDB_ERRORS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ExecutionWarnings">
            <summary>EXECUTION_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SortWarnings">
            <summary>SORT_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MissingColumnStatistics">
            <summary>MISSING_COLUMN_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MissingJoinPredicate">
            <summary>MISSING_JOIN_PREDICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ServerMemoryChange">
            <summary>SERVER_MEMORY_CHANGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable0">
            <summary>USERCONFIGURABLE_0</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable1">
            <summary>USERCONFIGURABLE_1</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable2">
            <summary>USERCONFIGURABLE_2</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable3">
            <summary>USERCONFIGURABLE_3</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable4">
            <summary>USERCONFIGURABLE_4</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable5">
            <summary>USERCONFIGURABLE_5</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable6">
            <summary>USERCONFIGURABLE_6</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable7">
            <summary>USERCONFIGURABLE_7</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable8">
            <summary>USERCONFIGURABLE_8</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable9">
            <summary>USERCONFIGURABLE_9</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DataFileAutoGrow">
            <summary>DATA_FILE_AUTO_GROW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LogFileAutoGrow">
            <summary>LOG_FILE_AUTO_GROW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DataFileAutoShrink">
            <summary>DATA_FILE_AUTO_SHRINK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LogFileAutoShrink">
            <summary>LOG_FILE_AUTO_SHRINK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseScopeGdrEvent">
            <summary>AUDIT_DATABASE_SCOPE_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectGdrEvent">
            <summary>AUDIT_SCHEMA_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddloginEvent">
            <summary>AUDIT_ADDLOGIN_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginGdrEvent">
            <summary>AUDIT_LOGIN_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginChangePropertyEvent">
            <summary>AUDIT_LOGIN_CHANGE_PROPERTY_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginChangePasswordEvent">
            <summary>AUDIT_LOGIN_CHANGE_PASSWORD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddLoginToServerRoleEvent">
            <summary>AUDIT_ADD_LOGIN_TO_SERVER_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddDbUserEvent">
            <summary>AUDIT_ADD_DB_USER_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddMemberToDbRoleEvent">
            <summary>AUDIT_ADD_MEMBER_TO_DB_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddRoleEvent">
            <summary>AUDIT_ADD_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAppRoleChangePasswordEvent">
            <summary>AUDIT_APP_ROLE_CHANGE_PASSWORD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectAccessEvent">
            <summary>AUDIT_SCHEMA_OBJECT_ACCESS_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditBackupRestoreEvent">
            <summary>AUDIT_BACKUP_RESTORE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDbccEvent">
            <summary>AUDIT_DBCC_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditChangeAuditEvent">
            <summary>AUDIT_CHANGE_AUDIT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbCallEvent">
            <summary>OLEDB_CALL_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbQueryinterfaceEvent">
            <summary>OLEDB_QUERYINTERFACE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbDatareadEvent">
            <summary>OLEDB_DATAREAD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXml">
            <summary>SHOWPLAN_XML</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeprecationAnnouncement">
            <summary>DEPRECATION_ANNOUNCEMENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeprecationFinalSupport">
            <summary>DEPRECATION_FINAL_SUPPORT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ExchangeSpillEvent">
            <summary>EXCHANGE_SPILL_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseManagementEvent">
            <summary>AUDIT_DATABASE_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectManagementEvent">
            <summary>AUDIT_DATABASE_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabasePrincipalManagementEvent">
            <summary>AUDIT_DATABASE_PRINCIPAL_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectManagementEvent">
            <summary>AUDIT_SCHEMA_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerPrincipalImpersonationEvent">
            <summary>AUDIT_SERVER_PRINCIPAL_IMPERSONATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabasePrincipalImpersonationEvent">
            <summary>AUDIT_DATABASE_PRINCIPAL_IMPERSONATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectTakeOwnershipEvent">
            <summary>AUDIT_SERVER_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectTakeOwnershipEvent">
            <summary>AUDIT_DATABASE_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BlockedProcessReport">
            <summary>BLOCKED_PROCESS_REPORT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXmlStatisticsProfile">
            <summary>SHOWPLAN_XML_STATISTICS_PROFILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeadlockGraph">
            <summary>DEADLOCK_GRAPH</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TraceFileClose">
            <summary>TRACE_FILE_CLOSE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditChangeDatabaseOwner">
            <summary>AUDIT_CHANGE_DATABASE_OWNER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectTakeOwnershipEvent">
            <summary>AUDIT_SCHEMA_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlStarted">
            <summary>FT_CRAWL_STARTED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlStopped">
            <summary>FT_CRAWL_STOPPED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlAborted">
            <summary>FT_CRAWL_ABORTED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UserErrorMessage">
            <summary>USER_ERROR_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectAltered">
            <summary>OBJECT_ALTERED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SqlStmtrecompile">
            <summary>SQL_STMTRECOMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DatabaseMirroringStateChange">
            <summary>DATABASE_MIRRORING_STATE_CHANGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXmlForQueryCompile">
            <summary>SHOWPLAN_XML_FOR_QUERY_COMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanAllForQueryCompile">
            <summary>SHOWPLAN_ALL_FOR_QUERY_COMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerScopeGdrEvent">
            <summary>AUDIT_SERVER_SCOPE_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectGdrEvent">
            <summary>AUDIT_SERVER_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectGdrEvent">
            <summary>AUDIT_DATABASE_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerOperationEvent">
            <summary>AUDIT_SERVER_OPERATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerAlterTraceEvent">
            <summary>AUDIT_SERVER_ALTER_TRACE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectManagementEvent">
            <summary>AUDIT_SERVER_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerPrincipalManagementEvent">
            <summary>AUDIT_SERVER_PRINCIPAL_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseOperationEvent">
            <summary>AUDIT_DATABASE_OPERATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectAccessEvent">
            <summary>AUDIT_DATABASE_OBJECT_ACCESS_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbProviderInformation">
            <summary>OLEDB_PROVIDER_INFORMATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MountTape">
            <summary>MOUNT_TAPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AssemblyLoad">
            <summary>ASSEMBLY_LOAD</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.XqueryStaticType">
            <summary>XQUERY_STATIC_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnSubscription">
            <summary>QN__SUBSCRIPTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnParameterTable">
            <summary>QN__PARAMETER_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnTemplate">
            <summary>QN__TEMPLATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnDynamics">
            <summary>QN__DYNAMICS</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventTypes">
            <summary>A collection of EventTypes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.GetKey(System.Object)">
            <summary>
            Generates a key for an event type.
            </summary>
            <param name="value">The event type for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Internal
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Internal
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperties">
            <summary>The extended properties associated with a database object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.GetKey(System.Object)">
            <summary>
            Generates a key for an extended property.
            </summary>
            <param name="value">The extended property for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.Equals(RedGate.SQLCompare.Engine.ExtendedProperties,RedGate.SQLCompare.Engine.ExtendedProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Returns true if two extended properties are identical
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(System.Int32)">
            <summary>Returns an extended property.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns an extended property given information about its types and names.
            </summary>
            <param name="level0Type">The type of the level0 object for which the extended property is specified.</param>
            <param name="level0Name">The name of the level0 object for which the extended property is specified.</param>
            <param name="level1Type">The type of the level1 object for which the extended property is specified.</param>
            <param name="level1Name">The name of the level1 object for which the extended property is specified.</param>
            <param name="level2Type">The type of the level2 object for which the extended property is specified.</param>
            <param name="level2Name">The name of the level2 object for which the extended property is specified.</param>
            <param name="name">The name of the extended property.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(RedGate.SQLCompare.Engine.ExtendedProperty)">
            <summary>
            Returns an extended property.
            </summary>
            <param name="value">The value of the extended property to get.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperty">
            <summary>An extended property.</summary>
            <remarks>
            See sp_addextendedproperty in <em>SQL Server Books Online</em> for more
            information.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.ToString">
            <summary>A string representation of the extended property.</summary>
            <returns>A string.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.PropertyOn">
            <summary>
            The name of the object on which the extended property is defined on.
            </summary>
            <returns>The name of the object on which the extended property is defined on.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level">
            <summary>
            Retruns the level of the property.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Name">
            <summary>The name of the extended property.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Value">
            <summary>The value of the extended property.</summary>
            <remarks>This can be any data type.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level0Type">
            <summary>The Level0 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level0Name">
            <summary>The Level0 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level1Type">
            <summary>The Level1 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level1Name">
            <summary>The Level1 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level2Type">
            <summary>The Level2 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level2Name">
            <summary>The Level2 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlType">
            <summary>A SQL Server data type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Empty">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Binary">
            <summary>
            binary
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Varbinary">
            <summary>
            varbinary
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Char">
            <summary>
            char
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Varchar">
            <summary>
            varchar
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NChar">
            <summary>
            nchar
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NVarchar">
            <summary>
            nvarchar
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTime">
            <summary>
            datetime
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.SmallDatetime">
            <summary>
            smalldatetime
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Decimal">
            <summary>
            decimal
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Numeric">
            <summary>
            numeric
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Float">
            <summary>
            float
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Real">
            <summary>
            real
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer64">
            <summary>
            integer64
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer32">
            <summary>
            integer32
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer16">
            <summary>
            integer16
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Byte">
            <summary>
            byte
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Money">
            <summary>
            money
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.SmallMoney">
            <summary>
            smallmoney
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Boolean">
            <summary>
            boolean
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Timestamp">
            <summary>
            timestamp
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Guid">
            <summary>
            guid
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Image">
            <summary>
            image
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NText">
            <summary>
            ntext
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Text">
            <summary>
            text
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Variant">
            <summary>
            variant
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Xml">
            <summary>
            XML
            </summary>.
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Other">
            <summary>
            unknown or UDT
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.ClrType">
            <summary>
            CLR type
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Field">
            <summary>A SQL Server field.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.CanMigrateTo(RedGate.SQLCompare.Engine.Field)">
            <summary>
            return true if we can use a simple ALTER TABLE statement to modify the column
            to be safe, check the current and the destination column
            </summary>
            <param name="targetField"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.Equals(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the fields are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the field with a specified field.</summary>
            <param name="targetField">The field to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.Equals(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean,RedGate.SQLCompare.Engine.Database)">
            <summary>True if two fields are identical.</summary>
            <returns><em>true</em> or <em>false.</em></returns>
            <param name="targetField">The field to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="mappings"></param>
            <param name="runOnTwo"></param>
            <param name="masterDatabase"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ColumnID">
            <summary>For internal use only.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Owner">
            <summary>The owner of the field. This is undefined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextIndexed">
            <summary>True if the field is contained in a full-text index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextTypeColumn">
            <summary>
            The column that holds document type information. This is a SQL Server 2005
            feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextLanguage">
            <summary>The language of any full-text index to which the field belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Scale">
            <summary>The scale of the field.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DefaultText">
            <summary>The text of the field's default value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.AllowNulls">
            <summary>True if the field can contain NULL values.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentitySeed">
            <summary>The identity seed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentityIncrement">
            <summary>The identity increment.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Default">
            <summary>The default that is bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DRIDefault">
            <summary>The Declarative Referential Integrity (DRI) default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ComputedText">
            <summary>The computed text of the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.RowGUIDCol">
            <summary>True if the field is a ROWGUIDCOL.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Collation">
            <summary>The collation order of character fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Rule">
            <summary>The rule bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.SqlType">
            <summary>The field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Identity">
            <summary>True if the field is an identity field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Computed">
            <summary>True if the field is computed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.NotForReplication">
            <summary>True if the field is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Descending">
            <summary>True if the field is part of a descending index.</summary>
            <remarks>Valid only if the field belongs to an Index.Fields collection.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DefinedSize">
            <summary>The length of the field.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Included">
            <summary>The column is in an index, and it is included.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Persisted">
            <summary>The column is in a calculated column that is persisted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Name">
            <summary>The name of the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.TypeSchemaName">
            <summary>The name of the schema for the field's data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.TypeName">
            <summary>The name of the field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullyQualifiedTypeName">
            <summary>
            The name of the fully-qualified field type. For SQL Server 2005, this property
            contains the schema name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.XmlDocument">
            <summary>The referenced XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.XmlSchemaCollection">
            <summary>The referenced XML schema collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullyQualifiedName">
            <summary>The fully-qualified name of the field.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Database">
            <summary>The database to which the field belongs.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ObjectType">
            <summary>Returns ObjectType.Field</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FieldBinding">
            <summary>
            Summary description for Binding.
            </summary>
            
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FieldBindings">
            <summary>
            Summary description for FieldBindings.
            </summary>
            
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FieldBindings.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FieldBindings.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FieldBindings.GetKey(System.Object)">
            <summary>
            Generates a key for a field binding.
            </summary>
            <param name="value">The field binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Fields">
            <summary>A collection of fields.</summary>
            <remarks>
            A table contains a collection of fields. An index also contains a collection of
            fields.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.GetKey(System.Object)">
            <summary>
            Generates a key for a field.
            </summary>
            <param name="value">The field for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Fields.Item(System.Int32)">
            <summary>Returns a field.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Fields.Item(System.String)">
            <summary>
            Returns a field given its name
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FileGroup">
            <summary>A filegroup.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroup.Equals(System.Object)">
            <returns><em>True</em> if the filegroups are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the filegroup with a specified filegroup.</summary>
            <param name="obj">The filegroup to compare.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroup.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FileGroup.Name">
            <summary>
            The name of the filegroup.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FileGroups">
            <summary>A collection of filegroups.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroups.GetEnumerator">
            <summary>Internal.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FileGroups.Item(System.Int32)">
            <summary>Returns a filegroup.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FileGroups.Count">
            <summary>The number of filegroups.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FlatFieldList">
            <summary>
            Summary description for FlatFieldList.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReferentialAction">
            <summary>Referential actions the foreign keys.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.NoAction">
            <summary>No action.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.Cascade">
            <summary>No action.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.SetNull">
            <summary>No action.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.SetDefault">
            <summary>No action.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ForeignKey">
            <summary>A foreign key.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKey.Equals(RedGate.SQLCompare.Engine.ForeignKey,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the foreign keys are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the foreign key with a specified foreign key.</summary>
            <param name="value">The foreign key to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Name">
            <summary>The name of the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedTable">
            <summary>The table referenced by the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Fields">
            <summary>The fields in the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedFields">
            <summary>The fields referenced by the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.NotForReplication">
            <summary>True if the foreign key is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.UpdateCascade">
            <summary>True if the foreign key is marked as <em>on update cascade</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.NoCheck">
            <summary>
            True if the foreign key is <em>not trusted</em> (it was created using WITH
            NOCHECK).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.DeleteCascade">
            <summary>True if the foreign key is marked as <em>on delete cascade</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.UpdateReferentialAction">
            <summary>
            The referential action in case of an update.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.DeleteReferentialAction">
            <summary>
            The referential action in case of a delete.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Disabled">
            <summary>True if the foreign key is <em>disabled</em> (it is set to NOCHECK).</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ForeignKeys">
            <summary>A collection of foreign keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.GetKey(System.Object)">
            <summary>
            Generates a key for a foreign key.
            </summary>
            <param name="value">The foreign key for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKeys.Item(System.Int32)">
            <summary>Returns a foreign key.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKeys.Item(System.String)">
            <summary>
            Returns a foreign key given its name
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLToolkit.Engine.Licensing.frmRegistration">
            <summary>
            Summary description for frmRegistration.
            </summary>
        </member>
        <member name="F:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextCatalog">
            <summary>A full text catalog.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the full text catalogs are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the full text catalog with a specified full text catalog.</summary>
            <param name="target">The catalog to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.pset_Filegroup(System.String)">
            <summary>Sets the filegroup. This is only set for SQL Server 2005 databases.</summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.pset_Path(System.String)">
            <summary>Sets the path. This is only used for SQL Server 2005 databases.</summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.pset_IsDefault(System.Boolean)">
            <summary>Sets the IsDefault. This is only used for SQL Server 2005 databases.</summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.pset_IsAccentSensitive(System.Boolean)">
            <summary>Sets the AccentSensitive. This is only used for SQL Server 2005 databases.</summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.ObjectType">
            <summary>Returns ObjectType.FullTextCatalog</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.Tables">
            <summary>The tables that belong to the catalog.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.FullyQualifiedName">
            <summary>The fully-qualified name of the catalog.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.FileGroup">
            <summary>
            The filegroup of the catalog. This is set only for SQL Server 2005
            databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.Path">
            <summary>The path of the catalog. This is used only for SQL Server 2005 databases.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.IsDefault">
            <summary>
            Indicates whether the catalog is the default full text catalog. This is used only
            for SQL Server 2005 databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.IsAccentSensitive">
            <summary>
            Indicates whether the catalog is accent sensitive. This is used only for SQL
            Server 2005 databases.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextCatalogs">
            <summary>A collection of full text catalogs.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.GetKey(System.Object)">
            <summary>
            Generates a key for a full text catalog.
            </summary>
            <param name="value">The full text catalog for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalogs.Item(System.String)">
            <summary>Returns a catalog given its name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FunctionType">
            <summary>The type of function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Inline">
            <summary>
            An inline function.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Scalar">
            <summary>
            A scalar function.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Table">
            <summary>
            A table function.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Aggregate">
            <summary>
            An aggregate.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Function">
            <summary>A user-defined function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Function.m_SchemaBoundFunctions">
            <summary>Schema bound functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the function with a specified function.</summary>
            <returns><em>True</em> if the functions are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The function to compare with.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.CheckIfFunctionTableColumnsNeedRebuild(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.Function)">
            <summary>
            Checks if a function columns have been modified in a way that requires rebuild.
            
            Note that computed columns cannot be dropped!
            </summary>
            <param name="master"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ObjectType">
            <summary>Returns ObjectType.Function</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.FunctionType">
            <summary>Returns the function type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ExtendedProperties">
            <summary>The extended properties defined on the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.SysobjectID">
            <summary>
            The sysobject identifier for this function.
            </summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Text">
            <summary>The text of the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.SchemaBound">
            <summary>True if the function is schema bound.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.QuotedIdentifierOn">
            <summary>True if the function was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AnsiNullsOn">
            <summary>True if the function was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Parameters">
            <summary>The function parameters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ReturnParameter">
            <summary>The function's return parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.NullOnNullInput">
            <summary>
            The function returns NULL on NULL input.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Assembly">
            <summary>
            The CLR assembly for the function, if this is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the function.
            This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyClass">
            <summary>
            The CLR assembly class name for the function, if this is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyMethod">
            <summary>
            The CLR assembly method name for the function, if this is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ReturnFields">
            <summary>The function's return fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.CLRObject">
            <summary>
            True if the function is a CLR function.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Encrypted">
            <summary>True if the function definition was encrypted.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Functions">
            <summary>A collection of functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.GetKey(System.Object)">
            <summary>
            Generates a key for a function.
            </summary>
            <param name="value">The function for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.get_UntypedItem(System.String)">
            <summary>For internal use.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Functions.Item(System.Int32)">
            <summary>Returns a function.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Functions.Item(System.String)">
            <summary>
            Returns a function given its name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Functions.Item(System.String,System.String)">
            <summary>
            Returns a function given its owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FuzzyBucket.Ones">
            <summary>
            Returns an ArrayList of the object in one that remains unmapped in the FuzzyBucket
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlIndexType">
            <summary>The type of XML index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.Value">
            <summary>Value.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.Path">
            <summary>Path.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.XmlIndexType.Property">
            <summary>Property.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Index">
            <summary>An index.</summary>
            <remarks>
            Primary keys, unique constraints, and statistics are considered to be special
            types of index.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FileGroup">
            <summary>The filegroup or the partition scheme on which the index is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.NoRecompute">
            <summary>True if the index is defined with NORECOMPUTE.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Pad">
            <summary>The index padding.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IgnoreDuplicateKeys">
            <summary>True if set to ignore duplicate keys.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.PartitionedField">
            <summary>
            Indicates the field over which the index is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FullTextKey">
            <summary>True if the index is used in a full-text key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Statistics">
            <summary>True if the index is a statistic.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.XmlIndexType">
            <summary>
            The type of the XML index. This type can be <em>Value</em>, <em>Path</em>,
            <em>Property</em>, or <em>None</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.XmlPrimaryIndex">
            <summary>The primary XML index, if this index is a secondary XML index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Name">
            <summary>The name of the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FillFactor">
            <summary>The fill factor.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.PrimaryKey">
            <summary>True if the index is a primary key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Fields">
            <summary>The fields in the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Clustered">
            <summary>True if the index is clustered.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Unique">
            <summary>True if the index is unique.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.UniqueConstraint">
            <summary>True if the index is a unique constraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Owner">
            <summary>
            The owner of the index. This is undefined.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Xml">
            <summary>True if the index is an XML index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsPartitioned">
            <summary>
            Indicates whether the index is built on a partition scheme. If it is, the name of
            the partition scheme is returned by the filegroup property.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.AllowRowLocks">
            <summary>True if the index allows row locks.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.AllowPageLocks">
            <summary>True if the index allows page locks.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsDisabled">
            <summary>
            Indicates whether the index is disabled.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FullyQualifiedName">
            <summary>The fully-qualified name of the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Database">
            <summary>The database to which the index belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.ObjectType">
            <summary>Returns ObjectType.Index</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Indexes">
            <summary>A collection of indexes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.GetKey(System.Object)">
            <summary>
            Generates a key for an index.
            </summary>
            <param name="value">The index for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Item(System.Int32)">
            <summary>Returns an index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Item(System.String)">
            <summary>
            Returns an index given a name.
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MappingException">
            <summary>Exception thrown when an error is encountered whilst generating SQL.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.String)">
            <summary>
            Creates a new exception with the specified detail message.
            </summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception with the specified detail message and cause.
            </summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PrepareStringDelegate">
            <summary>
                Creates the name used for comparing two objects when using the
                <see cref="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CreateMappings(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">CreateMappings</see> method.
            </summary>
            <param name="obj">The object for which the name is to be generated.</param>
            <param name="useFullName">
            If <em>true</em>, uses the fully-qualified name. If <em>false</em>, uses the
            name.
            </param>
            <param name="context">The context object passed back from the <see cref="T:RedGate.SQLCompare.Engine.Mappings">Mappings</see> class.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mapping">
            <summary>
            Abstract class used to contain a mapping.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mapping.m_obj1">
            <summary>
            The object in the first database or null.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mapping.m_obj2">
            <summary>
            The object in the second database or null.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping.#ctor(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Creates a new mapping from obj1 to obj2. <see cref="P:RedGate.SQLCompare.Engine.Mapping.Include"/> is set to true if both objects
            are not null.
            </summary>
            <param name="obj1">Database object in 1 or null.</param>
            <param name="obj2">Database object in 2 or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping.#ctor(RedGate.SQLCompare.Engine.Mapping)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="copy">Mapping object to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping.CompareTo(System.Object)">
            <summary>Sorts the Mappings.</summary>
            <returns>
            Less than zero when this instance is less than the specified object; zero when
            this instance is equal to the specified object; greater then zero when this instance is
            greater than the specified object.
            </returns>
            <param name="obj">The object to be compared.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping.Include">
            <summary>Specifies whether the mapping is to be included.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mappings">
            <summary>
            Abstract class for creating a set of mappings from a list of database objects.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mappings.m_Forward">
            <summary>
            Name forward mapping from full name of obj1 to Mapping.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mappings.m_Backward">
            <summary>
            Name backward mapping from full name of obj2 to Mapping.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.#ctor(RedGate.SQLCompare.Engine.PrepareStringDelegate)">
            <summary>
            Contructor used when string preparation delegate is being changed.
            </summary>
            <param name="prepareStringDelegate">Function to be used to prepare string.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.#ctor(RedGate.SQLCompare.Engine.Mappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="mappings">Mappings to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>Attempts to join two objects in one mapping.</summary>
            <returns>The mapping created.</returns>
            <param name="obj1">The first object, or null.</param>
            <param name="obj2">The second object, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.ShouldInclude(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Split(RedGate.SQLCompare.Engine.Mapping)">
            <summary>
            Splits a mapping and creates two mappings; one to <em>null</em>, and one from
            <em>null</em>.
            </summary>
            <param name="old1">The mapping to be split, both obj1 and obj2 should be not null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.FromOne(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns the mapping of the object in the first database.
            </summary>
            <param name="in1">object that the mapping is from, not null.</param>
            <returns>null if no mapping exists, or the mapping.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.FromOne(System.String)">
            <summary>Returns the Mapping of the object in the first database.</summary>
            <returns>If no mapping exists, <em>null</em>; otherwise, the Mapping.</returns>
            <param name="in1">The FullyQualifiedName of the object in the first database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.FromTwo(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns the mapping of the object in the second database.
            </summary>
            <param name="in2">object that the mapping is from, not null.</param>
            <returns>null if no mapping exists, or the mapping.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.FromTwo(System.String)">
            <summary>Returns the Mapping of the object in the second database.</summary>
            <returns>If no mapping exists, <em>null</em>; otherwise, the Mapping.</returns>
            <param name="in2">The FullyQualifiedName of the object in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Sort">
            <summary>
            Sorts the Mappings according the criteria appropriate for the object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.CreateMappings(RedGate.SQLCompare.Engine.SerializableCollection,RedGate.SQLCompare.Engine.SerializableCollection,System.Object,System.Boolean)">
            <summary>
            Creates a mapping for each object in the collection where such a mapping is possible. All
            of the iteration is performed here and the matching can be affected by changing <see cref="M:RedGate.SQLCompare.Engine.Mappings.ShouldInclude(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.Object)"/>
            in the sub class. The main action of joining to objects together
            is performed by <see cref="M:RedGate.SQLCompare.Engine.Mappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)"/> which can itself call <c>CreateMappings</c> on child database
            objects.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
            <param name="extra">This can be used by the <see cref="M:RedGate.SQLCompare.Engine.Mappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)"/> function for extra information on how to join the objects.</param>
            <param name="useFullName">Use the FullyQualifiedName for matching</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Clear">
            <summary>
            Removes all objects from the Mappings instance.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.RemoveAt(System.Int32)">
            <summary>Removes the mapping at the specified index of the Mappings instance.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="">Mapping is null at the specified index.</exception>
            <param name="index">The index of the mapping to be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.RealRemove(RedGate.SQLCompare.Engine.Mapping)">
            <summary>
            Removes the specified object from the mappings instance.
            </summary>
            <param name="mapping">Mapping object to be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.RealAdd(RedGate.SQLCompare.Engine.Mapping)">
            <summary>
            Adds a mapping to this Mappings instance. This will change the forwards and backwards
            maps as necessary. This will break any mapping that will conflict with the added mapping.
            </summary>
            <param name="mapping">mapping object to be added, not null.</param>
            <returns>index of the mapping object in the Mappings.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Add(System.Object)">
            <summary>Adds an <see cref="T:System.Object"/> to the end of the Mappings instance.</summary>
            <returns>The Mappings index at which the object has been added.</returns>
            <param name="value">The object to be added to the end of the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Remove(System.Object)">
            <summary>
                Removes the first occurrence of the specified <see cref="T:System.Object"/> from the
                Mappings instance.
            </summary>
            <param name="value">The object to remove from the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Contains(System.Object)">
            <summary>Determines whether the Mappings instance contains a specified object.</summary>
            <returns>
            	<em>true</em> if the Mappings instance contains the specified object; otherwise,
            <em>false</em>.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to locate in the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.IndexOf(System.Object)">
            <summary>
                Searches for the specified <see cref="T:System.Object"/> and returns the zero-based
                index of the first occurrence within the Mappings instance.
            </summary>
            <returns>
            If found, the zero-based index of the first occurrence of the object within the
            Mappings instance; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.OnValidate(System.Object)">
            <summary>
            Performs additionl custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLCompare.Engine.Mappings"/> only supports <see cref="T:RedGate.SQLCompare.Engine.Mapping"/> objects.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire Mappings instance to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the
            Mappings instance. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.Insert(System.Int32,System.Object)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">Throws <see cref="T:System.NotImplementedException"/> always</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.GetEnumerator">
            <summary>Returns an enumerator that can iterate through the Mappings instance.</summary>
            <returns>An IEnumerator for the Mappings instance.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.CancelOperation">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            An OperationCancelledException will be thrown.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.PrepareString(RedGate.SQLCompare.Engine.IDatabaseObject,System.Boolean,System.Object)">
            <summary>
            A default implementation of the prepare string delegate.
            </summary>
            <param name="obj"></param>
            <param name="useFullName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.Context">
            <summary>
            Access to the mapping context. The type of the context is dependent on the mapped objects.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Mappings instance is synchronized
            (thread-safe).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.IsFixedSize">
            <summary>Gets a value indicating whether the Mappings instance has a fixed size.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.IsReadOnly">
            <summary>Gets a value indicating whether the Mappings instance is read-only.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLCompare.Engine.Mapping"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the Mapping to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Mappings
            instance.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.Count">
            <summary>Gets the number of elements contained in the Mappings instance.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings.Status">
            <summary>
            The event handler used to receive status update events.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Members">
            <summary>A collection of role members. These can be users or roles.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.GetKey(System.Object)">
            <summary>
            Generates a key for a member.
            </summary>
            <param name="value">The memeber for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Members.Item(System.Int32)">
            <summary>Returns a user or role.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Members.Item(System.String)">
            <summary>
            Returns a user or role given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WarningSeverity">
            <summary>
            Warning severity.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.Information">
            <summary>Information.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.Low">
            <summary>Low.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.Medium">
            <summary>Medium.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WarningSeverity.High">
            <summary>High.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Message">
            <summary>A message.</summary>
            <remarks>See <see cref="T:RedGate.SQLCompare.Engine.Work"/> for more information.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String,System.Object)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="arg0"></param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String,System.Object,System.Object)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.WarningSeverity,System.String,System.Object[])">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="args"></param>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.Text">
            <summary>The text of the message.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.DatabaseObject">
            <summary>The database object to which this message belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.MessageTypeID">
            <summary>The identifier of the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Message.WarningSeverity">
            <summary>The severity of the message or warning.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Messages">
            <summary>A collection of messages.</summary>
            <remarks>
            See <see cref="T:RedGate.SQLCompare.Engine.Work"/> for more information.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.#ctor">
            <summary>Creates a new message collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Add(RedGate.SQLCompare.Engine.Message)">
            <summary>For internal use only.</summary>
            <returns></returns>
            <exclude/>
            <param name="value">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Messages.Item(System.Int32)">
            <summary>Returns a message.</summary>
            <param name="index">The zero-based index for the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageTypeValidation">
            <summary>The validation type for a message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.Xml">
            <summary>XML.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.Empty">
            <summary>Empty.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageType">
            <summary>A message type.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageType.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the message type with a specified message type.</summary>
            <returns>
            	<em>True</em> if the message types are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The message type to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageType.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.FullyQualifiedName">
            <summary>The fully-qualified name of the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.ObjectType">
            <summary>Returns ObjectType.MessageType</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Validation">
            <summary>The validation requirement for the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.XmlCollection">
            <summary>The XML schema collection referenced by the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Contracts">
            <summary>
            The dependent contracts.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.IsSystemObject">
            <summary>
            Indicates whether the object in question is a system object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.ExtendedProperties">
            <summary>The extended properties defined for the message type.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageTypes">
            <summary>A collection of message types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.GetKey(System.Object)">
            <summary>
            Generates a key for a message type.
            </summary>
            <param name="value">The message type for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageTypes.Item(System.String)">
            <summary>Returns a message type given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageUsage">
            <summary>A message usage.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsage.Equals(RedGate.SQLCompare.Engine.MessageUsage,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the message usages are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the message usage with a specified message usage.</summary>
            <param name="target">The message usage to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.MessageType">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.SentByInitiator">
            <summary>True if the message type in the usage is sent by the initiator.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.SentByTarget">
            <summary>True if the message type in the usage is sent by the target.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageUsages">
            <summary>A collection of message usages.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.GetKey(System.Object)">
            <summary>
            Generates a key for a message usage.
            </summary>
            <param name="value">The message usage for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.NullableBinaryReader">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.ReadString">
            <summary>For internal use only.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.NullableBinaryWriter">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryWriter.Write(System.String)">
            <summary>For internal use only.</summary>
            <param name="value">For internal use only.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException">
            <summary>
            ObjectNotInDatabaseException is used when a database object that is not in the
            database is requested.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor">
            <summary>
            Constructs an ObjectNotInDatabaseException exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor(System.String)">
            <summary>
            Constructs an ObjectNotInDatabaseException exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an ObjectNotInDatabaseException exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectNotInDifferences">
            <summary>
            ObjectNotInDifferences is used when a database object that is not in the
            differences collection is requested.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor">
            <summary>
            Constructs an ObjectNotInDifferences exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor(System.String)">
            <summary>
            Constructs an ObjectNotInDifferences exception.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an ObjectNotInDifferences exception.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.OptionDescriptionAttribute">
            <summary>Options used in comparison and synchronization.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OptionDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="friendlyName">The friendly name of the option description.</param>
            <param name="helpText">Help text.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OptionDescriptionAttribute.FriendlyName">
            <summary>A friendly name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OptionDescriptionAttribute.HelpText">
            <summary>Some help text.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Options">
            <summary>Options used when comparing and synchronizing databases.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.Default">
            <summary>
            	<para>The default options for a comparison. These are:</para>
            	<list type="bullet">
            		<item>IgnoreFileGroups</item>
            		<item>IgnoreFillFactor</item>
            		<item>IgnoreUserProperties</item>
            		<item>IgnoreWhiteSpace</item>
            		<item>IgnoreWithElementOrder</item>
            		<item>IncludeDependencies</item>
            	</list>
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ForceColumnOrder">
            <summary>Force table column order to be identical.</summary>
            <remarks>
            If additional columns are inserted into the middle of a table this option will force a rebuild of the table so the column order after synchronization is correct
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFillFactor">
            <summary>Ignore fill factor.</summary>
            <remarks>
            Ignores the fill factor in indexes when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnorePermissions">
            <summary>Ignore permissions.</summary>
            <remarks>
            Ignores permissions on objects when comparing and synchronizing objects
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWhiteSpace">
            <summary>Ignore white space.</summary>
            <remarks>
            Ignores white space (newlines, tabs, spaces etc.) when comparing objects
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreBindings">
            <summary>Ignore bindings.</summary>
            <remarks>
            Ignores bindings on columns and user defined types (eg sp_bindrule and sp_bindefault clauses won't be scripted)
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreQuotedIdentifiersAndAnsiNullSettings">
            <summary>Ignore SET QUOTED_IDENTIFIER and SET ANSI_NULLS statements.</summary>
            <remarks>
            Ignores these common SET statements when comparing views, stored procedures etc. Note that these statements will still appear in synchronization scripts.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.CaseSensitiveObjectDefinition">
            <summary>Treat items as case sensitive.</summary>
            <remarks>
            Treats object names such as ATable and atable as different, and carries out case sensitive comparisons on stored procedures etc.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreExtendedProperties">
            <summary>
            Ignore extended properties
            </summary>
            <remarks>
            Ignores extended properties when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFullTextIndexing">
            <summary>Ignore full text indexing.</summary>
            <remarks>
            Ignores full text indexes, catalogs etc. when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.NoSQLPlumbing">
            <summary>Do not include plumbing for transactional synchronization scripts.</summary>
            <remarks>
            Removes transactions from the synchronization scripts to produce more readable SQL
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreCollations">
            <summary>Ignore collation order.</summary>
            <remarks>
            Ignores collation orders on character datatype columns when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreComments">
            <summary>Ignore comments.</summary>
            <remarks>
            Ignores comments when comparing views, stored procedures etc. Note that comments will still appear in the synchronization scripts
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexes">
            <summary>Ignore indexes.</summary>
            <remarks>
            Ignores indexes, unique constraints and primary keys when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreKeys">
            <summary>Ignore foreign keys.</summary>
            <remarks>
            Ignores foreign keys when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreChecks">
            <summary>Ignore check constraints.</summary>
            <remarks>
            Ignores check constraints when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTriggers">
            <summary>Ignore DML triggers.</summary>
            <remarks>
            Ignores DML triggers when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IncludeDependencies">
            <summary>Include dependencies.</summary>
            <remarks>
            Includes dependent objects when comparing and synchronizing databases. For example, if a view depends on a table then the table will be synchronized when synchronizing the view
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreInsteadOfTriggers">
            <summary>Ignore INSTEAD OF triggers.</summary>
            <remarks>
            Ignores INSTEAD OF triggers when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFileGroups">
            <summary>Ignore filegroups, partition schemes, and partition functions.</summary>
            <remarks>
            Ignores FILEGROUP clauses when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIdentitySeedAndIncrement">
            <summary>Ignore identity seed and increment values.</summary>
            <remarks>
            Ignores identity seed and increment values when comparing databases. Note that they will still appear in synchronization scripts
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithNocheck">
            <summary>Ignore WITH NOCHECK on foreign keys and check constraints.</summary>
            <remarks>
            Ignores disabled and not trusted flags on foreign keys. Ignores the 'not trusted' flag on foreign keys and check constraints. Note that if foreign keys or constraints are disabled then this will still be flagged.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreConstraintNames">
            <summary>Ignore constraint names.</summary>
            <remarks>
            Ignores the names of foreign keys, indexes, primary keys, default, unique and check constraints when comparing. The names will still be scripted.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreStatistics">
            <summary>Ignore statistics.</summary>
            <remarks>
            Ignores statistics when comparing and synchronizing
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DoNotOutputCommentHeader">
            <summary>Do not output comment header.</summary>
            <remarks>
            Do not include the comment in the header of the output script
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.AddWithEncryption">
            <summary>
            Add WITH ENCRYPTION option to stored procedures etc.
            </summary>
            <remarks>
            Add WITH ENCRYPTION option to stored procedures etc.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSynonymDependencies">
            <summary>
            Ignore dependencies through synonyms.
            </summary>
            <remarks>
            Ignore dependencies through synonyms.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.SeparateTriggers">
            <summary>
            Separate triggers from tables and views.
            </summary>
            <remarks>
            Separate triggers from tables and views.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreOwners">
            <summary>
            Ignore owners when checking for equality.
            </summary>
            <remarks>
            Ignore owners when checking for equality.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreQueueEventNotifications">
            <summary>
            Ignore event notifications on queues.
            </summary>
            <remarks>
            Ignore event notifications on queues.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.TargetIsPreYukon">
            <summary>Flag target database as prior to SQL Server 2005. Internal use only.</summary>
            <remarks>
            Target database is pre SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.UseClrUdtToStringForClrMigration">
            <summary>
            If a CLR assembly must be changed, unbind the dependent types from tables using
            ToString, and then convert these table values back to CLR type.
            </summary>
            <remarks>
            Target database is post SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ConsiderNextFilegroupInPartitionSchemes">
            <summary>
            If set, the next filegroups in partition schemes are compared with the filegroups
            that have a partition range associated with them.
            </summary>
            <remarks>
            Target database is post SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreCertificatesAndCryptoKeys">
            <summary>
            Ignore certificates, symmetric keys, and asymmetric keys in SQL Server 2005
            databases.
            </summary>
            <remarks>
            Target database is post SQL Server 2005.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTriggerOrder">
            <summary>
            Ignore trigger order.
            </summary>
            <remarks>
            Target server is either SQL Server 2000 or later.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreUsers">
            <summary>
            Ignore users' permissions and role memberships.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreUserProperties">
            <summary>
            Ignore user properties.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DisableAndReenableDdlTriggers">
            <summary>Disable and later re-enable DDL triggers. SQL Server 2005 only.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithElementOrder">
            <summary>
            Ignore the order of <em>with elements</em> in non CLR stored procedures,
            functions, triggers, DDL triggers, and views.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexLockProperties">
            <summary>
            Ignore the lock properties of indexes.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreReplicationTriggers">
            <summary>
            Ignore replication triggers.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIdentityProperties">
            <summary>
            Ignores identity properties.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Parameter">
            <summary>A SQL Server parameter.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameter.Equals(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the parameters are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the parameter with a specified parameter.</summary>
            <param name="targetParameter">The parameter to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Scale">
            <summary>The scale of the parameter.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.SqlType">
            <summary>The type of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.DefinedSize">
            <summary>The length of the parameter.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Name">
            <summary>The name of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.TypeName">
            <summary>The name of the type of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.XmlDocument">
            <summary>True if the parameter is an XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.XmlSchemaCollection">
            <summary>The XML schema collection for strongly-typed XML parameters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.IsOutput">
            <summary>Indicates whether the parameter is an output parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.HasDefaultValue">
            <summary>
            True if there is a default value.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.DefaultValue">
            <summary>The default value of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Collation">
            <summary>
            The collation of the parameter.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Parameters">
            <summary>A collection of parameters.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use only.
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use only.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.GetKey(System.Object)">
            <summary>
            Generates a key for a parameter.
            </summary>
            <param name="value">The parameter for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.Equals(RedGate.SQLCompare.Engine.Parameters,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the parameter collections are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the parameters collection with a specified parameters collection.</summary>
            <param name="target">The collection of parameters to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameters.Item(System.Int32)">
            <summary>Returns the parameter at the specified position.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameters.Item(System.String)">
            <summary>
            Returns the parameter with the specified name.
            </summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParserHelper">
            <summary>
            Summary description for ParserHelper.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.TextEqualWithExtraParantheses(System.String,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This is based on TextEqual but sort of ignores parantheses. Anything can be surrounded by any number of matching
            parantheses, as long as this does not affect evaluation order. This method builds up the expression trees
            for the input defaults and constraints, and does a comparison at the tree level. Comments and whitespaces
            are ignored to support future extensions, but note the SS does not allow comments in defaults/constraints,
            neither does it allow arbitrary whitespaces. (SS also has a go at parantheses, and Yukon goes bererk with them
            anyway.)
            </summary>
            <param name="text1"></param>
            <param name="text2"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsAstNode(antlr.collections.AST,antlr.collections.AST,System.Boolean)">
            <summary>
            Compares two AST nodes, and tells us whether they are different or not.
            </summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsTree(antlr.collections.AST,antlr.collections.AST,System.Boolean)">
            <summary>
            Compares two ASTs, returns true if they are equal.
            </summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive">Indicates whether comparison is case sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsChildren(antlr.collections.AST,antlr.collections.AST,System.Boolean,System.Boolean)">
            <summary>
            iterates through all the siblings and compares them including
            their subtrees.
            </summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive"></param>
            <param name="specialCaseConvert"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionFunction">
            <summary>A partition function.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the partition function with a specified partition function.</summary>
            <returns>
            	<em>True</em> if the partition functions are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The partition function to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.GetWorkList(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Not null if it is possible to alter the database to change the source (this) partition
            function to the target partition function using alter statements without 
            a full rebuild of this partition function and all the dependants.
            </summary>
            <param name="target">The assembly to compare with</param>
            <param name="options">Comparison options</param>
            <returns>An arraylis that has the consolidated boundaries, and information about
            which partition function the boundary belongs to. The result is null if the 
            partition function must rebuilt. E.g. for such a case is difference in left/right 
            boundary handling.</returns>
            <param name="onlyDifference">Only difference: in this case ignore dependant partition schemes and their filegroups.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.FullyQualifiedName">
            <summary>The fully-qualified name for the partition function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.ExtendedProperties">
            <summary>The extended properties defined for the partition function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.ObjectType">
            <summary>Returns ObjectType.PartitionFunction</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.OnRight">
            <summary>
            True if the boundary values belong to the interval on the right.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.Parameters">
            <summary>The parameters of the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.Values">
            <summary>
            The boundary values.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionFunctions">
            <summary>A collection of partition functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.GetKey(System.Object)">
            <summary>
            Generates a key for a partition function.
            </summary>
            <param name="value">The partition function for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunctions.Item(System.String)">
            <summary>The partition function with the specified fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunctions.Item(System.String,System.String)">
            <summary>
            The partition function with the specified name and schema.
            </summary>
            <param name="schema">The schema component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionScheme">
            <summary>A partition scheme.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionScheme.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the partition scheme with a specified partition scheme.</summary>
            <returns>
            	<em>True</em> if the partition schemes are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The partition scheme to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionScheme.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.FullyQualifiedName">
            <summary>The fully-qualified name of the partition scheme.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.Function">
            <summary>The partition function for the partition scheme.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.FileGroups">
            <summary>The filegroups that are used for partitioning.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.ExtendedProperties">
            <summary>The extended properties defined for the partition scheme.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionSchemes">
            <summary>A collection of partition schemes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.GetKey(System.Object)">
            <summary>
            Generates a key for a partition scheme.
            </summary>
            <param name="value">The partition scheme for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionSchemes.Item(System.String)">
            <summary>The partition scheme with the specified fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionSchemes.Item(System.String,System.String)">
            <summary>
            The partition scheme with the specified schema and name.
            </summary>
            <param name="schema">The schema component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionAction">
            <summary>The action that a permission allows.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.None">
            <summary>Used for error handling.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Alter">
            <summary>Alter.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Control">
            <summary>Control.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.ReceiveOrImpersonate">
            <summary>Receive in the case of objects; Impersonate in the case of users.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Send">
            <summary>Send.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.TakeOwnership">
            <summary>Take ownership.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.ViewDefinition">
            <summary>View definition.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.References">
            <summary>References.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Select">
            <summary>Select.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Insert">
            <summary>Insert .</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Delete">
            <summary>Delete.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Update">
            <summary>Update.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionAction.Execute">
            <summary>Execute.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionType">
            <summary>The type of permission.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.GrantWithGrant">
            <summary>Grant with grant option.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.Grant">
            <summary>Grant.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.Deny">
            <summary>Deny.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionType.Revoke">
            <summary>Revoke.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionClass">
            <summary>
            The class on which the permission exists.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Other">
            <summary>
            None, this is used for error handling.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Database">
            <summary>Database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.ObjectOrColumn">
            <summary>
            Object or column. Prior to SQL Server 2005, this is the only permission class
            used.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Schema">
            <summary>Schema.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.DatabasePrincipal">
            <summary>Database principal.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Assembly">
            <summary>Assembly.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Type">
            <summary>Type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.XmlSchemaCollection">
            <summary>XML schema collection.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.MessageType">
            <summary>Message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.ServiceContract">
            <summary>Service contract.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Service">
            <summary>Service.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.RemoteServiceBinding">
            <summary>Remote service binding.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Route">
            <summary>Route.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.FullTextCatalog">
            <summary>
            Full text catalog
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.SymmetricKey">
            <summary>Symmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.AsymmetricKey">
            <summary>Asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionClass.Certificate">
            <summary>Certificate.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Permission">
            <summary>A permission.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetPermissionClassPrefix(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Note that this does not work with roles. There are two kinds of roles, and application
            roles must further be prefixed with "APPLICATION ".
            </summary> 
            <param name="ot"></param>
            <returns>The prefix to identify the object type in a permission grant statement.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetRequiredPermissionAlterAction(RedGate.SQLCompare.Engine.PermissionType,RedGate.SQLCompare.Engine.PermissionType)">
            <summary>
            Given two permission settings in two databases this method returns the 
            action that is needed to synchronize. E.g. if the two settings are grant and deny, then the 
            action would be grant.
            </summary>
            <param name="permission"></param>
            <param name="targetPermission"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Fields">
            <summary>The fields to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Type">
            <summary>The type of permission.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.PermissionClass">
            <summary>The class of permission (for example, object, XML schema collection).</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Action">
            <summary>The action to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.UserName">
            <summary>The user or role to which the permission applies.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Permissions">
            <summary>A collection of permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.GetRolePermissionCount">
            <summary>
            Returns the number of non user permissions (role permissions).
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permissions.Item(System.Int32)">
            <summary>Returns a permission.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionsArray">
            <summary>
            Summary description for PermissionsArray.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionsCollection">
            <summary>
            Summary description for Permissions.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.Increment">
            <summary>
            Increments the CurrentValue by one
            </summary>
            <returns>If the CurrentPercentage has changed</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.Increment(System.Int32)">
            <summary>
            Increments the CurrentValue by the value specified
            </summary>
            <param name="value">The ammount to increment CurrentValue by.</param>
            <returns>If the CurrentPercentage has changed</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.LowerLimit">
            <summary>
            Sets and gets the lower limit of the range. (The default value is 0)
            </summary>
            <exception cref="T:System.ArgumentException">If the upper and lower limits are set to the same value</exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.UpperLimit">
            <summary>
            Sets and gets the upper limit of the range. (The default value is 100)
            </summary>
            <exception cref="T:System.ArgumentException">If the upper and lower limits are set to the same value</exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.CurrentValue">
            <summary>
            Gets and sets the current value within the specified range
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.CurrentPercentage">
            <summary>
            Gets the current percentage of the CurrentValue over the specified range
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.HasPercentageChanged">
            <summary>
            Returns back if the percentage has changed since the last time HasPercentageChanged been called.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.Message">
            <summary>
            Access to the status message.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Project">
            <summary>A SQL Compare project.</summary>
            <remarks>
            Use this class to load projects generated by SQL Compare, or to save projects for
            SQL Compare. Note that a project contains only connection information. It does not
            contain information about database schemas.
            </remarks>
            <example>
                This example shows how to save and load a project.
                <code lang="CS">
            Project project1=new Project();
             
            //by default DataSource1/DataSource2 are created as a LiveDatabaseSources with
            //the server name set to "(local)".
            project1.DataSource1.DatabaseName = "WidgetProduction";
            project1.DataSource2.DatabaseName = "WidgetStaging";
             
             
            //this project can now be opened up in SQL Compare
            project1.SaveToDisk(@"c:\A sample project.scp");
             
            //load the project from disk
            Project project2=Project.LoadFromDisk(@"c:\A sample project.scp");
             
            Console.WriteLine(project2.FileName);
                </code>
            	<code lang="vb">
            Dim project1 As New Project()
             
            'by default DataSource1/DataSource2 are created as a LiveDatabaseSources with
            'the server name set to "(local)".
            project1.DataSource1.DatabaseName = "WidgetProduction"
            project1.DataSource2.DatabaseName = "WidgetStaging"
             
            'this project can now be opened up in SQL Compare
            project1.SaveToDisk("c:\A sample project.scp")
             
            'load the project from disk
            Dim project2 As Project = Project.LoadFromDisk("c:\A sample project.scp")
             
            Console.WriteLine(project2.FileName)
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.Deserialize(System.Int32,RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Support for serialization.</summary>
            <returns><em>true</em> on success.</returns>
            <param name="versionId">The version of the project to be deserialized.</param>
            <param name="formatter">The formatter to read from.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.Serialize(RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Support for serialization.</summary>
            <param name="formatter">The formatter to write to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.LoadFromDisk(System.String)">
            <summary>Loads a project from disk.</summary>
            <returns>A Project object.</returns>
            <param name="fileName">The file name of the project.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.SaveToDisk(System.String)">
            <summary>
            Save the project to disk
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.CreateNew">
            <summary>Creates a new blank project.</summary>
            <returns>A new instance of class Project.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.ToString">
            <summary>Converts an instance of Project to a string.</summary>
            <returns>A string representation of the project details.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.DiscardClone">
            <summary>Discards the current clone.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.SynchronizeClone">
            <summary>
            Synchronizes the settings in the clone with the settings in the main
            object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.ChangeSynchronizationDirection">
            <summary>Changes the direction in which changes are to be migrated.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Project.DoClone(RedGate.SQLCompare.Engine.Project)">
            <summary>
            Clones the current Project
            </summary>
            <param name="project"></param>
            <returns>The cloned project</returns>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Version">
            <summary>The current project version. Used for serialization.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Source1AsLiveDB">
            <summary>
            A convenience method for accessing the first data source as a live database,
            rather than casting explicitly in code.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Source2AsLiveDB">
            <summary>
            A convenience method for accessing the second data source as a live database,
            rather than casting explicitly in code.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.SelectedFilters">
            <summary>Gets or sets SelectedFilters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Name">
            <summary>The file name of a project, or "New Project".</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.FileName">
            <summary>The file name of the project.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.IsNewProject">
            <summary>Determines whether the project is a new project.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Dirty">
            <summary><em>True</em> if the project has been modified.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.DataSource1">
            <summary>The connection properties for the first data source.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.DataSource2">
            <summary>The connection properties for the second data source.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.LastCompared">
            <summary>The time at which the project was last compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.ComparisonOptions">
            <summary>Options used when running a comparison or synchronization on the project.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Clone">
            <summary>Returns a clone of the current project.</summary>
            <remarks>Used for holding softstate inside the UI.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.HasClone">
            <summary>Returns <em>true</em> if the current project has been cloned.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.Direction">
            <summary>
            The direction in which changes are migrated when a synchronization is run on the
            project.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.UserNote">
            <summary>Gets or sets the user notes.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.ObjectSelectionUserActions">
            <summary>Gets or sets the ObjectSelectionUserActions.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Project.OwnerMappingUserActions">
            <summary>Gets or sets the OwnerMappingUserActions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ProjectComparer">
            <summary>
            ProjectComparer
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SynchronizationDirection">
            <summary>The direction of migration for synchronization.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SynchronizationDirection.From1To2">
            <summary>SQL scripts will migrate any changes in DataSource1 to DataSource2.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SynchronizationDirection.From2To1">
            <summary>SQL scripts will migrate any changes in DataSource2 to DataSource1.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Queue">
            <summary>A queue.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.pset_Name(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the queue with a specified queue.</summary>
            <returns><em>True</em> if the queues are identical; otherwise, <em>false</em>.</returns>
            <param name="targetObject">The queue to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean,RedGate.SQLCompare.Engine.Database)">
            <summary>Compares the queue with a specified queue.</summary>
            <returns><em>true</em> or <em>false.</em></returns>
            <exclude/>
            <param name="targetObject">The queue to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ObjectType">
            <summary>Returns ObjectType.Queue</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.MaxReaders">
            <summary>
            The maximum number of readers.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the queue.
            This is a SQL Server 2005 feature only.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExecuteAsOwner">
            <summary>
            True if the security context of the owner of the queue is to be used for the
            execution.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ActivationProcedure">
            <summary>
            The name of the activation stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ActivationEnabled">
            <summary>
            True if the activation is enabled.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ReceiveEnabled">
            <summary>True if the queue is <em>receive enabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.EnqueueEnabled">
            <summary>True if enqueue is enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.RetentionEnabled">
            <summary>
            True if retention is enabled.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.EventNotifications">
            <summary>
            The dependent event notifications.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.Services">
            <summary>
            The dependent services.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.FileGroup">
            <summary>
            The filegroup for the queue.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.IsSystemObject">
            <summary>
            Indicates whether the object in question is a system object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExtendedProperties">
            <summary>The extended properties defined for the queue.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Queues">
            <summary>A collection of queues.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.GetKey(System.Object)">
            <summary>
            Generates a key for a queue.
            </summary>
            <param name="value">The queue for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queues.Item(System.String)">
            <summary>Returns a queue given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queues.Item(System.String,System.String)">
            <summary>Returns a queue given its schema and name.</summary>
            <param name="schema">The schema component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Region">
            <summary>A region of text.</summary>
            <remarks>
                The script for a SQL object is returned as a collection of regions. For example,
                the SQL script for a table might contain regions for columns, constraints, indexes,
                foreign keys, and permissions. 
                <para>
                    Use <see cref="M:RedGate.SQLCompare.Engine.Region.ToString"/> to view the entire SQL script.
                </para>
            </remarks>
            <example>
                Viewing the SQL script to create a table.
                <code lang="CS">
            Database db=new Database();
             
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            Work work=new Work();
             
            //get the script for an object
            Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
             
            Console.WriteLine("Entire SQL script:\n{0}", regions.ToString());
             
            Console.WriteLine("By region:\n");
             
            foreach (Region region in regions)
            {
                Console.WriteLine("***{0}", region.Name);
                Console.WriteLine(region.SQL);
            }
             
            db.Dispose();
                </code>
            	<code lang="VB">
            Dim db As New Database()
             
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            Dim work As New Work()
             
            'get the script for an object
             
            Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
             
            Console.WriteLine("Entire SQL script:")
            Console.WriteLine("{0}", regions.ToString())
             
            Dim region As Region
             
            For Each region In regions
                Console.WriteLine("***{0}", region.Name)
                Console.WriteLine(region.SQL)
            Next
             
            'dispose
            db.Dispose()
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.ToString">
            <summary>The SQL code that a region contains.</summary>
            <returns>SQL code.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.SQL">
            <summary>The SQL code that a region contains.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.Name">
            <summary>The name of the region.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Regions">
            <summary>A collection of regions.</summary>
            <remarks>
                Use the <see cref="M:RedGate.SQLCompare.Engine.Regions.ToString">ToString()</see> method to return the text that the
                regions represent. 
                <para>
                    See <see cref="T:RedGate.SQLCompare.Engine.Region"/> for more information and code samples.
                </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.Add(RedGate.SQLCompare.Engine.Region)">
            <summary>Adds a region to the collection.</summary>
            <param name="value">The region to add to the collection.</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.ToString">
            <summary>The SQL script that a collection of regions contains.</summary>
            <returns>SQL script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Regions.Item(System.Int32)">
            <summary>Returns a region.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Role">
            <summary>A role.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the roles are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the role with a specified role.</summary>
            <param name="target">The role to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.ObjectType">
            <summary>Returns ObjectType.Role</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.AppRole">
            <summary>True if the role is an application role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.FullyQualifiedName">
            <summary>The fully-qualified name of the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.ExtendedProperties">
            <summary>The extended properties defined for the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.Members">
            <summary>The users in the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.DefaultSchema">
            <summary>
            The default schema for the application role. If the role is not an application
            role the value for the default schema is null.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.DatabaseLevelPermissions">
            <summary>Access to the role's database-level permissions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Roles">
            <summary>A collection of roles.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.GetKey(System.Object)">
            <summary>
            Generates a key for a role.
            </summary>
            <param name="value">The role for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Roles.Item(System.Int32)">
            <summary>Returns a role.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Roles.Item(System.String)">
            <summary>
            Returns a role given its name
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Route">
            <summary>A route.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the routes are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the route with a specified route.</summary>
            <param name="targetObject">The route to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.pset_Name(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.FullyQualifiedName">
            <summary>The fully-qualified name of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.RemoteServiceName">
            <summary>
            The name of the remote service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.BrokerInstance">
            <summary>
            The broker instance.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Address">
            <summary>The address of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.MirrorAddress">
            <summary>The mirror address of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Lifetime">
            <summary>
            The lifetime of the route.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.HasLifeTime">
            <summary>
            True if the route has a lifetime set.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.ExtendedProperties">
            <summary>The extended properties defined for the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.IsSystemObject">
            <summary>Indicates whether the route is a system object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Routes">
            <summary>A collection of routes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.GetKey(System.Object)">
            <summary>
            Generates a key for a route.
            </summary>
            <param name="value">The route for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Routes.Item(System.String)">
            <summary>Returns a route given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Rule">
            <summary>A rule.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the rule with a specified rule.</summary>
            <returns><em>True</em> if the rules are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The rule to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.ObjectType">
            <summary>Returns ObjectType.Rule</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.ExtendedProperties">
            <summary>The extended properties associated with the rule.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.Database">
            <summary>The database to which the rule belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.Owner">
            <summary>The owner of the rule.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.Name">
            <summary>The name of the rule.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.Text">
            <summary>The text of the rule.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.FullyQualifiedName">
            <summary>The fully-qualified name of the rule.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Rules">
            <summary>A collection of rules.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.get_UntypedItem(System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.GetKey(System.Object)">
            <summary>
            Generates a key for a rule.
            </summary>
            <param name="value">The rule for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rules.Item(System.Int32)">
            <summary>Returns a rule.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rules.Item(System.String)">
            <summary>
            Returns a rule given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rules.Item(System.String,System.String)">
            <summary>
            Returns a rule given an owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Schema">
            <summary>
            A schema.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.pset_Name(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the schemas are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the schema with a specified schema.</summary>
            <param name="target">The schema to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.ObjectType">
            <summary>Returns ObjectType.User</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.FullyQualifiedName">
            <summary>The name of the schema.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.ExtendedProperties">
            <summary>The extended properties defined for the schema.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.IsSystemObject">
            <summary>Indicates whether the schema is a system object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaBinding">
            <summary>
            Summary description for SchemaBinding.
            </summary>
            
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaBindings">
            <summary>
            Summary description for SchemaBindings.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindings.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindings.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindings.GetKey(System.Object)">
            <summary>
            Generates a key for a schema binding.
            </summary>
            <param name="value">The schema binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Schemas">
            <summary>A collection of schemas.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.GetKey(System.Object)">
            <summary>
            Generates a key for a schema.
            </summary>
            <param name="value">The schema for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schemas.Item(System.Int32)">
            <summary>Returns a schema.</summary>
            <param name="index">The zero-based index of the schema to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schemas.Item(System.String)">
            <summary>
            Returns a schema given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the schema to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Service">
            <summary>A service.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.pset_Name(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the services are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the service with a specified service.</summary>
            <param name="targetObject">The service to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.FullyQualifiedName">
            <summary>The fully-qualified name of the service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.ObjectType">
            <summary>Returns ObjectType.Service</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Queue">
            <summary>The queue that the service is on.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Contracts">
            <summary>The contracts that the service uses.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.EventNotifications">
            <summary>The event notifications that depend on the service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.IsSystemObject">
            <summary>Indicates whether the object is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.ExtendedProperties">
            <summary>The extended properties defined for the service.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ServiceBinding">
            <summary>A service binding.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBinding.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the service binding with a specified service binding.</summary>
            <returns>
            	<em>True</em> if the service bindings are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The service to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBinding.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.FullyQualifiedName">
            <summary>The fully-qualified name of the service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.ObjectType">
            <summary>Returns ObjectType.Service</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.RemoteService">
            <summary>
            The remote service.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.UserName">
            <summary>
            The user name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.Anonymous">
            <summary>True if anonymous authentication is to be used.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.ExtendedProperties">
            <summary>The extended properties defined for the service binding.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ServiceBindings">
            <summary>A collection of service bindings.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.GetKey(System.Object)">
            <summary>
            Generates a key for a service binding.
            </summary>
            <param name="value">The service binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBindings.Item(System.String)">
            <summary>Returns a service binding given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Services">
            <summary>A collection of services.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.GetKey(System.Object)">
            <summary>
            Generates a key for a service.
            </summary>
            <param name="value">The service for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Services.Item(System.String)">
            <summary>Returns a service given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the service to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareErrorHandler">
            <summary>
            Summary description for SqlCompareErrorHandler.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareErrorHandler.LogParserErrors(System.String,System.Exception)">
            <summary>
            SQL script parsing related errors.
            </summary>
            <param name="sql"></param>
            <param name="x"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareErrorHandler.LogAssemblyReaderErrors(System.String,System.Exception)">
            <summary>
            CLR assembly parsing related errors.
            </summary>
            <param name="assemblyName"></param>
            <param name="x"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping">
            <summary>
            Contains a mapping between the schema or owners in the different databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.#ctor(RedGate.SQLCompare.Engine.SqlCompareOwnerMapping)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">SchemaMapping to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.#ctor(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Contructor, calls the base constructor.
            </summary>
            <param name="obj1">The index in the first database.</param>
            <param name="obj2">The index in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.Obj1">
            <summary>
            Returns the schema or owner from the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping.Obj2">
            <summary>
            Returns the schema or owner from the second database.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings">
            <summary>
            Holds mappings for the schema or owners between the two databases. Uses the
            database objects to create the mappings for the views and the tables from the two
            databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_IsTrivialMapping">
            <summary>
            To keep track if the mapping has been modified (any split/join, even if the result is trivial)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_db1">
            <summary>
            The first database object.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_db2">
            <summary>
            The second database object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="ownerMappings"><see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CreateMappings(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates a mapping for each owner or schema in the database where such a mapping is possible.
            </summary>
            <param name="db1">The first database, or null.</param>
            <param name="db2">The second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.Schema)">
            <summary>
            Called to join two schemas together. For each schema, attempts to map the tables
            and views in the passed schema.
            </summary>
            <returns>The created mapping.</returns>
            <param name="schema1">The schema in database one.</param>
            <param name="schema2">The schema in database two.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.User)">
            <summary>
            Called to join two users tables together. For each user, attempts to map the
            tables and views belonging to the user.
            </summary>
            <returns>The created mapping.</returns>
            <param name="user1">The user in the first database.</param>
            <param name="user2">The user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.Role)">
            <summary>
            Called to join two roles tables together. For each role, attempts to map the
            tables and views belonging to the role.
            </summary>
            <returns>The created mapping.</returns>
            <param name="role1">The role in the first database.</param>
            <param name="role2">The role in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.User)">
            <summary>
            Called to join two users and schemas tables together. For each user, attempts to
            map the tables and views belonging to the user and schema.
            </summary>
            <returns>The created mapping.</returns>
            <param name="schema1">The schema in the first database.</param>
            <param name="user2">The user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.Role)">
            <summary>
            Called to join two roles and schemas tables together. For each role, attempts to
            map the tables and views belonging to the role and schema.
            </summary>
            <returns>The created mapping.</returns>
            <param name="schema1">The schema in the first database.</param>
            <param name="role2">The role in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.Schema)">
            <summary>
            Called to join two users and schemas tables together. For each user, attempts to
            map the tables and views belonging to the user and schema.
            </summary>
            <returns>The created mapping.</returns>
            <param name="user1">The user in the first database.</param>
            <param name="schema2">The schema in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.Role)">
            <summary>
            Called to join two users and roles tables together. For each user, attempts to
            map the tables and views belonging to the user and role.
            </summary>
            <returns>The created mapping.</returns>
            <param name="user1">The user in the first database.</param>
            <param name="role2">The role in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.User)">
            <summary>
            Called to join two users and roles tables together. For each user, attempts to
            map the tables and views belonging to the user and role.
            </summary>
            <returns>The created mapping.</returns>
            <param name="role1">The role in the first database.</param>
            <param name="user2">The user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.Schema)">
            <summary>
            Called to join two roles and schemas tables together. For each role, attempts to
            map the tables and views belonging to the role and schema.
            </summary>
            <returns>The created mapping.</returns>
            <param name="role1">The role in the first database.</param>
            <param name="schema2">The schema in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
                Called to join two schemas or users tables together. For each schema or user,
                attempts to map the tables and views in the specified schema or belonging to the
                specified user. Any tables mapped in the schema or belonging to the user will be
                <see cref="M:RedGate.SQLCompare.Engine.Mappings.Split(RedGate.SQLCompare.Engine.Mapping)"/>.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">SchemaMappings.Join must be called with Schema or Users arguments.</exception>
            <param name="obj1">The schema or user in the first database.</param>
            <param name="obj2">The schema or user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Split(RedGate.SQLCompare.Engine.Mapping)">
            <summary>
            Splits apart a mapping and creates two mappings, one to null and one from
            null.
            </summary>
            <param name="old1">The mapping to be split. Both obj1 and obj2 should be not null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Add(RedGate.SQLCompare.Engine.SqlCompareOwnerMapping)">
            <summary>
                Adds a <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping">SqlCompareOwnerMapping</see> to the end
                of the <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> collection.
            </summary>
            <returns>The SqlCompareOwnerMappings index at which the value has been added.</returns>
            <param name="mapping">
            The SqlCompareOwnerMappings to be added to the end of the SqlCompareOwnerMappings
            collection.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Remove(RedGate.SQLCompare.Engine.SqlCompareOwnerMapping)">
            <summary>
                Removes the first occurrence of a specific
                <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping">SqlCompareOwnerMapping</see> from the
                <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> collection.
            </summary>
            <param name="mapping">The SqlCompareOwnerMapping to remove from the SqlCompareOwnerMappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Contains(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>
                Determines whether the <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> collection
                contains a specific element.
            </summary>
            <returns>
            	<em>true</em> if the SqlCompareOwnerMappings collection contains the specified
            value; otherwise, <em>false</em>.
            </returns>
            <param name="mapping">
            The SqlCompareOwnerMapping to locate in the SqlCompareOwnerMappings
            collection.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.IndexOf(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>
                Searches for the specified
                <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping">SqlCompareOwnerMapping</see> and returns the
                zero-based index of the first occurrence within the
                <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> collection.
            </summary>
            <returns>
            The zero-based index of the first occurrence of the SqlCompareOwnerMapping within
            the SqlCompareOwnerMappings collection, if found; otherwise, -1.
            </returns>
            <param name="mapping">
            The SqlCompareOwnerMapping to locate in the SqlCompareOwnerMappings
            collection.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.OnValidate(System.Object)">
            <summary>
            Performs additionl custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> only supports <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> objects.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CopyTo(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings[],System.Int32)">
            <summary>
                Copies the entire <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> collection to a
                compatible one-dimensional array, starting at the specified index of the target
                array.
            </summary>
            <param name="tables">
            The one-dimensional array that is the destination of the elements copied from
            SqlCompareOwnerMappings. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying is to begin.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Insert(System.Int32,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>Not implemented.</summary>
            <exception cref="T:System.NotImplementedException">Throws <see cref="T:System.NotImplementedException"/> always</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.GetMappedSchemaName(System.String,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean)">
            <summary>
            Returns the mapped schema name for a particular schema.
            </summary>
            <param name="key"></param>
            <param name="mappings"></param>
            <param name="runOnTwo"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.IsTrivialMapping">
            <summary>
            Indicates whether a mapping is trivial or not. A trivial mapping is one that maps every owner
            to itself.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMapping"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlScriptsHelper">
            <summary>
            Summary description for SqlScriptsHelper.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlScriptsHelper.AddPlumbing(RedGate.SQL.Shared.IBlockWriter,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds rollback transaction on error statement to the block.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlSetOptions">
            <summary>SQL set options.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.#ctor">
            <summary>
            Constructs a SQLSetOptions class. This stores information about connection settings,
            such as ANSI warnings, ANSI NULLs, quoted identifiers, etc.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.SetOption(RedGate.SQL.Shared.IBlockWriter,System.String,System.Boolean)">
            <summary>
            Sets an option.
            </summary>
            <param name="block">The block writer in which the option setting should be scripted to.</param>
            <param name="setName">The name of the setting. This could be NSI_PADDING, ANSI_WARNINGS, 
            CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS, or NUMERIC_ROUNDABORT.</param>
            <param name="value">The value of the setting. This can be true or false.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.SetDefaultOptions(RedGate.SQL.Shared.IBlockWriter)">
            <summary>
            Sets the default options. This sets numeric roundabort to false, ANSI padding to true, ANSI warnings to true,
            concatenation yields NULL to true, arithmetic abort to true, quoted identifiers to true, and ANSI NULLs to
            true.
            </summary>
            <param name="block"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlTypeHelper">
            <summary>This helper class returns a string representation for the SQL base type.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlTypeHelper.GetSqlType(System.String)">
            <summary>
            Helper method to get the enumeration for base sql type string.
            </summary>
            <param name="typeName">The name of the base SQL type </param>
            <returns>SqlType enumeration entry.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StoredProcedure">
            <summary>A stored procedure.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedure.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the stored procedures are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the stored procedure with a specified stored procedure.</summary>
            <param name="target">The stored procedure to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedure.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ExtendedProperties">
            <summary>The extended properties defined for the stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ObjectType">
            <summary>Returns ObjectType.StoredProcedure</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Parameters">
            <summary>
            The parameters of the stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.SysobjectID">
            <summary>The sysobject identifier for the stored procedure.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Text">
            <summary>The text of the stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Encrypted">
            <summary>
            True if the stored procedure definition is encrypted.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.QuotedIdentifierOn">
            <summary>
            True if the stored procedure was created with <em>quoted identifiers
            on</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AnsiNullsOn">
            <summary>True if the stored procedure was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.CLRObject">
            <summary>
            True if the stored procedure is a CLR stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Assembly">
            <summary>
            The CLR assembly for the stored procedure, if it is a CLR stored
            procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the stored
            procedure. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyClass">
            <summary>
            The CLR assembly class name for the stored procedure, if it is a CLR stored
            procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyMethod">
            <summary>
            The CLR assembly method name for the stored procedure, if it is a CLR stored
            procedure.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StoredProcedures">
            <summary>A collection of stored procedures.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.GetKey(System.Object)">
            <summary>
            Generates a key for a stored procedure.
            </summary>
            <param name="value">The stored procedure for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedures.Item(System.Int32)">
            <summary>Returns a stored procedure.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedures.Item(System.String)">
            <summary>
            Returns a stored procedure given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedures.Item(System.String,System.String)">
            <summary>
            Returns a stored procedure given an owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StringWriter">
            <summary>
            Summary description for StringWriter.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKey">
            <summary>A symmetric key.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the symmetric keys are identical; otherwise,
            <em>false.</em>
            </returns>
            <summary>Compares the symmetric key with a specified symmetric key.</summary>
            <param name="targetObject">The symmetric key to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKey.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.FullyQualifiedName">
            <summary>The fully-qualified name of the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.ObjectType">
            <summary>Returns ObjectType.SymmetricKey</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.CreateDate">
            <summary>The date of creation for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.ModifyDate">
            <summary>The date of the last modification for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyGuid">
            <summary>The GUID for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyLength">
            <summary>The length of the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyAlgorithm">
            <summary>The symmetric key algorithm.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm">
            <summary>The symmetric key encryption algorithm.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.R2">
            <summary>R2 = RC2</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.R4">
            <summary>R4 = RC4</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.D">
            <summary>D = DES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.D3">
            <summary>D3 = Triple DES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.DX">
            <summary>DX = DESX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A1">
            <summary>A1 = AES 128</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A2">
            <summary>A2 = AES 192</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A3">
            <summary>A3 = AES 256</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKeys">
            <summary>A collection of symmetric keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.GetKey(System.Object)">
            <summary>
            Generates a key for a symmetric key.
            </summary>
            <param name="value">The symmetric key for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKeys.Item(System.String)">
            <summary>Returns a symmetric key given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Synonym">
            <summary>A synonym.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the synonyms are identical; otherwise <em>false.</em></returns>
            <summary>Compares the synonym with the specified synonym.</summary>
            <param name="targetObject">The synonym to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean,RedGate.SQLCompare.Engine.Database)">
            <returns><em>true</em> or <em>false.</em></returns>
            <exclude/>
            <param name="targetObject">The synonym to compare with.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.SysobjectID">
            <summary>The sysobject identifier for the synonym.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ReferencedName">
            <summary>The name that the synonym references.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ObjectType">
            <summary>Returns ObjectType.Synonym</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ExtendedProperties">
            <summary>The extended properties defined for the synonym.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Synonyms">
            <summary>A collection of synonyms.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.GetKey(System.Object)">
            <summary>
            Generates a key for a synonym.
            </summary>
            <param name="value">The synonym for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonyms.Item(System.String)">
            <summary>Returns a synonym given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonyms.Item(System.String,System.String)">
            <summary>
            Returns a synonym given an owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Table">
            <summary>A table.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ViewTableSuperClass">
            <summary>A view or table superclass.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Fields">
            <summary>Fields.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Indexes">
            <summary>Indexes.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_ExtendedProperties">
            <summary>Extended properties.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Triggers">
            <summary>Triggers.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_SchemaBoundFunctions">
            <summary>Schema bound functions.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_SchemaBoundViews">
            <summary>Schema bound views.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.SysobjectID">
            <summary>The sysobject identifier for the table or view.</summary>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Fields">
            <summary>The fields belonging to the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.ExtendedProperties">
            <summary>The extended properties defined for the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Indexes">
            <summary>The indexes defined on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Triggers">
            <summary>The triggers defined on the table or view.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the table with a specified table.</summary>
            <returns><em>True</em> if the tables are identical; otherwise <em>false.</em></returns>
            <param name="targetObject">The table to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean,RedGate.SQLCompare.Engine.Database)">
            <summary>Compares the table with a specified table.</summary>
            <returns><em>true</em> or <em>false.</em></returns>
            <param name="targetObject">The table to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ObjectType">
            <summary>Returns ObjectType.Table</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FileGroup">
            <summary>The filegroup on which the table is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.TextFileGroup">
            <summary>The filegroup on which the text in the table is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FullTextIndexed">
            <summary>True if the table is full-text indexed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FullTextCatalog">
            <summary>The full-text catalog defined for the table.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FullTextIndex">
            <summary>The full-text index for the table.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ForeignKeys">
            <summary>The table's foreign keys.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.CheckConstraints">
            <summary>The table's check constraints.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PartitionedField">
            <summary>
            Indicates the field over which the table is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.IsPartitioned">
            <summary>
            Indicates whether the table is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PartitionScheme">
            <summary>
            The partition scheme for this table. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Tables">
            <summary>A collection of tables.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.GetKey(System.Object)">
            <summary>
            Generates a key for a table.
            </summary>
            <param name="value">The table for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Tables.Item(System.Int32)">
            <summary>Returns a table.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Tables.Item(System.String,System.String)">
            <summary>
            Returns a table given an owner and name
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Tables.Item(System.String)">
            <summary>
            Returns a table given its fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TableWork">
            <summary>
            Summary description for TableWork.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TableWorks">
            <summary>
            Summary description for TableWorks.
            </summary>
        </member>
        <member name="T:RedGate.SQLToolkit.Engine.Licensing.ToolkitLicenceProvider">
            <summary>
            Summary description for ToolkitLicenceProvider.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Trigger">
            <summary>A trigger.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Trigger.Equals(RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the trigger with a specified trigger.</summary>
            <returns><em>True</em> if the triggers are identical; otherwise, <em>false</em>.</returns>
            <param name="targetTrigger">The trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ID">
            <summary>
             The identifier of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.QuotedIdentifierOn">
            <summary>True if the trigger was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AnsiNullsOn">
            <summary>True if the trigger was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.IsReplicationTrigger">
            <summary>
            True if the trigger is a replication trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Text">
            <summary>The text of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FullyQualifiedName">
            <summary>The fully-qualified name of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Update">
            <summary>True if the trigger is an <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Insert">
            <summary>True if the trigger is an <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Delete">
            <summary>True if the trigger is a <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.After">
            <summary>True if the trigger is an <em>after</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.InsteadOf">
            <summary>True if the trigger is an <em>instead of</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.CLRObject">
            <summary>
            True if the trigger is a CLR trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Assembly">
            <summary>The CLR assembly for the DML trigger, if it is a CLR DML trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the trigger.
            This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AssemblyClass">
            <summary>
            The CLR assembly class name for the DML trigger, if it is a CLR DML
            trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AssemblyMethod">
            <summary>
            The CLR assembly method name for the DML trigger, if it is a CLR DML
            trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstDeleteTrigger">
            <summary>True if the trigger is the first <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstInsertTrigger">
            <summary>True if the trigger is the first <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstUpdateTrigger">
            <summary>True if the trigger is the first <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastDeleteTrigger">
            <summary>True if the trigger is the last <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastInsertTrigger">
            <summary>True if the trigger is the last <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastUpdateTrigger">
            <summary>True if the trigger is the last <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Encrypted">
            <summary>
            True if the trigger definition is encrypted.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.IsDisabled">
            <summary>True if the trigger is <em>disabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Name">
            <summary>
            The name of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Owner">
            <summary>
            The owner or the schema of the trigger.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Database">
            <summary>The database to which the trigger belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ObjectType">
            <summary>Returns ObjectType.Trigger</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Triggers">
            <summary>A collection of triggers.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.GetKey(System.Object)">
            <summary>
            Generates a key for a trigger.
            </summary>
            <param name="value">The trigger for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.Int32)">
            <summary>Returns a trigger.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.String)">
            <summary>
            Returns a trigger given its fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.String,System.String)">
            <summary>
            Returns a trigger given its name and owner.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UDTBinding">
            <summary>
            Summary description for Binding.
            </summary>
            
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UDTBindings">
            <summary>
            Summary description for UDTBindings.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UDTBindings.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UDTBindings.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UDTBindings.GetKey(System.Object)">
            <summary>
            Generates a key for a UDT binding.
            </summary>
            <param name="value">The UDT binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserType">
            <summary>The type of user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.SqlUser">
            <summary>SQL Server user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.WindowsUser">
            <summary>Windows user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.CertificateUser">
            <summary>Certificate bound user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.AsymmetricKeyUser">
            <summary>Asymmetric key bound user.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.User">
            <summary>A user.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.User.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the users are identical; otherwise <em>false.</em></returns>
            <summary>Compares the user with a specified user.</summary>
            <param name="target">The user to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.User.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Database">
            <summary>The database to which the user belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ObjectType">
            <summary>Returns ObjectType.User</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ExtendedProperties">
            <summary>The extended properties defined for the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.FullyQualifiedName">
            <summary>The fully-qualified name of the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Name">
            <summary>The name of the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Owner">
            <summary>
            The owner of the user. This is undefined.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.LoginName">
            <summary>The login name of the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.UserType">
            <summary>
            The user type. This can be a certificate or asymmetric key bound user. In
            addition, in SQL Sever 2000 and earlier this can be a Windows user or a SQL user in SQL
            Server 2000.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.DefaultSchema">
            <summary>
            The default schema of SQL Server 2005 users.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.IsWindowsUser">
            <summary>True if the user is a Windows user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.IsSQLUser">
            <summary>True if the user is a SQL user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Permissions">
            <summary>The permissions on the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.AsymmetricKey">
            <summary>
            The name of the asymmetric key if the user is an asymmetric key bound user.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Certificate">
            <summary>
            The name of the certificate key if the user is an certificate key bound
            user.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.DatabaseLevelPermissions">
            <summary>Access to the user's database-level permissions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserActionItem">
            <summary>
            Contains the action and associated data
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserActionItem.#ctor(RedGate.SQLCompare.Engine.UserAction,System.Object)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="data"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserActionItem.Deserialize(System.Int32,RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>
            
            </summary>
            <param name="nVersionId"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserActionItem.Serialize(RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserActionItem.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserActionItem.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserActionItem.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserAction">
            <summary>
            An enum stating what action the user made
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.DeselectGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.SelectGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.MapOwners">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserAction.UnmapOwners">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.OwnerPairReference">
            <summary>
            An OwnerPairReference
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OwnerPairReference.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="one"></param>
            <param name="two"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OwnerPairReference.Owner1">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.OwnerPairReference.Owner2">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserDefinedType">
            <summary>A user-defined type.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedType.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the user-defined type with a specified user-defined type.</summary>
            <returns>
            	<em>True</em> if the user-defined types are identical; otherwise,
            <em>false.</em>
            </returns>
            <param name="target">The user-defined type to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedType.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ObjectType">
            <summary>Returns ObjectType.UserDefinedType</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ExtendedProperties">
            <summary>The extended properties defined for the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Rule">
            <summary>The rule bound to the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Default">
            <summary>The default bound to the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.BaseTypeName">
            <summary>The name of the underlying type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AllowNulls">
            <summary>True if the user-defined type allows nulls.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Length">
            <summary>The length of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Precision">
            <summary>The precision of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Scale">
            <summary>The scale of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.SqlType">
            <summary>The underlying type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.CLRObject">
            <summary>True if the user-defined type is a CLR user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Assembly">
            <summary>
            The CLR assembly for the user-defined type, if this is a CLR user-defined
            type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AssemblyClass">
            <summary>
            The CLR assembly class name for the user-defined type, if this is a CLR
            user-defined type.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserDefinedTypes">
            <summary>A collection of user-defined types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.GetKey(System.Object)">
            <summary>
            Generates a key for a UDT.
            </summary>
            <param name="value">The UDT for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Must be run after assemblies and tables are patched up.
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedTypes.Item(System.Int32)">
            <summary>Returns a user-defined type.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedTypes.Item(System.String)">
            <summary>
            Returns a user-defined type given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedTypes.Item(System.String,System.String)">
            <summary>
            Returns a user-defined type given an owner and a name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Users">
            <summary>A collection of users.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.GetKey(System.Object)">
            <summary>
            Generates a key for a user.
            </summary>
            <param name="value">The user for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Users.Item(System.Int32)">
            <summary>Returns a user.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Users.Item(System.String)">
            <summary>
            Returns a user given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Utils">
            <summary>A class providing utility functions.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.View">
            <summary>A view.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.View.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the views are identical; otherwise <em>false.</em></returns>
            <summary>Compares the view with a specified view.</summary>
            <param name="target">The view to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.View.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.ObjectType">
            <summary>Returns ObjectType.View</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.SchemaBound">
            <summary>True if the view is schema bound.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.QuotedIdentifierOn">
            <summary>True if the view was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.AnsiNullsOn">
            <summary>True if the view was created with <em>ansi nulls on.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.Text">
            <summary>The text of the view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.Encrypted">
            <summary>Identifies whether the view is encrypted.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Views">
            <summary>A collection of views.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.get_UntypedItem(System.String)">
            <summary>For internal use.</summary>
            <returns>For internal use.</returns>
            <param name="fullyQualifiedName">For internal use.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.GetKey(System.Object)">
            <summary>
            Generates a key for a view.
            </summary>
            <param name="value">The view for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Views.Item(System.Int32)">
            <summary>Returns a view.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Views.Item(System.String,System.String)">
            <summary>
            Returns a view given an owner and name.
            </summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Views.Item(System.String)">
            <summary>
            Returns a view given a fully-qualified name.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Work">
            <summary>Used to calculate the work to be done to synchronize databases.</summary>
            <remarks>
                The Work class is used to convert a set of <see cref="T:RedGate.SQLCompare.Engine.Differences"/> into an
                <see cref="P:RedGate.SQLCompare.Engine.Work.ExecutionBlock"/> containing SQL script, which can be used to
                synchronize two databases. It also provides <see cref="P:RedGate.SQLCompare.Engine.Work.Warnings"/> and
                <see cref="P:RedGate.SQLCompare.Engine.Work.Messages"/> about the work to be done. 
                <para>
            		<see cref="M:RedGate.SQLCompare.Engine.Work.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)"/> can be used to generate scripts for individual
                    database objects.
                </para>
            	<para>Note that you should not re-use a Work object; you should re-create a new
                object every time.</para>
            </remarks>
            <example>
                This example shows how to compare and synchronize two databases. 
                <code lang="CS">
            Database db1=new Database();
            Database db2=new Database();
             
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
             
            Differences differences=db1.CompareWith(db2, Options.Default);
             
            foreach (Difference difference in differences)
            {
                //make sure the difference is selected so it is included in the synchronization
                difference.Selected=true;
            }
             
            Work work=new Work();
             
            //calculate the work to do using sensible default options
            //the script is to be run on WidgetProduction so the runOnTwo parameter is true
            work.BuildFromDifferences(differences, Options.Default, true);
             
            //we can now access the messages and warnings
             
            Console.WriteLine("Messages:");
             
            foreach (Message message in work.Messages)
            {
                Console.WriteLine(message.Text);
            }
             
            Console.WriteLine("Warnings:");
             
            foreach (Message message in work.Warnings)
            {
                Console.WriteLine(message.Text);
            }
             
            //print out the SQL used to synchronize
             
            ExecutionBlock block=work.ExecutionBlock;
             
            Console.WriteLine("SQL to synchronize:");
             
            Console.WriteLine(block.GetString());
             
            //and run the SQL
             
            RedGate.SQL.Shared.BlockExecutor executor=new RedGate.SQL.Shared.BlockExecutor();
            executor.ExecuteBlock(block, ".", "WidgetProduction");
             
            //dispose of the objects
            block.Dispose();
            db1.Dispose();
            db2.Dispose();
                </code>
            	<code lang="VB">
            Dim db1 As Database = New Database()
            Dim db2 As Database = New Database()
             
             
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
             
            Dim differences As Differences = db1.CompareWith(db2, Options.Default)
             
            Dim difference As Difference
             
            For Each difference In differences
                'make sure the difference is selected so it is included in the synchronization
                difference.Selected = True
            Next
             
            Dim work As Work = New Work()
             
            'calculate the work to do using sensible default options
            'the script is to be run on WidgetProduction so the runOnTwo parameter is true
             
            work.BuildFromDifferences(differences, Options.Default, True)
             
            'we can now access the messages and warnings
             
            Console.WriteLine("Messages:")
             
            Dim message As Message
             
            For Each message In work.Messages
                Console.WriteLine(message.Text)
            Next
             
            Console.WriteLine("Warnings:")
             
            For Each message In work.Warnings
                Console.WriteLine(message.Text)
            Next
             
             
            'print out the SQL used to synchronize
             
            Dim block As ExecutionBlock = work.ExecutionBlock
             
            Console.WriteLine("SQL to synchronize:")
             
            Console.WriteLine(block.GetString())
             
            'and run the SQL
             
            Dim executor As BlockExecutor = New BlockExecutor
             
            executor.ExecuteBlock(block, ".", "WidgetProduction")
             
            'dispose of the objects
            block.Dispose()
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddPrintStatement(RedGate.SQL.Shared.IBlockWriter,RedGate.SQLCompare.Engine.Options,System.String)">
            <summary>
            Add PRINT statement with plumbing!. 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="message"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWork(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This calculates the work that needs to be done during a synchronization.
            </summary>
            <param name="differences"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForDBSysObjects(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Sets the dependency for objects whose dependency is stored in the main dependency
            matrix. These are mainly objects that are sysobjects identifyables.
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetTypeDependencyForTablesAndFunctions(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that all the user defined types that tables, functions, sprocs reference are included.
            This must be done after functions and tables are selected as dependencies.
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyToUDTs(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that tables are marked as depending on CLR UDTs
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForUDTs(RedGate.SQLCompare.Engine.Differences,System.Boolean,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Make sure that all user defined types of assemblies that are selected as dependencies are also
            selected as dependencies.
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForMessageTypes(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all xml schemacollections are marked as dependents for message types!
            Note, that this must be called before the message types are selected for dependencies!
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForPartitionSchemes(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all Partition Functions are marked as dependents for partition schemes, and
            then all partition schemes are marked as dependents for partition 
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForPartitionFunctions(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that all tables are marked as dependents for partition functions (through the schemes)!
            This must be run after all the partition functions are selected as dependencies.
            </summary>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForToAssemblies(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all assemblies are marked as dependents for CLR UDTs, storedProcedures, ....!
            Note, that this must be called after UDTs are selected for dependencies!
            </summary>
            <param name="differences"></param>
            <returns>True, if an assembly has been added as a new dependency.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForContracts(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all message types are marked as dependents for contracts!
            Note, that this must be called after the contracts are selected for dependencies! 
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForQueues(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all stored procedures are marked as dependents for queues!
            Note, that this must be called after queues are selected for dependencies! :(
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForServices(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all contracts and queues are marked as dependents for services!
            Note, that this must be called after services are selected for dependencies! 
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForEventNotifications(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that the relevant service and queue are marked as dependents for event notifications.
            Note, that this must be called after event notifications are selected for dependencies!
            </summary>
            <param name="differences"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWorkSetDependencyForUsers(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Sets user dependencies.
            This should be at the end, after other dependencies have been selected.
            </summary>
            <param name="differences"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
            <param name="sourceDatabase"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateDifference(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Fills the action queues to make the target database the same as the master.
            </summary>
            <param name="differences"></param>
            <param name="difference"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateDifference(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean)">
            <summary>
            Fills the action queues to make the target database the same as the master.
            </summary>
            <param name="differences"></param>
            <param name="difference"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
            <param name="forceRebuildCheck"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWork(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is used only when nodependencies are selected!
            </summary>
            <param name="partitionFunction"></param>
            <param name="targetPartitionFunction"></param>
            <param name="differences"></param>
            <param name="options"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateWork(RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This should only be used if dependencies are not followed! If dependencies are included, then
            the only way we modify partitions schemes is through the partition functions.
            </summary>
            <param name="partitionScheme"></param>
            <param name="targetPartitionScheme"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.DropSchemaBindings(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.Options)">
            <summary>
            for a specific table it adds the dependent schema bound functions and views
            to the SchemaBindingsToUnbind queue
            </summary>
            <param name="targetTableOrView"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.DropSchemaBindings(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.Options)">
            <summary>
            For a specific function it adds the dependent schema bound functions
            to the SchemaBindingsToUnbind queue
            </summary>
            <param name="functionBase"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.PrepareTableForDrop(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Table is marked for drop, DropSchemaBindings, FullTextDrops, FiledsForDrop
            </summary>
            <param name="table"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddTriggersConstraintsAndIndexes(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds triggers and indexes to the queues in case of a table create or a table rebuild.
            </summary>
            <param name="table"></param>
            <param name="targetDatabase"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.PrepareMessageTypeForDropOrRebuild(RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds a message type to the drop queue, and if needed it adds all its dependants as well.
            </summary>
            <param name="messageType"></param>
            <param name="options"></param>
            <param name="targetMessageType"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.PrepareAssemblyForDropOrRebuild(RedGate.SQLCompare.Engine.ClrAssembly,RedGate.SQLCompare.Engine.ClrAssembly,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Adds an assembly to the drop queue, and if needed it adds all its dependants as well.
            </summary>
            <param name="assembly">Can be null if not rebuilding!</param>
            <param name="targetAssembly"></param>
            <param name="options"></param>
            <param name="rebuild"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CalculateNecessaryWorkForRebuild(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options)">
            <summary>
            for table rebuilds
            </summary>
            <param name="table"></param>
            <param name="targetTable"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependencies(System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency.
            </summary>
            <param name="idsToAdd"></param>
            <param name="lookup"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependentViews(System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency. This considers
            views only!
            </summary>
            <param name="idsToAdd"></param>
            <param name="lookup"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AddDependentViewsForRefresh(System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency. This considers
            views and synonyms only!
            </summary>
            <param name="idsToAdd"></param>
            <param name="lookup"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GetIdFromObject(System.Object)">
            <summary>
            The sysobject identifyer of the object, or 0 of it is not sysobject identifyable.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>Build the work object from a set of differences.</summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.ProcessDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the first stage of the main work, in which the necessary work is determined.
            This can only be used internally!
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SetImplicitlySelectedDifferences(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            For internal use only.
            </summary>
            <param name="differences">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SetDifferenceImpliciteness(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.SerializableCollection)">
            <summary>
            Marks differnces to the selectedDiffs hashtable if an object in collection is part of the difference.
            The difference is marked with "true" if it has been explicitly selected, and with false, if the selection
            is implicit.
            </summary>
            <param name="differences"></param>
            <param name="collection"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Builds the work object from an individual difference. It sets the m_ExecutionBlock 
            global variable to include the script for synchronization.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GenerateSql(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the second stage of the main work, in which the SQL is generated for the synchronization.
            This can only be used internally.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCheckConstraintsAndForeignKeysCreate(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Prereqisite: CreateIndexes
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="masterDatabase"></param>
            <param name="targetDatabase"></param>
            <param name="differences"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextCatalogCreateAndActivateAndSetIndexing(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Fulltext: create catalogs, adding full text indexing to tables, columns, and activating it.
            Note that for Yukon this is still NOT transactional (as oposed to its documentation!)
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.SanitizeQueues(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Sanitizes queues, removes duplicate entries that need to be rebuild and modified.
            </summary>
            <param name="options"></param>
            <param name="database"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildTablesUnbindFromClrUdtsAndPartitionSchemes(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinds tables from CLR UDTs and from partition schemes that need to be reworked.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.RebuildSql2(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This unbinds CLR types from tables by using the ToString Method. This is only used 
            when the # option is enabled.
            </summary>
            <param name="block"></param>
            <param name="table"></param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildExtendedPropertiesAltersCreates(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This clearly must be run after all the extended property supporting objects are created/alterer(rebuilt).
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCoreObjectsRebuilds(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Database,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean)">
            <summary>
            Creates and alters tables, views, stored procedures, synonyms and functions in the order of
            their dependencies.
            Prerequisites: BuildUdtsRebind
            
            </summary>
            <param name="options"></param>
            <param name="onlyDifferenceToInclude"></param>
            <param name="database"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="ownerMappings"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.DoCoreObjectsCreateAlterRebuilds(RedGate.SQLCompare.Engine.WorkItems,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,System.Collections.Specialized.HybridDictionary,System.Collections.Specialized.HybridDictionary,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean)">
            <summary>
            Does the core object creates/rebuilds.
            </summary>
            <param name="bigList"></param>
            <param name="block"></param>
            <param name="options"></param>
            <param name="temporaryDefaultBindings"></param>
            <param name="indexArrays"></param>
            <param name="progressTracker"></param>
            <param name="ownerMappings">The owner mappings. Note that if the mappings is null, no mapping is done.
            This is primarily used in case of the rebuilds, in which case no mapping is required!</param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCoreObjectsCreatesAndAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Database,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean)">
            <summary>
            Creates and alters tables, views, stored procedures, synonyms and functions in the order of
            their dependencies.
            Prerequisites: BuildUdtsRebind
            
            </summary>
            <param name="options"></param>
            <param name="onlyDifferenceToInclude"></param>
            <param name="database"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
            <param name="ownerMappings"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCoreObjectsDrops(RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Database,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This drops views, tables, stored procedures and functions in a dependecny created order.
            
            Before we can drop or alter tables we need to remove schema bindings from any bound objects
            </summary>
            <param name="onlyDifferenceToInclude"></param>
            <param name="targetDatabase"></param>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildComputedColumnsDrops(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops computed columns
            
            Before we can alter any functions, we need to drop
            any computed columns that reference the functions
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildBindablesUnbinds(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinds defaults and rules from columns and types.
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildIndexesDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops indexes.
            First clustered nonclustered indexes, then clustered ones.
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildIndexesXmlDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops xml indexes.
            These must be dropped before primary keys are dropped.
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCheckConstraintsAndKeysDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops check constraints, primary keys and unique indexes
            
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildForeignKeysDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQL.Shared.ExecutionBlock)">
            <summary>
            Drops foreign keys
            Prerequisites:
            Must be done before primary keys are dropped!
            </summary>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="block"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildExtendedPropertiesDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops extended properties.
            Prerequisites: 
            These must bu dropped before tables, procedures, ... are dropped! 
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drop fulltext catalogs
            Prerequisite: DropFulltextFromTablesAndColumns
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters fulltext catalogs
            Prerequisite: create users, Note the this IS transactional!
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFulltextDropFromTablesAndColumns(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drop full text information from columns, fulltext from tables
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildTriggersCreate(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Prerequisite: trigger alter (reason trigger order conflicts otherwise).
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPermissionsRestore(RedGate.SQLCompare.Engine.Options,RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Restores the permissions of objects that were rebuilt
            </summary>
            <param name="options"></param>
            <param name="block"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUdtsRebind(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            If we have modified user defined types then we need
            to make sure that table columns which we have unbound from them are correct again.		
            Note that we also need to re-add the ROWGUIDCOL property if appropriate.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="database"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDefaultsCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Note: set quoted identifiers off for the creation of defaults
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="masterDatabase"></param>
            <param name="ownerMappings"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRolesAlterMembership(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This adds and removes role members.
            Note that sp_addrolemember is not transactional, even in SQL Server 2005. This makes sense, of course ;)
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRolesAlterAuthorization(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            This alters the roles owner. This is transactional in 2005, and makes no sense in 2k.
            This also alters the default schema for application roles.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemaBindingsUnbind(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinds schemabindings.
            Prerequisite:
            Note: This must be done before we can drop or alter tables!
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="database"></param>
            <param name="targetDatabase"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUdtsUnbind(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Unbinding user defined data types.
             
            We might need to drop user defined types later on, for later modification.
            Before we can do this, we need to unbind them from any tables	
            
            Note that columns cannot be altered if ROWGUIDCOLs are bound to them																																										  */
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUsersDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops users.
            Prerequisite: ?
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUsersCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates users.
            Prerequisites: -
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildUsersAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters users' default schemata.
            Prerequisites: -
            Note that this is Yukon dependent!
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemasCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates schemas.
            Prerequisites: users (needed for authorization)
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemasAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters schemas.
            Prerequisites: users (needed for authorization)
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSchemasDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops schemas.
            Prerequisite: users
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSynonymsDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the synonyms. This should be run before synonyms are added, since there are no alter synonyms, 
            thus alters are replaced with drop creates. Note: target must be Yukon!
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildXmlSchemaCollectionsDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops xml schema collections.
            Prerequisites: drop message types, table unbind, procs, functions drop/rebuild initiated, 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="targetDatabase"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildXmlSchemaCollectionsCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates xml schema collections. 
            Prerequisites: users create/alter
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildXmlSchemaCollectionsAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters xml schema collections. 
            Note that this alter only includes adding xml schemata to collections (this is what 
            T-SQL permits).
            Prerequisites: message types dropped/rebuild initiated.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildClrAssembliesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops clr assembly 
            Prerequisites: clr types are unbound/dropped
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildClrAssembliesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates clr assemblies. 
            Prerequisites: assemblies drop.
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildClrAssembliesAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates clr assemblies. 
            Prerequisites: Dependent tables, procs, functions, ddlTriggers, triggers, drop/unbind
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildMessageTypesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the message types.
            Prerequisites: create xmlSchemaCollections 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildMessageTypesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the message types. This should be run before message types are added. 
            Prerequisites: BuildContractsDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCertificatesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the certificates.
            Prerequisites: - 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildCertificatesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the certificates. This should be run before certificates are added. 
            Prerequisites: users drop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSymmetricKeysCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the symmetric keys.
            Prerequisites: - 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildSymmetricKeysDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the symmetric keys. This should be run before symmetric keys are added. 
            Prerequisites: users drop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildAsymmetricKeysCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the asymmetric keys.
            Prerequisites: - 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildAsymmetricKeysDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the asymmetric keys. This should be run before asymmetric keys are added. 
            Prerequisites: users drop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDdlTriggersCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates ddl triggers.
            Prerequisites: version, assemblies, UDTs, drop ddl triggers 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDdlTriggersDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the ddl triggers. 
            Prerequisites: version
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDdlTriggersAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters ddl triggers.
            Prerequisites: version, assemblies, UDTs, drop ddl triggers 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildDisableDdlTriggers(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Disables ddl triggers.
            Prerequisites: version
            Note that it should be transactional
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildReenableDdlTriggers(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Reenables ddl triggers.
            Prerequisites: version
            Note that it should be transactional
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="masterDatabase"></param>
            <param name="targetDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildContractsCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the contracts.
            Prerequisites: create xmlSchemaCollections, BuildMessageTypesCreate 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildContractsDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the contracts. This should be run before contracts are added. 
            Prerequisites: BuildContractsCreate, BuildServicesDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildContractsAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters contracts. Note that this is only authorization change.
            Prerequisites: BuildServicesDrop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildQueuesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates the queues.
            Prerequisites: ...
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="ownerMappings"></param>
            <param name="runOnTwo"></param>
            <param name="masterDatabase"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildQueuesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the queues. 
            Prerequisites: BuildServicesDrop, BuildEventNotificationsDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildQueuesAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,System.Boolean)">
            <summary>
            Alter the queues. Queues created.
            Prerequisites: BuildServicesDrop 
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="ownerMappings"></param>
            <param name="runOnTwo"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServicesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the services.
            Prerequisites: BuildContractsCreate, BuildQueuesCreate
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServicesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the Services. 
            Prerequisites: RoutesDrop, EventNotificationsDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServicesAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters the Services. 
            Prerequisites: Contracts alter/create, queues alter/create
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServiceBindingsCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the service bindings.
            Prerequisites: 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServiceBindingsDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the ServiceBindings.
            Prerequisites: 
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildServiceBindingsAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters the ServiceBindings. 
            Prerequisites: users should be created
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildEventNotificationsCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates the event notifications.
            Prerequisites: create xmlSchemaCollections , assembly, service, contract, message type, xmlSchemaCollection
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildEventNotificationsDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops the event notifications. This should be run before event notifications are added. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRoutesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates routes.
            Prerequisites: advised? : create xmlSchemaCollections , assembly, service, contract, message type, xmlSchemaCollection
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRoutesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops routes. This should be run before event routes are added. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildRoutesAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters routes. This should be run before event routes are added. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionFunctionsCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Creates partition functions. 
            Prerequisites: -
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionFunctionsDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Drops partition functions.  
            Prerequisites: BuildPartitionSchemesDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionFunctionsAlter(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker)">
            <summary>
            Alters partition functions. This should be run before partition functions are added. 
            Prerequisites: partition schema drops, partition schema alters?
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionSchemesCreate(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,System.Boolean)">
            <summary>
            Creates partition schemes. 
            Prerequisites: PartitionFunctions
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="singleDiff"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildPartitionSchemesDrop(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ProgressTracker,System.Boolean)">
            <summary>
            Drops partition schemes.  
            Prerequisites: BuildPartitionSchemesDrop
            
            </summary>
            <param name="block"></param>
            <param name="options"></param>
            <param name="progressTracker"></param>
            <param name="singleDiff">It is a single difference</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Returns the script necessary to create a SQL object.</summary>
            <remarks>
            This creates SQL code used to create an object such as a table, view, or stored
            procedure.
            </remarks>
            <example>
            	<code lang="CS">
            Database db=new Database();
             
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            Work work=new Work();
             
            //get the script for an object
            Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
             
            Console.WriteLine("SQL script:\n{0}", regions.ToString());
             
            db.Dispose();
                </code>
            	<code lang="VB">
            Dim db As New Database()
             
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            Dim work As New Work()
             
            'get the script for an object
             
            Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
             
            Console.WriteLine("SQL script:")
            Console.WriteLine("{0}", regions.ToString())
             
            'dispose
            db.Dispose()
                </code>
            </example>
            <returns>A <see cref="T:RedGate.SQLCompare.Engine.Regions">Regions</see> collection containing batches of SQL script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.AlterSQL(RedGate.SQL.Shared.ExecutionBlock,RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            
            </summary>
            <param name="block"></param>
            <param name="trigger"></param>
            <param name="options"></param>
            <param name="stage1">indicates whether we are doing blankin trigger order, or the second
            stage, i.e. setting first and lasts.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.OnStatus(RedGate.SQL.Shared.StatusEventArgs)">
            <summary>
            Fires the Status event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GetNonPrimaryFileGroupsFromTables(System.Boolean)">
            <summary>
            Retruns a string that contains the non-primary filegroup names from the tables that are 
            in the table queues (rebuild and create). 
            </summary>
            <param name="caseSensitive">case sensitiveness</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.GetNonPrimaryFileGroupsFromYukonObjects(System.Boolean)">
            <summary>
            Retruns a string that contains the non-primary filegroup names from the queues and partition schemes.
            </summary>
            <param name="caseSensitive">case sensitiveness</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.EstimateTotalWorkEntryCount(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Estimates the number of operations that will be done during a work. This includes the
            sums of the que contents.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.ExecutionBlock">
            <summary>A block of SQL batches containing SQL script for synchronization.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.CanRollBackOnFailure">
            <summary>True if the transaction can be completely rolled back on failure.</summary>
            <remarks>
            Some synchronization commands, such as full-text operations, cannot be included
            within transactions. If a script fails, these operations cannot be rolled back.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Messages">
            <summary>Informational messages about the work to be done.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Warnings">
            <summary>Warnings about the work to be done.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Work.Status">
            <summary>The event handler for status events.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WorkType.Refresh">
            <summary>Refresh (sp_refresh for views).</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkItem">
            <summary>
            Summary description for WorkItem.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkItems">
            <summary>
            Summary description for WorkItems.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkResult">
            <summary>
            This class encapsulates the parts that constitute the result of the Work class.
            This includes the execution bloc, and the relevant messages and warnings.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.WorkResult.#ctor">
            <summary>
            Constructs a work result.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.ExecutionBlock">
            <summary>
            Access to the execution block (scripts for synchronization).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.Messages">
            <summary>
            Access to Messages.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.Warnings">
            <summary>
            Access to the warning messages.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlSchemaCollection">
            <summary>An XML schema collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            	<em>True</em> if the schema collections are identical; otherwise
            <em>false.</em>
            </returns>
            <summary>Compares the schema collection with a specified schema collection.</summary>
            <param name="targetObject">The schema collection to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.GetIncrementalSchemaDifferences(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Returns the extra schemata that are not in the target schema collection.
            If the operation is not defined, i.e. the target schema is not a subset
            of the source schema collection, then null is returned (not exception, this is faster :).
            </summary>
            <param name="targetObject">The schema collection to compare with</param>
            <param name="options">Comparison options</param>
            <returns>true or false</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Scripts the object.
            </summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.ObjectType">
            <summary>Returns ObjectType.XmlSchemaCollection</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.Contents">
            <summary>
            The raw schema data.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.MessageTypes">
            <summary>
            The dependent message types.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.ExtendedProperties">
            <summary>The extended properties defined for the stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentFields">
            <summary>
            The dependent database columns.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentStoredProcedures">
            <summary>
            The dependent stored procedures.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentFunctions">
            <summary>
            The dependent functions.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlSchemaCollections">
            <summary>A collection of XML schema collections.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.SerializeItem(System.Object,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.GetKey(System.Object)">
            <summary>
            Generates a key for an XML schema collection.
            </summary>
            <param name="value">The XML schema collection for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.get_UntypedItem(System.String)">
            <summary>For internal use only.</summary>
            <returns>For internal use only.</returns>
            <param name="fullyQualifiedName">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Must be run before table patch up!
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollections.Item(System.String)">
            <summary>Returns an XML schema collection given a fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollections.Item(System.String,System.String)">
            <summary>Returns an XML schema collection given its schema and name.</summary>
            <param name="schema">The schema component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
    </members>
</doc>
