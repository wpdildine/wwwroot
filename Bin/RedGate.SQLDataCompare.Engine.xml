<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.SQLDataCompare.Engine</name>
    </assembly>
    <members>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_1xCompat_CP850_CI_AS">
            <summary>
            Summary description for SQL_1Xcompat_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.SqlCollationComparer">
            <summary>
            Use SqlCollationComparer.GetComparer to return a SqlCollationComparer
            which will compare strings in the same way as SQL Server does for its 
            Sql Server version 7 compatable collations.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.SqlCollationComparer.GetComparer(System.String)">
            <summary>
            This method return a SqlCollationComparer that will 
            compare strings in the same way as a SQL Sever version 7
            collation. 
            </summary>
            <param name="collationName">The name of the collation in lower case</param>
            <returns>SqlCollationComparer that will compare in the same way
            as the collation, or null if collation not supported</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.SqlCollationComparer.Compare(System.Object,System.Object)">
            <summary>
            This method compares two strings using the same method.
            DO NOT pass in anything other than a string or you will 
            get an invalid cast exception. It is better to use the 
            public int Compare(string x, string y) method of this class.
            This is purly here as it is convenent.
            </summary>
            <param name="x">First string to compare</param>
            <param name="y">The second string to compare</param>
            <returns> -1 if x less than y. 0 if x equals y
            1 if x is greater than y </returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.SqlCollationComparer.Compare(System.String,System.String)">
            <summary>
            This method compares two strings using the same method
            as IComparer but with string arguments to avoid a cast.
            </summary>
            <param name="x">First string to compare</param>
            <param name="y">The second string to compare</param>
            <returns> -1 if x less than y. 0 if x equals y
            1 if x is greater than y </returns>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_AltDiction_CP1253_CS_AS">
            <summary>
            Summary description for SQL_AltDiction_CP1253_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_AltDiction_CP850_CI_AI">
            <summary>
            Summary description for SQL_AltDiction_CP850_CI_AI.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_AltDiction_CP850_CI_AS">
            <summary>
            Summary description for SQL_AltDiction_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_AltDiction_CP850_CS_AS">
            <summary>
            Summary description for SQL_AltDiction_CP850_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_AltDiction_Pref_CP850_CI_AS">
            <summary>
            Summary description for SQL_AltDiction_Pref_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_AltDiction2_CP1253_CS_AS">
            <summary>
            Summary description for SQL_AltDiction2_CP1253_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Croatian_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Croatian_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Croatian_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Croatian_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Czech_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Czech_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Czech_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Czech_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Danish_Pref_CP1_CI_AS">
            <summary>
            Summary description for SQL_Danish_Pref_CP1_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC037_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC037_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC273_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC273_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC277_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC277_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC278_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC278_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC280_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC280_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC284_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC284_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC285_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC285_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_EBCDIC297_CP1_CS_AS">
            <summary>
            Summary description for SQL_EBCDIC297_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Estonian_CP1257_CI_AS">
            <summary>
            Summary description for SQL_Estonian_CP1257_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Estonian_CP1257_CS_AS">
            <summary>
            Summary description for SQL_Estonian_CP1257_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Hungarian_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Hungarian_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Hungarian_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Hungarian_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Icelandic_Pref_CP1_CI_AS">
            <summary>
            Summary description for SQL_Icelandic_Pref_CP1_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1_CI_AI">
            <summary>
            Summary description for SQL_Latin1_General_CP1_CI_AI.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1251_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1251_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1251_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1251_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1253_CI_AI">
            <summary>
            Summary description for SQL_Latin1_General_CP1253_CI_AI.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1253_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1253_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1253_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1253_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1254_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1254_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1254_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1254_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1255_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1255_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1255_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1255_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1256_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1256_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1256_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1256_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1257_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1257_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP1257_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP1257_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP437_CI_AI">
            <summary>
            Summary description for SQL_Latin1_General_CP437_CI_AI.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP437_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP437_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP437_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP437_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP850_CI_AI">
            <summary>
            Summary description for SQL_Latin1_General_CP850_CI_AI.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP850_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_CP850_CS_AS">
            <summary>
            Summary description for SQL_Latin1_General_CP850_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_Pref_CP1_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_Pref_CP1_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_Pref_CP437_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_Pref_CP437_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latin1_General_Pref_CP850_CI_AS">
            <summary>
            Summary description for SQL_Latin1_General_Pref_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latvian_CP1257_CI_AS">
            <summary>
            Summary description for SQL_Latvian_CP1257_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Latvian_CP1257_CS_AS">
            <summary>
            Summary description for SQL_Latvian_CP1257_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Lithuanian_CP1257_CI_AS">
            <summary>
            Summary description for SQL_Lithuanian_CP1257_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Lithuanian_CP1257_CS_AS">
            <summary>
            Summary description for SQL_Lithuanian_CP1257_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_MixDiction_CP1253_CS_AS">
            <summary>
            Summary description for SQL_MixDiction_CP1253_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Polish_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Polish_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Polish_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Polish_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Romanian_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Romanian_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Romanian_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Romanian_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Scandinavian_CP850_CI_AS">
            <summary>
            Summary description for SQL_Scandinavian_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Scandinavian_CP850_CS_AS">
            <summary>
            Summary description for SQL_Scandinavian_CP850_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Scandinavian_Pref_CP850_CI_AS">
            <summary>
            Summary description for SQL_Scandinavian_Pref_CP850_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Slovak_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Slovak_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Slovak_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Slovak_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Slovenian_CP1250_CI_AS">
            <summary>
            Summary description for SQL_Slovenian_CP1250_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Slovenian_CP1250_CS_AS">
            <summary>
            Summary description for SQL_Slovenian_CP1250_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_SwedishPhone_Pref_CP1_CI_AS">
            <summary>
            Summary description for SQL_SwedishPhone_Pref_CP1_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_SwedishStd_Pref_CP1_CI_AS">
            <summary>
            Summary description for SQL_SwedishStd_Pref_CP1_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Ukrainian_CP1251_CI_AS">
            <summary>
            Summary description for SQL_Ukrainian_CP1251_CI_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.CollationData.SQL_Ukrainian_CP1251_CS_AS">
            <summary>
            Summary description for SQL_Ukrainian_CP1251_CS_AS.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.Bin2CollationComparer">
            <summary>
            This class is used to compare two strings in the same way used
            for a bin2 collation in sql server. 
            </summary>
            <remarks>
            There is one major bug with this code and that is that 
            sql server can map several character the same from Sql Server 
            to the same character in .net string. This means that
            there is no way of getting the original characters that came Sql 
            Server so it is impossible to emulate SqlServer completely.
            If you are trying to understand the code make sure you read 
            http://blogs.msdn.com/michkap/search.aspx?q=bin2&amp;p=1
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.Bin2CollationComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new instance of Bin2CollationComparer to compare
            string in the same way as a bin2 collation
            </summary>
            <param name="LCID">The Locale ID of the Collation.</param>
            <param name="unicode">Set to true if the strings came from a 
            Unicode column like NCHAR or NVARCHAR. Set to false if
            the strings came from a VARCHAR or CHAR column</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.Bin2CollationComparer.Compare(System.Object,System.Object)">
            <summary>
            This method compares two strings using the same method.
            DO NOT pass in anything other than a string or you will 
            get an invalid cast exception. It is better to use the 
            public int Compare(string string1, string string2) method of this class.
            This is purely here as it is convenient.
            </summary>
            <param name="a">First string to compare</param>
            <param name="b">The second string to compare</param>
            <returns> -1 if a less than b. 0 if a equals b
            1 if a is greater than b </returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.Bin2CollationComparer.Compare(System.String,System.String)">
            <summary>
            This method compares two strings using the same method
            as IComparer but with string arguments to avoid a cast.
            </summary>
            <param name="string1">First string to compare</param>
            <param name="string2">The second string to compare</param>
            <returns> -1 if string1 less than string2. 0 if string1 equals string2
            1 if string1 is greater than string2 </returns>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collation.BinCollationComparer">
            <summary>
            This class is used to compare two strings in the same way used
            for a bin collation in sql server. 
            </summary>
            <remarks>
            There is one major bug with this code and that is that 
            sql server can map several character the same from Sql Server 
            to the same character in .net string. This means that
            there is no way of getting the original characters that came Sql 
            Server so it is impossible to emulate SqlServer completely.
            If you are trying to understand the code make sure you read 
            http://blogs.msdn.com/michkap/search.aspx?q=bin2&amp;p=1
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.BinCollationComparer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new instance of Bin2CollationComparer to compare
            string in the same way as a bin2 collation
            </summary>
            <param name="LCID">The Locale ID of the Collation.</param>
            <param name="unicode">Set to true if the strings came from a 
            Unicode column like NCHAR or NVARCHAR. Set to false if
            the strings came from a VARCHAR or CHAR column</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.BinCollationComparer.Compare(System.Object,System.Object)">
            <summary>
            This method compares two strings using the same method.
            DO NOT pass in anything other than a string or you will 
            get an invalid cast exception. It is better to use the 
            public int Compare(string x, string y) method of this class.
            This is purely here as it is convenient.
            </summary>
            <param name="x">First string to compare</param>
            <param name="y">The second string to compare</param>
            <returns> -1 if x less than y. 0 if x equals y
            1 if x is greater than y </returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collation.BinCollationComparer.Compare(System.String,System.String)">
            <summary>
            This method compares two strings using the same method
            as IComparer but with string arguments to avoid a cast.
            </summary>
            <param name="string1">First string to compare</param>
            <param name="string2">The second string to compare</param>
            <returns> -1 if string1 less than string2. 0 if string1 equals string2
            1 if string1 is greater than string2 </returns>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Filter">
            <summary>
                Used to create a filtered <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see> using the
                <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplyFilter(System.Boolean)">ApplyFilter</see> method.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Filter.Check(RedGate.SQLDataCompare.Engine.ResultsStore.Row)">
            <summary>
            Performs the actual filtering for a row.
            </summary>
            <param name="row">Row to be checked for inclusion.</param>
            <returns>true if included; false otherwise.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Filter.ColumnConstraints">
            <summary>The <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.Filter.ColumnConstraints">ColumnConstraints</see> for the filter.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange">
            <summary>
            A range for a ColumnConstraint. A ColumnConstraint can contain a number of
            ranges.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.#ctor(System.IComparable)">
            <summary>
            Constructs a range constraint for a field filter in which the field must be
            greater than or equal to the specified value.
            </summary>
            <param name="minValue">The minimum value (inclusive).</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.#ctor(System.IComparable,System.IComparable)">
            <summary>
            Constructs a range constraint for a field filter in which the field must be
            greater than or equal to the minimum value, and less than or equal to the maximum
            value.
            </summary>
            <param name="minValue">The minimum value (inclusive).</param>
            <param name="maxValue">The maximum value (inclusive).</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.#ctor(System.Boolean)">
            <summary>
            Constructs a range constraint in which the field must be null if <em>true</em>,
            or not null if <em>false</em>.
            </summary>
            <param name="isNull"><em>true</em> if the field must be null.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.MinValue">
            <summary>The minimum (inclusive) value for a field.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.MaxValue">
            <summary>The maximum (inclusive) value for a field.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.IsNull">
            <summary>
                If set, the field must be null. This property takes priority over
                <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.IsMissing">IsMissing</see>.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.IsMissing">
            <summary>
                If set, the field value must be <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Missing">Missing</see>.
                <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange.IsNull">IsNull</see> takes priority over this property.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRanges">
            <summary>
            Defines a set of ranges that the constraint must adhere to in order to be
            included after the filter has been applied.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.InternalCollectionBase">
            <summary>
            An interface used internally by SQL Data Compare.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.InternalCollectionBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.InternalCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.InternalCollectionBase.Count">
            <summary>
            The number of items in the list.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.InternalCollectionBase.InnerList">
            <summary>
            The underlying ArrayList.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRanges.Add(RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange)">
            <summary>
            Adds a ColumnRange to the ColumnRanges collection. If any succeed, the
            ColumnConstraint succeeds.
            </summary>
            <returns>Index of the new ColumnRange.</returns>
            <param name="value">The ColumnRange to be added.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRanges.Clear">
            <summary>Removes all ColumnRanges from the collection.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRanges.RemoveAt(System.Int32)">
            <summary>Removes the ColumnRange at the specified index.</summary>
            <param name="index">The index of the ColumnRange to be removed.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRanges.Item(System.Int32)">
            <summary>Returns the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnRange"/> at the specified index.</summary>
            <param name="index">The zero-based index of the ColumnRange to get or set.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint">
            <summary>A class to filter the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see> on field data.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint.#ctor(RedGate.SQLDataCompare.Engine.FieldPair,System.Boolean)">
            <summary>
            Constructs a new ColumnConstraint object.
            </summary>
            <param name="fieldPair">
                The <see cref="T:RedGate.SQLDataCompare.Engine.FieldPair">FieldPair</see> being
                filtered.
            </param>
            <param name="inOne">
            	<em>true</em> if the field is being filtered on the data in the first
            database.
            </param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint.FieldPair">
            <summary>The FieldPair to be filtered.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint.InOne">
            <summary>The constraint is to be used on the field in the first database.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint.ConstraintRanges">
            <summary>
            A set of ColumnRanges. The field must conform to at least one of the
            ColumnRanges.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraints">
            <summary>
            A collection of ColumnConstraint objects used for filtering a results
            store.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraints.Add(RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint)">
            <summary>
                Adds a <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint">ColumnConstraint</see> to the end of the
                ColumnConstraints collection. ColumnConstraints are added in order.
            </summary>
            <returns>The index of the new ColumnConstraint.</returns>
            <param name="value">The ColumnConstraint to be added.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraints.Clear">
            <summary>Removes all ColumnConstraints from the collection.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraints.RemoveAt(System.Int32)">
            <summary>Removes the ColumnConstraint at the specified index.</summary>
            <param name="index">The index of the ColumnConstraint to be removed.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraints.Item(System.Int32)">
            <summary>Returns the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnConstraint"/> at the specified index.</summary>
            <param name="index">The zero-based index of the ColumnConstraint to get or set.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Missing">
            <summary>
                Signifies a Missing result, for which there is no value in the
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see>. There is a singleton class of this type, so
                all reference comparisons are valid.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Missing.CompareTo(System.Object)">
            <summary>
                Compares Missing objects, for which there is no value in the
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see>.
            </summary>
            <returns>Zero if the object is a Missing object; otherwise -1.</returns>
            <param name="obj">The object to be compared.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Missing.ToString">
            <summary>
            Returns "Missing".
            </summary>
            <returns>Missing.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Missing.Equals(System.Object)">
            <summary>Indicates whether the Missing instance is identical to a specified object.</summary>
            <returns>
            	<em>true</em> if the underlying Missing data is the same; otherwise,
            <em>false</em>.
            </returns>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Missing.GetHashCode">
            <summary>Overridden. Returns the hash code for the instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
            <exception cref="T:System.NotSupportedException" caption="">Missing class is used as a singleton; unable to create a hash code.</exception>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Offset">
            <summary>
            Summary description for Offsets.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.#ctor(System.String)">
            <summary>
            Creates a index and prepares it for reading.
            </summary>
            <param name="filename">index filename.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.#ctor(RedGate.SQLDataCompare.Engine.ResultsStore.Offsets,System.Boolean)">
            <summary>
            Opens the index and prepares to read or write depending on the readMode argument.
            </summary>
            <param name="offsets">offsets to copy from.</param>
            <param name="readMode">true for read mode, false for write mode.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UseNewOffsets">
            <summary>
            Creates a new offset file - you can add to this and finalise with <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.FinaliseNewOffsets"/>, this
            is very cunning as the previous offsets remain available for reading while you're creating the new one.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.FinaliseNewOffsets">
            <summary>
            Called to confirm a new offset file after <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UseNewOffsets"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UsePreviousOffsets">
            <summary>
            Called to cancel a new offset file after <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UseNewOffsets"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UseOriginalOffsets">
            <summary>
            Called to revert to the original offset file after <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UseNewOffsets"/>
            and <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.FinaliseNewOffsets"/> have been called.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.CloseWriters">
            <summary>
            Called to close all of the writers for the current filename.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.CloseReaders">
            <summary>
            Called to close all of the readers for the current filename.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.Dispose">
            <summary>
            Stops any reading and writing on the file and deletes any new index files, there may at worst
            be three files in use, the original, the one being read after a call to <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UseNewOffsets"/>
            and the one being read before a call to <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.FinaliseNewOffsets"/> or <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.UsePreviousOffsets"/>
            The original offset file is left.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.Close">
            <summary>
            Calls Dispose and removes the original index file as well.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Offsets.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Offset"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Reader">
            <summary>
                Reads data from a results store. Can be created using
                <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetReader"/>.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.m_Missing">
            <summary>
            To check for missing values you can compare against this singleton.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.GetRow(System.IO.BinaryReader,System.Int32,System.Int32,System.Int64,RedGate.SQLDataCompare.Engine.FieldPairs,RedGate.SQLDataCompare.Engine.FileStoreTypes[],System.Boolean)">
            <summary>
            Always returns the row at the current offset in the file.
            </summary>
            <returns>row.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.GetRow(System.Int32)">
            <summary>Gets a row at the specified index.</summary>
            <remarks>The current row depends on how the ResultsStore is currently sorted</remarks>
            <returns>The row at the requested index.</returns>
            <param name="index">The index of the row to retrieve.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.GetSummaryRow(System.Int32)">
            <summary>
            Gets a summary row at the specified index. If the current row has already been
            retrieved in full, the complete row is returned.
            </summary>
            <remarks>The current row depends on how the ResultsStore is currently sorted.</remarks>
            <returns>The row at the requested index.</returns>
            <param name="index">The index of the row to retrieve.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Dispose">
            <summary>Disposes of the current object.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplyFilter(System.Boolean)">
            <summary>
                Applies the ResultsStore <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Filter">Filter</see> class to the Reader. Any
                access to this Reader after the filter has been applied will access only the
                filtered data.
            </summary>
            <param name="useOriginalResultsStore">
            When <em>true,</em> the filter will be applied to the original ResultsStore; when
            <em>false,</em> the filter will be applied to the current state of the
            ResultsStore.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.GetNextSplit(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,RedGate.SQLDataCompare.Engine.ResultsStore.Row@,RedGate.SQLDataCompare.Engine.ResultsStore.Row@)">
            <summary>
            Called to get the next pair of rows from a binary search, used by
            the clever single sort filter on sort optimisation.
            </summary>
            <param name="maxcount">Maximum number of results.</param>
            <param name="ascending">Indicates ascending or descending order.</param>
            <param name="hittarget">If this is set to true two rows are retrieved adjacent for fine searching.</param>
            <param name="wantprevious">Do you want the previous or next row when we've hittarget.</param>
            <param name="low">low split.</param>
            <param name="high">high split.</param>
            <param name="rowa">Row returned.</param>
            <param name="rowb">Row returned adjacent after hitttarget and depending on wantprevious, may be null if
            the rowa is at the top or bottom.</param>
            <returns>The index of the current row for assignment to the low or high.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ReverseSort">
            <summary>
            Reverses the current order of the ResultsStore. This is a fast operation; it is
            much quicker than applying the sort in the reverse order.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplySort">
            <summary>Sorts the ResultsStore according to <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.SortOrder"/>.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.CancelOperation">
            <summary>
            Cancels the running operation. This may be a <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplyFilter(System.Boolean)"/> or a <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplySort"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.GetEnumerator">
            <summary>Returns a ResultsStore <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator"/>.</summary>
            <returns>Enumerator for the ResultsStore.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.RowCount">
            <summary>
            Returns the row count for the current reader.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Fields">
            <summary>
            Returns the fields for the current reader.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Where">
            <summary>Contains the WHERE clause that was used to create the ResultsStore.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Position">
            <summary>
            Gets and sets the absolute position of the current row.
            </summary>
            <remarks>
            This depends on the current sorting of the ResultsStore.
            </remarks>
            <exception cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException">Invalid row index.</exception>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Filter">
            <summary>The filter used to generate a filtered ResultsStore.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.SortOrder">
            <summary>The sort order to be used on the current ResultsStore.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Status">
            <summary>
            The status handler for the <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplySort"/> or <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplyFilter(System.Boolean)"/> operations.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.Missing">
            <summary>Compare against this singleton to check for Missing values.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException">
            <summary>
            Exception thrown by classes in the RedGate.SQLDataCompare.Engine.ResultsStore namespace when it encounters an error.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SqlDataCompareException">
            <summary>
            Superclass of all exceptions thrown by the SQL Data Compare engine.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlDataCompareException.#ctor">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlDataCompareException.#ctor(System.String)">
            <summary>
            Creates a new exception with the specified detail message.
            </summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlDataCompareException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception with the specified detail message that
            was caused by the supplied exception.
            </summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlDataCompareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException.#ctor">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException.#ctor(System.String)">
            <summary>
            Creates a new exception with the specified detail message.
            </summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception with the specified detail message and cause.
            </summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Row">
            <summary>
            A row containing data in a ResultsStore object.
            </summary>
            <remarks>
            See <see cref="N:RedGate.SQLDataCompare.Engine.ResultsStore"/> for more information and code samples.
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Row.FieldDifferent(System.Int32)">
            <summary>
            Returns <em>true</em> if the FieldPair of the specified ordinal is
            different.
            </summary>
            <returns><em>true</em> if values are different; otherwise <em>false</em>.</returns>
            <param name="fieldIndex">Ordinal of the FieldPair in the ResultsStore.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Row.Index">
            <summary>
            The index of the row in the ResultsStore.
            </summary>
            <remarks>
            The Index property changes as the ResultsStore is sorted.
            </remarks>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Row.Bookmark">
            <summary>
            The bookmark of the row in the ResultsStore.
            </summary>
            <remarks>
            The Bookmark property is independent of how the ResultsStore is sorted. Note that
            using the bookmark property is slow.
            </remarks>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Row.Values">
            <summary>
            The values of the fields in the row.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Row.Type">
            <summary>
            The type of the results in the row from <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType">
            <summary>
            The type of the row. The values All and TotalDifferent can be used for <see cref="M:RedGate.SQLDataCompare.Engine.DifferencesSummary.DifferenceCount"/>.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType.In1">
            <summary>Data exists only in the first database.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType.Different">
            <summary>Data exists in both databases and is different.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType.In2">
            <summary>Data exists only in the second database.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType.Same">
            <summary>All data is identical.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType.All">
            <summary>All rows. Used for indexing Readers. Not a true row type.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType.TotalDifferent">
            <summary>The rows that differ, (Different, In1, and In2). Not a true row type.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Sort">
            <summary>
                Used to specify a sort order for the ResultsStore when using
                <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplySort"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Sort.Compare(System.Object,System.Object)">
            <summary>
            Called from <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplySort"/>.
            </summary>
            <returns>-1, 0, 1 as normal.</returns>
            <param name="x">The objects to be compared in sort order.</param>
            <param name="y">The objects to be compared in sort order.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Sort.ColumnSorts">
            <summary>A collection of <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort">ColumnSort</see> objects.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort">
            <summary>A class to sort the ResultsStore by field data.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.#ctor(RedGate.SQLDataCompare.Engine.FieldPair,System.Boolean)">
            <summary>
            Constructs a new ColumnSort object.
            </summary>
            <param name="fieldPair">The FieldPair being sorted.</param>
            <param name="inOne">The field is being sorted using the data in the first database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.#ctor">
            <summary>
                Constructs a new ColumnSort object for sorting by type.
                <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.SortByType"/> is set to <em>true</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.Ascending">
            <summary>Specifies whether the field is sorted ascending or descending.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.SortByType">
            <summary>
            Sorts by the type.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.FieldPair">
            <summary>The name of the field being sorted.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort.InOne">
            <summary>Sort by the field in the first database.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSorts">
            <summary>A collection of ColumnSorts to be applied to a ResultsStore.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSorts.Add(RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort)">
            <summary>
                Adds <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort">ColumnSort</see> to the ColumnSorts collection.
                ColumnSorts are added in order.
            </summary>
            <returns>The index of the new ColumnSort.</returns>
            <param name="value">The ColumnSort to be added.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSorts.Clear">
            <summary>Removes all ColumnSorts from the collection.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSorts.RemoveAt(System.Int32)">
            <summary>Removes the ColumnSort at the specified index.</summary>
            <param name="index">The index of the ColumnSort to be removed.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSorts.Item(System.Int32)">
            <summary>Returns the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ColumnSort"/> at the specified index.</summary>
            <param name="index">The zero-based index of the ColumnSort to get or set.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType">
            <summary>
            The types of field that a ResultsStore can contain.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Empty">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Integer8">
            <summary>8-bit signed integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Integer16">
            <summary>16-bit signed integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Integer32">
            <summary>32-bit signed integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Integer64">
            <summary>64-bit signed integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Byte">
            <summary>8-bit unsigned integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.UInteger16">
            <summary>16-bit unsigned integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.UInteger32">
            <summary>32-bit unsigned integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.UInteger64">
            <summary>64-bit unsigned integer.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Single">
            <summary>Single-precision, 32-bit number.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Boolean">
            <summary>
            Boolean, True/False value.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.String">
            <summary>
            String or XML.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Double">
            <summary>Double-precision, 64-bit number.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Date">
            <summary>
            Date and time.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Binary">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Decimal">
            <summary>High-precision, decimal number suitable for financial information.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Object">
            <summary>
            An object.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.Clr">
            <summary>A CLR type.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType.SortByte">
            <summary>An byte for sorting by type (cannot be compared).</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">
            <summary>
            A data set containing a collection of rows.
            </summary>
            <remarks>
            	<para>
                    SQL Data Compare returns results from a comparison as a ResultsStore class. A
                    ResultsStore contains a number of <see cref="P:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Fields">field definitions</see>.
                    The fields can be of a number of different <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType">data
                    types</see>.
                </para>
            	<para>
                    See <see cref="T:RedGate.SQLDataCompare.Engine.FieldPair"/> for more information on how to cross reference
                    the ResultsStore to the underlying database tables being compared.
                </para>
            	<para>
                    To access the data in a ResultsStore, use the <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetReader"/>
                    method to retrieve a <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Reader"/> that can be used for data
                    sorting, filtering and retrieval. You can also use the
                    <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetEnumerator"/> to retreive a
                    <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator"/> that can be used to access the ResultsStore
                    quickly.
                </para>
            </remarks>
            <example>
                Printing out different records in a table. 
                <code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using RedGate.SQLDataCompare.Engine.ResultsStore;
             
            namespace SQLDataCompareCodeSnippets
            {
                /// &lt;summary&gt;
                /// Summary description for StoreExample.
                /// &lt;/summary&gt;
                public class StoreExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
             
                        db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                        db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));
             
                        using(ComparisonSession session=new ComparisonSession())
                        {
             
                            // Create the mappings between the two databases
                            TableMappings mappings = new TableMappings();
                            mappings.CreateMappings(db1.Tables, db2.Tables);
             
                            session.CompareDatabases(db1, db2, mappings);
             
                            Reader resultsReader=session.TableDifferences["[dbo].[Widgets]"].ResultsStore.GetReader();
             
                            // work out the two positions in the fields
                            int description1=resultsReader.Fields["Description"].OrdinalInResults1;
                            int description2=resultsReader.Fields["Description"].OrdinalInResults2;
             
                            // work out the position of the RecordID column
                            // this is part of the unique index we are comparing on
                            int recordID=resultsReader.Fields["RecordID"].OrdinalInResults1;
             
                            // sort by description in the first database
                            resultsReader.SortOrder.ColumnSorts.Add(new ColumnSort(resultsReader.Fields["Description"], true));
                            resultsReader.ApplySort();
             
                            foreach(Row row in resultsReader)
                            {
                                Console.Write("{0}:{1},{2}", row.Values[recordID], row.Values[description1], row.Values[description2]);
                                Console.WriteLine();
                            }
                        }
                        db1.Dispose();
                        db2.Dispose();
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On
            
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports RedGate.SQLDataCompare.Engine.ResultsStore
             
            Public Class StoreExample
                Sub RunExample()
                    Dim session As New ComparisonSession
             
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    'create an intersection of the tables
                    Dim mappings As New TableMappings
                    mappings.CreateMappings(db1.Tables, db2.Tables)
             
                    'compare the databases
                    session.CompareDatabases(db1, db2, mappings)
             
                    Dim resultsReader As Reader = session.TableDifferences("[dbo].[Widgets]").ResultsStore.GetReader
             
                    'work out the two positions in the fields
                    Dim description1 As Integer = resultsReader.Fields("Description").OrdinalInResults1
                    Dim description2 As Integer = resultsReader.Fields("Description").OrdinalInResults2
             
                    'work out the position of the RecordID column
                    'this is part of the unique index we are comparing on
             
                    Dim recordID As Integer = resultsReader.Fields("RecordID").OrdinalInResults1
             
                    'sort by description in the first database
                    resultsReader.SortOrder.ColumnSorts.Add(New ColumnSort(resultsReader.Fields("Description"), True))
                    resultsReader.ApplySort()
             
                    Dim row As Row
                    For Each row In resultsReader
                        Console.Write("{0}:{1},{2}", row.Values(recordID), row.Values(description1), row.Values(description2))
                        Console.WriteLine()
                    Next
             
                    'dispose of the objects to delete temporary files
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.#ctor(RedGate.SQLDataCompare.Engine.FieldPairs)">
            <summary>
            Constructor for packager.
            </summary>
            <param name="in1">reader1 small fields.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.#ctor(RedGate.SQLDataCompare.Engine.FieldPairs,RedGate.SQLDataCompare.Engine.FieldPairs)">
            <summary>
            Constructor for SQL Data Compare.
            </summary>
            <param name="in1">reader1 small fields.</param>
            <param name="in2">reader2 small fields.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetTempPath">
            <summary>
            We now generate the path name based on the RGTEMP environment variable or the TEMP variable.
            </summary>
            <returns>Path + "\RG-"</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.IdenticalValues(System.Object,System.Object)">
            <summary>
            Returns <em>true</em> if two values are identical. This method is now obsolete;
            use IdenticalValues(object value1, object value2, Field f).
            </summary>
            <remarks>
            If the values are of different types, or if one value is null, returns
            <em>false</em>.
            </remarks>
            <returns><em>true</em> if the two values are identical.</returns>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.IdenticalValues(System.Object,System.Object,RedGate.SQLDataCompare.Engine.FieldPair)">
            <summary>Returns <em>true</em> if two specified values are identical.</summary>
            <remarks>
                If the values are of different types, or if one value is null, returns
                <em>false</em>. If you are using <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.GetSummaryRow(System.Int32)"/> to
                retrieve the data, you must use the <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Row.FieldDifferent(System.Int32)"/> method to
                determine whether the values are the same in a <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Row"/>.
            </remarks>
            <returns><em>true</em> if the values are identical.</returns>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <param name="fieldPair">
            The FieldPair information for use in the comparison (collation and type
            information).
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Dispose">
            <summary>Disposes of the current object.</summary>
            <remarks>
            The ResultsStore class makes extensive use of temporary files. It is important to
            call the Dispose method to ensure these files are deleted.
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Close">
            <summary>
            Closes the ResultsStore, after this is called you can use <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetReader"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetReader">
            <summary>
                Gets a reader so that the ResultsStore can be read in a multi-threaded environment.
                By default, this is the same as calling <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetReader"/> with an
                argument of RowType.All.
            </summary>
            <returns>A Reader.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetReader(RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType)">
            <summary>Gets a reader for the ResultsStore for a specified type of results.</summary>
            <returns>A Reader.</returns>
            <param name="rowType">The type of row to be matched.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.Store.GetEnumerator">
            <summary>Returns a default enumerator for the ResultsStore.</summary>
            <returns>StoreEnumerator that can be used to access the results store.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Store.RowCount">
            <summary>
            The number of rows in the ResultsStore.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Fields">
            <summary>
            The fields in the ResultsStore object.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Types">
            <summary>
            Stores the types that are written into the file for each field.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.Store.Where">
            <summary>Contains the WHERE clause that was used to create the ResultsStore.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator">
            <summary>
            This is the enumerator for a ResultsStore or Reader.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            	<em>true</em> if the enumerator was successfully advanced to the next element;
            <em>false</em> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.Dispose">
            <summary>Closes all the resources associated with enumerating a ResultsStore.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <exception cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException">Reader not positioned on a row</exception>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>The current element in the collection.</value>
            <exception cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.ResultsStoreException">Reader not positioned on a row</exception>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ResultsStore.StoreEnumerator.Summary">
            <summary>
            Controls whether the enumerator is for summary row information only, or full row
            information. By default, this is <em>false</em>.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Blob">
            <summary>
            Wrapper class for a byte array.
            </summary>
            <remarks>
            The Blob object is used internally by SQL Data Compare
            to represent a byte array. Use the <see cref="P:RedGate.SQLDataCompare.Engine.Blob.ByteArray"/> property to access the underlying data.
            </remarks>
            <example>
            	<code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using RedGate.SQLDataCompare.Engine.ResultsStore;
             
            namespace SQLDataCompareCodeSnippets
            {
                public class BlobExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
             
                        // Register the databases
                        db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                        db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));
             
                        using (ComparisonSession session = new ComparisonSession())
                        {
                            // Create the schema mappings used to compare the database
                            SchemaMappings mappings = new SchemaMappings();
                            mappings.CreateMappings(db1, db2);
             
                            session.CompareDatabases(db1, db2, mappings);
             
                            // Get the reader for the different rows in the results
                            Reader different=session.TableDifferences["[dbo].[WidgetDescriptions]"].ResultsStore.GetReader(Row.RowType.Different);
             
                            // get the first row in the ResultsStore Reader for the different rows.
             
                            Row currentRow=different.GetRow(0);
             
                            //field1 and field2 contain the position of the two BLOBs in the ResultsStore
                            int field1 = different.Fields["Picture"].OrdinalInResults1;
                            int field2 = different.Fields["Picture"].OrdinalInResults2;
             
                            Blob blob1=(Blob)currentRow.Values[field1];
                            Blob blob2=(Blob)currentRow.Values[field2];
             
                            // Output the first 20 bytes
                            for (int i=0; i&lt;20; i++)
                            {
                                Console.Write("{0:X} ", blob1.ByteArray[i]);
                            }
                            Console.WriteLine();
                
                            // Output the first 20 bytes
                            for (int i=0; i&lt;20; i++)
                            {
                                Console.Write("{0:X} ", blob2.ByteArray[i]);
                            }
                            Console.WriteLine();
                        }
                        db1.Dispose();
                        db2.Dispose();
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
            
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports RedGate.SQLDataCompare.Engine.ResultsStore
             
            Class BlobExample
                Sub RunExample()
                    Dim session As New ComparisonSession
             
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    'create the schema mappings used to compare the database
                    Dim mappings As New SchemaMappings
                    mappings.CreateMappings(db1, db2)
             
                    'compare the databases
                    session.CompareDatabases(db1, db2, mappings)
             
                    Dim different As Reader = session.TableDifferences("[dbo].[WidgetDescriptions]").ResultsStore.GetReader(Row.RowType.Different)
             
                    'work out the two positions in the fields
                    Dim field1 As Integer = different.Fields("Picture").OrdinalInResults1
                    Dim field2 As Integer = different.Fields("Picture").OrdinalInResults2
             
                    'get the first row in the ResultsStore
                    Dim currentRow As Row = different.GetRow(0)
             
                    'field1 and field2 contain the position of the two BLOBs in the ResultsStore
                    Dim blob1 As Blob = currentRow.Values(field1)
                    Dim blob2 As Blob = currentRow.Values(field2)
             
                    Dim i As Integer
             
                    For i = 0 To 20
                        Console.Write("{0:X} ", blob1.ByteArray(i))
                    Next
                    Console.WriteLine()
             
                    For i = 0 To 20
                        Console.Write("{0:X} ", blob2.ByteArray(i))
                    Next
                    Console.WriteLine()
             
                    'dispose of the objects to delete temporary files
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Blob.#ctor(System.Byte[])">
            <summary>Constructs the Blob object with a specified byte array.</summary>
            <param name="bytes">The byte array.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Blob.CompareTo(System.Object)">
            <summary>Compares the Blob with another Blob.</summary>
            <returns>Returns -1, 0, or 1.</returns>
            <param name="obj">The Blob to compare.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Blob.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Blob.Dispose">
            <summary>Disposes of the current object.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Blob.Length">
            <summary>
            The number of bytes in the underlying byte array.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Blob.ByteArray">
            <summary>
            The underlying byte array.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.CLR">
            <summary>Wrapper class for a CLR data type.</summary>
            <remarks>
            The CLR object is used internally by SQL Data Compare to represent a CLR data type. Use the
            <see cref="P:RedGate.SQLDataCompare.Engine.Blob.ByteArray"/> and
            <see cref="P:RedGate.SQLDataCompare.Engine.CLR.Text"/> properties to access the underlying data.
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.CLR.#ctor(System.Byte[],System.String)">
            <summary>Constructs the CLR object with a given byte array and textual representation.</summary>
            <param name="bytes">The byte array.</param>
            <param name="textual">The textual representation of the CLR object.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.CLR.op_Explicit(RedGate.SQLDataCompare.Engine.CLR)~System.String">
            <summary>
            Explicit conversion from CLR to string.
            </summary>
            <param name="clr">The CLR to cast.</param>
            <returns>The textual representation of the CLR.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.CLR.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The textual representation of the CLR object.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.CLR.Text">
            <summary>The textual representation of the CLR object.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collations">
            <summary>Internal class for the improved collation comparisons.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collations.GetCollationInfo(System.String)">
            <summary>
            Takes the name of a collation as an argument and returns a Collations.Collation class
            with the information necessary to do a comparison.
            </summary>
            <param name="collation">Name of the collation</param>
            <returns>Collation information for use with CompareInfo.Compare()</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collations.CreateLookup">
            <summary>
            Constructor that adds the collation information as cached from information
            retreived from SQL Server 2000
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Collations.Collation">
            <summary>
            Container for the improved collation information
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Collations.Collation.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor, this will do the appropriate bit shifting for the SQL Server
            ComparisonStyle to CLR CompareOptions
            </summary>
            <param name="LCID">Locale ID</param>
            <param name="compareOptions">CompareOptions as returned from SQL Server</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Collations.Collation.LCID">
            <summary>
            The Locale ID for the comparison
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Collations.Collation.CompareOptions">
            <summary>
            The CompareOptions needed for the CompareInfo.Compare call
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Compare">
            <summary>
            Responsible for comparing values.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Compare.ConvertNewlines(System.String)">
            <summary>
            Will take a string and change all occurences of \r\n to \n to be XML conformant.
            </summary>
            <param name="source">string to convert.</param>
            <returns>changed string.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Compare.XmlStartStatus(System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks to see if the string xml has a DTD or not and in the bargain checks for xml declaration.
            </summary>
            <param name="xml">string representation of the xml.</param>
            <param name="hasDTD">True if there is document type declaration.</param>
            <param name="hasXml">True if there is an xml declaration.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Compare.LexicalXMLEqual(System.String,System.String)">
            <summary>
            This will compare a text string to an xml string to see if they are equal.
            Having to take into account Microsofts strange entity createion for whitespace and cdata removal, escaping.
            We also will have problems with embedded DTDs and xml declarations.
            </summary>
            <param name="text">string as returned from a sql textual data type.</param>
            <param name="xml">string as returned from a sql xml data type.</param>
            <returns>true if lexically equal, false otherwise.</returns>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ComparisonSession">
            <summary>
            Class used to compare two databases.
            </summary>
            <remarks>
            	<para>The ComparisonSession class carries out the majority of the work to compare
                the data in two databases.</para>
            	<para>
                    You need to instantiate a ComparisonSession class and then call
                    <see cref="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.SchemaMappings)"/>. You can then access the results from the
                    <see cref="P:RedGate.SQLDataCompare.Engine.ComparisonSession.TableDifferences"/> property.
                </para>
            	<para>
                    Use the <see cref="P:RedGate.SQLDataCompare.Engine.ComparisonSession.Status"/> event handler to receive feedback about the
                    comparison.
                </para>
            	<para>
                    The operation can be canceled by calling <see cref="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CancelOperation"/>.
                </para>
            	<para>Note that you must not re-use a ComparisonSession to carry out multiple
                comparisons; create a new ComparisonSession each time</para>
            	<para>
                    SQL Data Compare makes extensive use of temporary files. It is essential that
                    you call <see cref="M:RedGate.SQLDataCompare.Engine.ComparisonSession.Dispose(System.Boolean)"/> to ensure that these are cleaned up.
                </para>
            </remarks>
            <example>
                This example shows a complete code sample for printing the different records in two
                databases. It shows how to get feedback during a long operation, and how to cancel
                part-way through. 
                <code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using RedGate.SQLDataCompare.Engine.ResultsStore;
             
            namespace SQLDataCompareCodeSnippets
            {
                public class ComparisonSessionExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
                        ComparisonSession session=new ComparisonSession();
                        SchemaMappings mappings = new SchemaMappings();        
                       
                        try
                        {
                            db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                            db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));                                    
                            
                            // Create the mappings between the two databases
                            mappings.CreateMappings(db1, db2);
                            session.CompareDatabases(db1, db2, mappings);
                            
                            foreach (TableMapping mapping in mappings.TableMappings)
                            {    
                                TableDifference difference=session.TableDifferences[mapping.Obj1.FullyQualifiedName];                
                                //loop through all the rows
                                foreach(Row row in difference.ResultsStore)
                                {
                                    //go through the non same records
                                    if (row.Type != Row.RowType.Same)
                                    {
                                        Console.WriteLine("{0} Row {1} type {2}", mapping.Obj1.FullyQualifiedName, row.Index, row.Type.ToString());
                                        int i=0;
                                        foreach (FieldPair field in difference.ResultsStore.Fields)
                                        {
                                            int field1=field.OrdinalInResults1;
                                            int field2=field.OrdinalInResults2;
                                    
                                            if (field1 != field2)
                                            {
                                                // Get the values
                                                object value1=row.Values[field1];
                                                object value2=row.Values[field2];
                                                if (value1 == null)
                                                    value1="NULL";
                                                if (value2 == null)
                                                    value2="NULL";
                                                Console.WriteLine("{0}\t{1}\t{2}\t{3}",field.Field(false).Name, value1.ToString(),row.FieldDifferent(i)?"&lt;&gt;":"==",  value2.ToString());
                                            }
                                            else
                                            {
                                                // This is part of the unique index we are comparing on
                                                object value=row.Values[field1];    
                                                Console.WriteLine("*{0}\t{1}",field.Field(false).Name, value.ToString());
                                            }
                                            i++;
                                        }// End of foreach field pair
                                    }
                                }// End of foreach row
                            }// End of foreach mappings
                        }
                        finally
                        {
                            session.Dispose();
                            db1.Dispose();
                            db2.Dispose();
                        }
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports RedGate.SQLDataCompare.Engine.ResultsStore
             
            Public Class ComparisonSessionExample
                Sub RunExample()
                    Dim session As New ComparisonSession
             
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
             
                    Dim mappings As New SchemaMappings
                    mappings.CreateMappings(db1, db2)
             
                    'compare the databases
                    session.CompareDatabases(db1, db2, mappings)
             
                    Dim mapping As TableMapping
             
                    For Each mapping In mappings.TableMappings
                        Dim table As ViewTableSuperClass = mapping.Obj1
                        Dim difference As TableDifference = session.TableDifferences(table.FullyQualifiedName)
                        Dim row As row
                        For Each row In difference.ResultsStore  'loop through all the rows
             
                            If (row.Type &lt;&gt; row.RowType.Same) Then 'go through the non same records
                                Dim field As FieldPair
                                Dim i As Int32 = 0
                                Console.WriteLine("{0} Row {1} type {2}", table.FullyQualifiedName, row.Index, row.Type.ToString())
                                For Each field In difference.ResultsStore.Fields
                                    'work out where about in the results the field data is stored
                                    'if we were comparing identical records, or records present in one
                                    'database but not the other then we would not need to 
                                    'use the OrdinalInResults1 and OrdinalInResults2 properties
                                    'but just OrdinalInResults
                                    Dim field1 As Int32 = field.OrdinalInResults1
                                    Dim field2 As Int32 = field.OrdinalInResults2
             
                                    If (field1 &lt;&gt; field2) Then
                                        'get the values
                                        Dim value1 As Object = row.Values(field1)
                                        Dim value2 As Object = row.Values(field2)
                                        If (value1 Is Nothing) Then
                                            value1 = "NULL"
                                        End If
                                        If (value2 Is Nothing) Then
                                            value2 = "NULL"
                                        End If
                                        If row.FieldDifferent(i) Then
                                            Console.WriteLine("{0}:{1} &lt;&gt; {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                        Else
                                            Console.WriteLine("{0}:{1} == {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                        End If
                                    Else
                                        'this is part of the unique index we are comparing on
                                        Dim value As Object = row.Values(field1)
                                        Console.WriteLine("*{0}:{1}", field.Field(False).Name, value.ToString())
                                    End If
                                    i += 1
                                Next
                            End If
                        Next
                    Next
                    'dispose of the objects
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            	<code lang="CS">
            using System;
            using RedGate.SQL.Shared;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
             
            namespace SQLDataCompareCodeSnippets
            {
                public class ComparisonSessionWithProgressExample
                {
                    private ComparisonSession m_Session=null;
             
                    private void StatusCallback(object sender, StatusEventArgs e)
                    {
                        //fired by the SqlProvider to indicate events
                    
                        if (e.Message!=null)
                        {
                            Console.WriteLine(e.Message);
                        }
                    
                        if (e.Percentage!=-1)
                        {
                            Console.WriteLine("{0}%", e.Percentage);
                        }
                    
                        //cancel at random
                    
                        Random r=new Random();
                        if (r.Next(100)&lt;10)
                        {
                            m_Session.CancelOperation();
                        }
                    }
                    
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
                        TableMappings mappings = new TableMappings();
                        
                        db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                        db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));
                        
                        mappings.Options =  new EngineDataCompareOptions(MappingOptions.Default,ComparisonOptions.Default,SqlOptions.Default);
                        
                        mappings.CreateMappings(db1.Tables, db2.Tables);
                        mappings.CreateMappings(db1.Views, db2.Views);    
                        
                        using (m_Session = new ComparisonSession())
                        {
                            m_Session.Options = mappings.Options;
                            m_Session.Status+=new StatusEventHandler(StatusCallback);
                            try
                            {
                                m_Session.CompareDatabases( db1, db2, mappings, SessionSettings.Default);                    
                            }
                            catch (OperationCancelledException)
                            {
                                Console.WriteLine("Operation canceled!");
                            }
                            Console.WriteLine("Done!");
                        }
                        db1.Dispose();
                        db2.Dispose();
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQL.Shared
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
             
            Public Class ComparisonSessionWithProgressExample
             
                Private m_Session As ComparisonSession
             
                Sub StatusCallback(ByVal sender As Object, ByVal e As StatusEventArgs)
             
                    If Not (e.Message Is Nothing) Then
                        Console.WriteLine(e.Message)
                    End If
             
                    If e.Percentage &lt;&gt; -1 Then
                        Console.WriteLine("{0}%", e.Percentage)
                    End If
             
                    'Cancel the operation at random
             
                    Dim r As Random = New Random
             
                    If r.Next(100) &lt; 10 Then
                        m_Session.CancelOperation()
                    End If
                End Sub
             
                Sub RunExample()
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    'create an intersection of the tables
                    Dim mappings As New TableMappings
                    mappings.Options = New EngineDataCompareOptions(MappingOptions.Default, ComparisonOptions.Default, SqlOptions.Default)
             
                    mappings.CreateMappings(db1.Tables, db2.Tables)
                    mappings.CreateMappings(db1.Views, db2.Views)
             
                    m_Session = New ComparisonSession
                    m_Session.Options = mappings.Options
                    m_Session.Status = New StatusEventHandler(AddressOf StatusCallback)
             
                    Try
                        m_Session.CompareDatabases(db1, db2, mappings, SessionSettings.Default)
                    Catch e As OperationCancelledException
                        Console.WriteLine("Operation canceled!")
                    End Try
             
                    'dispose of the objects to delete temporary files
                    m_Session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.Dispose">
            <summary>Disposes of the object and its resources.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.OnStatus(RedGate.SQL.Shared.StatusEventArgs)">
            <summary>
            Fires the status event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CancelOperation">
            <summary>
            Cancels the current operation. Any table differences that were generated before
            the operation was canceled will be invalid.
            </summary>
            <remarks>An OperationCancelledException is thrown.</remarks>
            <example>
                See <see cref="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.SchemaMappings)"/> for an example of how to receive status
                events and cancel operations.
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.RefreshSelectedItems">
            <summary>
                Refreshes the <see cref="P:RedGate.SQLDataCompare.Engine.ComparisonSession.TableDifferences">TableDifferences</see> collection with
                any changes that have been made to the underlying data.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.SchemaMappings)">
            <summary>Compares two databases using default session settings.</summary>
            <param name="db1">The first database to compare.</param>
            <param name="db2">The second database to compare, or null.</param>
            <param name="mappings">Mappings from the first database to the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.SchemaMappings,RedGate.SQLDataCompare.Engine.SessionSettings)">
            <summary>Compares two databases with customized session settings.</summary>
            <param name="db1">The first database to compare.</param>
            <param name="db2">The second database to compare, or null.</param>
            <param name="mappings">Mappings from the first database to the second database.</param>
            <param name="sessionSettings">
            The records to include, by comparison status (identical, different, additional,
            missing).
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.TableMappings)">
            <summary>Compares the tables in two databases using default session settings.</summary>
            <param name="db1">The first database to compare.</param>
            <param name="db2">The second database to compare, or null.</param>
            <param name="mappings">Mappings from the first database to the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.TableMappings,RedGate.SQLDataCompare.Engine.SessionSettings)">
            <summary>Compares the tables in two databases using customized session settings.</summary>
            <param name="db1">The first database to compare.</param>
            <param name="db2">The second database to compare, or null.</param>
            <param name="mappings">Mappings from the first database to the second database.</param>
            <param name="sessionSettings">
            The records to include, by comparison status (identical, different, additional,
            missing).
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CheckSumComparison(RedGate.SQLDataCompare.Engine.TableMapping,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlConnection,RedGate.SQL.Shared.ProgressPercentageTracker)">
            <summary>
            Performs a quick comparison of two tables based on SQL checksums.
            </summary>
            <param name="mapping">Table mapping being compared.</param>
            <param name="connection1">SqlConnection for db1.</param>
            <param name="connection2">SqlConnection for db2.</param>
            <param name="progress">Progress tracker.</param>
            <returns>a table difference if they're the same, null otherwise.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ComparisonSession.Status">
            <summary>
            The event handler used to receive status update events.
            </summary>
            <example>
                See <see cref="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.SchemaMappings)"/> for an example of how to receive status
                events and cancel operations.
            </example>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ComparisonSession.TableDifferences">
            <summary>
            The differences resulting from the database comparison.
            </summary>
            <example>
            See <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession"/> for an example of how to use this.
            </example>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ComparisonSession.Database1">
            <summary>Returns the first database that is being compared.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ComparisonSession.Database2">
            <summary>Returns the second database that is being compared.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.ComparisonSession.Options">
            <summary>The options used when the databases are compared.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ComparisonSessionException">
            <summary>
            Exception thrown by <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession"/> when it encounters an error comparing the databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSessionException.#ctor">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSessionException.#ctor(System.String)">
            <summary>
            Creates a new exception with the specified detail message.
            </summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSessionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception with the specified detail message and cause.
            </summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ComparisonSessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.DataCompareVariant">
            <summary>Wrapper class for the SQL Variant data type.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DataCompareVariant.#ctor(System.Object,System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Construct the DataCompareVariant object with a given value object and type information.
            </summary>
            <param name="o">value object.</param>
            <param name="baseType">Sysname base type of the variant.</param>
            <param name="precision">Precsion for the variant type.</param>
            <param name="scale">Scale for the variant type.</param>
            <param name="collation">Collation for the variant type.</param>
            <param name="maxLength">MaxLenght for the variant type.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DataCompareVariant.CompareTo(System.Object)">
            <summary>Compare the DataCompareVariant object with another object.</summary>
            <returns>Returns -1, 0, or 1.</returns>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DataCompareVariant.ToString">
            <summary>Shows the string value of the DataCompareVariant object.</summary>
            <returns>The string value of the the DataCompareVariant object.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DataCompareVariant.Value">
            <summary>The value of the SQL Variant.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DataCompareVariant.BaseType">
            <summary>The base type of the underlying SQL Variant.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DataCompareVariant.Precision">
            <summary>The precision of the SQL Variant.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DataCompareVariant.Scale">
            <summary>The scale of the SQL Variant.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DataCompareVariant.Collation">
            <summary>
            The collation of the SQL Variant.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DataCompareVariant.MaxLength">
            <summary>
            The maximum data type length of the SQL Variant.
            </summary>
            <remarks>MaxLength is in bytes so for example the MaxLength of nvarchar(50) is 100.</remarks>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.DifferencesSummary">
            <summary>
                Holds information about the differences in the
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see><see>
                .</see>
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DifferencesSummary.RepeatedKeys(System.Boolean)">
            <summary>
            If <em>true</em>, the matching keys for the table were not unique, and therefore
            synchronization may not be possible.
            </summary>
            <param name="runOnTwo"><em>True</em> to run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DifferencesSummary.DifferenceCount">
            <summary>
            Returns the number of rows that are different.
            </summary>
            <returns>The number of rows that are different.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DifferencesSummary.DifferenceCount(RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType)">
            <summary>
            Returns the number of rows of the specified <em>rowType</em> that are
            different.
            </summary>
            <returns>The number of rows of the specified <em>rowType</em> that are different.</returns>
            <param name="rowType">The type of rows to be for the returned count.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DifferencesSummary.DifferenceCount(RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType,RedGate.SQLDataCompare.Engine.FieldPair)">
            <summary>
                Returns the number of different fields of the specified
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType">RowType</see>
                and <paramref name="FieldPair">FieldPair</paramref>.
            </summary>
            <returns>
            The number of fields of the specified RowType and FieldPair that are
            different.
            </returns>
            <param name="rowType">The type of rows for the returned count.</param>
            <param name="fieldPair">The FieldPair for which you want the count.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.DifferencesSummary.DifferenceCount(RedGate.SQLDataCompare.Engine.FieldPair)">
            <summary>
                Returns the number of rows of the specified <paramref name="FieldPair"></paramref>
                that are different.
            </summary>
            <returns>
                The number of rows for the specified <paramref name="FieldPair"></paramref> that
                are different.
            </returns>
            <param name="fieldPair">The field for the count.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DifferencesSummary.Different">
            <summary>The number of rows that exist in both databases but are different.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DifferencesSummary.In2">
            <summary>The number of rows only in the first database.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DifferencesSummary.In1">
            <summary>The number of rows only in the second database.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.DifferencesSummary.Same">
            <summary>The number of rows that are the same in both databases.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.OptionDescriptionAttribute">
            <summary>Options used when comparing and synchronizing databases.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.OptionDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="friendlyName"></param>
            <param name="helpText"></param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.OptionDescriptionAttribute.FriendlyName">
            <summary>A friendly name.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.OptionDescriptionAttribute.HelpText">
            <summary>Some help text.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions">
            <summary>
            Class containing the three options enumerations for the three stages in data
            comparison.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.#ctor">
            <summary>
            Creates an options class and sets all of the options enumerations to
            <em>default</em>.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.#ctor(RedGate.SQLDataCompare.Engine.MappingOptions,RedGate.SQLDataCompare.Engine.ComparisonOptions,RedGate.SQLDataCompare.Engine.SqlOptions)">
            <summary>
            Creates an options class and sets all of the options enumerations to the parameters of the
            constructor.
            </summary>
            <param name="mappingOptions">Options to use when mapping the databases.</param>
            <param name="comparisonOptions">Options to use when comparing the databases.</param>
            <param name="sqlOptions">Options to use when generating the synchronization SQL script.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.GetAvailableMappingOptions">
            <summary>Returns a list of available options for mapping databases.</summary>
            <returns>A list of options.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.GetAvailableComparisonOptions">
            <summary>Returns a list of available options for comparing databases.</summary>
            <returns>A list of options.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.GetAvailableSqlOptions">
            <summary>
            Returns a list of available options for generating the synchronization SQL
            script.
            </summary>
            <returns>A list of options.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.PrepareString(RedGate.SQLDataCompare.Engine.MappingOptions,RedGate.SQLCompare.Engine.IDatabaseObject,System.Boolean)">
            <summary>
            Returns a string that is reduced to it's basic components for quick comparison.
            </summary>
            <param name="mappingOptions">Mapping options to use for string transformation.</param>
            <param name="obj1">Object whose name is to be prepared.</param>
            <param name="fullName">Use the FullyQualifiedName or just Name</param>
            <returns>string lowered, removed spaces, removed underscores, removed prefix according to settings.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Gets serialization information with all of the data needed to recreate an instance
                of the <see cref="T:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions"/> class.
            </summary>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.Clone">
            <summary>
            Creates a shallow copy of the options.
            </summary>
            <returns>A shallow copy of the options.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.MappingOptions">
            <summary>Options that must be set before the databases are mapped.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.ComparisonOptions">
            <summary>Options that must be set before the databases are compared.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.EngineDataCompareOptions.SqlOptions">
            <summary>Options that must be set before the SQL script is generated.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.MappingOptions">
            <summary>
            Options used when generating the mapping between two databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.Default">
            <summary>A set of defaults.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.IgnoreCase">
            <summary>
            Ignores the case of the object names in the two databases. For example,
            [dbo].[Widget] is considered to be the same as [dbo].[widget] when you select this
            option.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.IgnoreSpaces">
            <summary>
            Ignores the spaces in the object names in the two databases. For example,
            [dbo].[Widget Prices] is considered to be the same as [dbo].[WidgetPrices] when you
            select this option.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.IgnoreUnderscores">
            <summary>
            Ignores the underscores in the object names in the two databases. For example,
            [dbo].[Widget_Prices] is considered to be the same as [dbo].[WidgetPrices] when you
            select this option.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.MissingFrom2AsInclude">
            <summary>
            When the object does not exist in the second database, the Mapping status is set
            to <em>success</em> and include is set to <em>true</em>.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.IncludeTimestamps">
            <summary>
            Includes timestamp columns from the tables or views in the schema information for
            the database. Timestamp columns cannot be synchronized.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.IncludeIndexedViews">
            <summary>
            Includes indexed views in the schema information for the database. Views can be
            synchronized only if the referenced records are from a single table, and the referenced
            columns are simple (for example, they must not include identity columns or computed
            columns).
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.MappingOptions.IncludeIdentities">
            <summary>
            Includes identity columns from the tables or views in the schema information for
            the database. You cannot synchronize views if they include an identity column.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ComparisonOptions">
            <summary>
            Options used when comparing databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ComparisonOptions.Default">
            <summary>A set of defaults.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ComparisonOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ComparisonOptions.TrimTrailingSpaces">
            <summary>
            If two columns of data differ only by the number of spaces at the end of the
            string, SQL Data Compare considers the data to be identical. The trailing spaces are
            not included in the synchronization script. This option does not apply to CLR or
            variant columns.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ComparisonOptions.ForceBinaryCollation">
            <summary>
            If the comparison key is a string, this option forces a binary collation on all string sorting. When you use this option indexes are ignored.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ComparisonOptions.UseChecksumComparison">
            <summary>
            When you are comparing tables or views with a large volume of data that changes
            infrequently, if you set this option, a checksum is used to compare the data. If the
            checksums differ, the data is compared; if the checksums are the same, the data is not
            compared. On SQL Server 2000 the connected user must be a member of the db_owner role
            or the system administrator role. This option applies only to SQL Server 2000 or
            later.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SqlOptions">
            <summary>Options used when synchronizing databases.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.Default">
            <summary>A set of defaults.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.DisableTriggers">
            <summary>
            Disable, then re-enable, DML triggers on tables and views in the synchronization
            script.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.DisableKeys">
            <summary>
            Disable, then re-enable, foreign keys in the synchronization script. Note that in
            some circumstances foreign keys are dropped and recreated rather than disabled and
            re-enabled.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.DropConstraintsAndIndexes">
            <summary>
            Drop and recreate primary keys, indexes, and unique constraints in the
            synchronization script. If the primary key, index, or unique constraint is the
            comparison key, it cannot be dropped.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.OutputCommentHeader">
            <summary>
            Include the comment header in the synchronization script. The comment header
            contains information about the databases that you are comparing, and the version of SQL
            Data Compare.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.UseTransactions">
            <summary>
            Inserts BEGIN TRANSACTION at the beginning of the synchronization script and
            COMMIT TRANSACTION at the end of the synchronization script.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.TransportCLRBinary">
            <summary>
            In the synchronization script, SQL Data Compare can use the binary representation
            or the string representation (.ToString()) of the CLR column. Setting this option
            forces SQL Data Compare to use the binary representation in the synchronization script.
            The binary representations of the CLR columns must be the same.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.DDLTriggerDisable">
            <summary>Disable and then re-enable all DDL triggers in the synchronization script.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlOptions.OutputComments">
            <summary>
            Include the comments in the output script. The comments make it easier to locate items in the output.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.FieldMappingStatus">
            <summary>
            The result of the <see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/>.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.FieldMappingStatus.Success">
            <summary>
            Mapping success.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.FieldMappingStatus.UnableToCompare">
            <summary>
            Mapping succeeded but SQL Data Compare is still unable to compare the databases.
            This is usually because of type comparison failure.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.FieldMapping">
            <summary>
            Contains a mapping from a field in one table to a field in another table.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMapping.#ctor(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.Field,RedGate.SQLDataCompare.Engine.FieldMappingStatus)">
            <summary>Constructor. Calls the base constructor.</summary>
            <param name="obj1">The field in the first database.</param>
            <param name="obj2">The field in the second database.</param>
            <param name="status">The status of the mapping.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMapping.pset_ValidForMatching(System.Boolean)">
            <summary>
            This is needed internally for the packager.
            </summary>
            <param name="value">new valid for matching</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMapping.CompareTo(System.Object)">
            <summary>
            Sorts the FieldMappings by fully-qualified name in the first database; if null in
            the first database, sorts by fully-qualified name in the second database.
            </summary>
            <returns>
            Less than zero when this instance is less than the specified object; zero when
            this instance is equal to the specified object; greater then zero when this instance is
            greater than the specified object.
            </returns>
            <param name="obj">The object to be compared.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMapping.Clone">
            <summary>Creates a shallow copy of the field mapping.</summary>
            <returns>A shallow copy of the field mapping.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMapping.Obj1">
            <summary>
            Returns the field in the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMapping.Obj2">
            <summary>
            Returns the field in the second database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMapping.ValidForMatching">
            <summary>Specifies whether the FieldMapping can be used in a matching mapping.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMapping.Status">
            <summary>
            The status of the field mapping.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.FieldMappings">
            <summary>
            Holds mappings for fields in a table or view.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.FieldMappings.s_Resources">
            <summary>
            Resources for the Mappings classes.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.#ctor(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>The default constructor.</summary>
            <param name="parent">Table to which this FieldMappings class belongs.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.#ctor(RedGate.SQLDataCompare.Engine.TableMapping,RedGate.SQLDataCompare.Engine.FieldMappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="parent">Table to which this FieldMappings class belongs.</param>
            <param name="fieldMappings">The field mappings to copy.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.#ctor(RedGate.SQLDataCompare.Engine.TableMapping,RedGate.SQLDataCompare.Engine.FieldMappings,System.Boolean)">
            <summary>
            Shallow copy constructor for matching mappings.
            </summary>
            <param name="parent">Table to which this FieldMappings class belongs.</param>
            <param name="fieldMappings"><see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> to copy.</param>
            <param name="isMatching">true for matching mappings; false otherwise.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Join(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.Field)">
            <summary>
                Joins two fields in different databases, and returns the created mapping. The
                mapping may not have its status set as <em>Success;</em> see
                <see cref="M:RedGate.SQLDataCompare.Engine.FieldMappings.OnValidate(System.Object)"/> for possible exceptions.
            </summary>
            <returns>The created mapping.</returns>
            <param name="field1">The field in database one.</param>
            <param name="field2">The field in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.CreateMappings(RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is
            possible.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.ShouldInclude(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Joins two fields in the different databases, and returns the created mapping. The
            mapping may not have its status set as <em>Success</em> if the field types are
            incompatible.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">FieldMappings. Join must be called with Field arguments.</exception>
            <param name="obj1">The field in the first database.</param>
            <param name="obj2">The field in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.CanBeMapped(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.Field)">
            <summary>
            Returns <em>true</em> if the two fields can be mapped together because the types
            can be compared by the SQL Data Compare engine.
            </summary>
            <returns><em>true</em> if the types are comparable; otherwise <em>false</em>.</returns>
            <param name="field1">The field from the first database.</param>
            <param name="field2">The field from the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Add(RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>Adds a <see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/> to the end of the FieldMappings collection.</summary>
            <returns>The FieldMappings index at which the FieldMapping has been added.</returns>
            <param name="mapping">The FieldMapping to be added to the end of the FieldMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Remove(RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>
                Removes the first occurrence of a specified <see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/> from
                the <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection.
            </summary>
            <param name="mapping">The FieldMapping to remove from the FieldMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Contains(RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>
                Determines whether the <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection contains a
                specified FieldMapping.
            </summary>
            <returns>
            	<em>true</em> if the FieldMappings collection contains the specified
            FieldMapping; otherwise, <em>false</em>.
            </returns>
            <param name="mapping">The FieldMapping to locate in the FieldMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.IndexOf(RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>
                Searches for the specified <see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/>, and returns the
                zero-based index of the first occurrence within the
                <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection.
            </summary>
            <returns>
                If found, the zero-based index of the first occurrence of the specified
                FieldMapping within the <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection; otherwise, -1.
            </returns>
            <param name="mapping">
                The <see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/> to locate in the
                <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.OnValidate(System.Object)">
            <summary>
            Performs additionl custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> only supports <see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/> objects.</exception>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLDataCompare.Engine.FieldMapping"/> not valid for <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.MatchingMappings"/></exception>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.CopyTo(RedGate.SQLDataCompare.Engine.FieldMapping[],System.Int32)">
            <summary>
                Copies the entire <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection to a compatible
                one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="tables">
                The one-dimensional array that is the destination of the elements copied from the
                <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection. The array must have zero-based
                indexing.
            </param>
            <param name="index">The zero-based index in the target array at which copying is to begin.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Clear">
            <summary>Removes all objects from the FieldMappings instance.</summary>
            <remarks>
                If this FieldMapping is the matching mapping, it will also set the
                <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.IndexMapping"/> on the parent table class to null.
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldMappings.Insert(System.Int32,RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException" caption="">Always throws %NotImplementedException%</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMappings.Options">
            <summary>The MappingOptions currently used for mappings.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMappings.Item(System.Int32)">
            <summary>Gets the FieldMapping at the specified index.</summary>
            <param name="index">The zero-based index of the FieldMapping to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMappings.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the FieldMapping to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldMappings.SyncRoot">
            <summary>
                Gets an object that can be used to synchronize access to the
                <see cref="T:RedGate.SQLDataCompare.Engine.FieldMappings"/> collection.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.FieldPair">
            <summary>
                Field definition used in the
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see>
                class.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Gets serialization information with all of the data required to recreate an
                instance of this <see cref="T:RedGate.SQLDataCompare.Engine.FieldPair"/>.
            </summary>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.Field(System.Boolean)">
            <summary>
            A convenience function for easy access to the first or second field in a
            FieldPair. Returns the requested field, or the field in the other database if the
            requested field is null.
            </summary>
            <returns>
            The field for the requested database; if this is null, the field for the other
            database.
            </returns>
            <param name="onTwo">
            	<em>true</em> for the second database; <em>false</em> for the first
            database.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.EscapeFieldName(System.String)">
            <summary>
            Non caching function for escaping field names.
            </summary>
            <param name="fieldName">Field name to be escaped.</param>
            <returns>Escaped field name.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.EscapedFieldName(System.Boolean)">
            <summary>
            A convenience function that escapes the field name from the databases. Caches the
            result for speed improvement.
            </summary>
            <returns>
            The escaped field name for the requested database; if null, the escaped field
            name for the other database.
            </returns>
            <param name="onTwo">
            	<em>true</em> for the second database; <em>false</em> for the first
            database.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.Type(System.Boolean)">
            <summary>
            A convenience function for easy access to the first or second FieldType in a
            FieldPair. Returns the requested FieldType, or the FieldType for the other database if
            the requested FieldType is null.
            </summary>
            <returns>
            The FieldType for the field in the requested database; if null, the FieldType for
            the field in the other database.
            </returns>
            <param name="onTwo">
            	<em>true</em> for the second database; <em>false</em> for the first
            database.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.SqlType(System.Boolean)">
            <summary>
            A convenience function for easy access to the first or second SqlType in a
            FieldPair. Returns the requested SqlType, or the other SqlType if the requested field
            is null. Also de-references user-defined types.
            </summary>
            <returns>
            The SqlType for the field in the requested database; if null, the SqlType for the
            field in the other database.
            </returns>
            <param name="onTwo">
            	<em>true</em> for the second database; <em>false</em> for the first
            database.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPair.IsUnicode(System.Boolean)">
            <summary>
            Returns <em>true</em> if the Field is Unicode (NChar, NText, NVarChar, XML,
            CLR).
            </summary>
            <returns><em>true</em> if the Field is Unicode; otherwise, <em>false.</em></returns>
            <param name="onTwo">
            	<em>true</em> for the second database; <em>false</em> for the first
            database.
            </param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.Field1">
            <summary>
            The field from the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.Field2">
            <summary>
            The field from the second database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.OrdinalInResults1">
            <summary>
                The ordinal in the
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see> for
                the field in the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.OrdinalInResults2">
            <summary>
                The ordinal in the
                <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see> for
                the field in the second database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.Type1">
            <summary>
                The <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see>
                type of the field in the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.Type2">
            <summary>
                The <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store">ResultsStore</see>
                type of the field in the second database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.Matching">
            <summary><em>True</em> if the FieldPair is used to match the databases.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.SqlType1">
            <summary>
            The SqlType of the field in the first database, or the underlying SqlType of the
            User Defined Type of the field.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPair.SqlType2">
            <summary>
            The SqlType of the field in the second database, or the SqlType of the User
            Defined Type of the field.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.FieldPairs">
            <summary>
            A collection of <see cref="T:RedGate.SQLDataCompare.Engine.FieldPair"/> objects.
            </summary>
            
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FieldPairs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Gets serialization information with all of the data needed to recreate an instance
                of the <see cref="T:RedGate.SQLDataCompare.Engine.FieldPairs"/> collection.
            </summary>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPairs.Item(System.Int32)">
            <summary>Gets the <see cref="T:RedGate.SQLDataCompare.Engine.FieldPair"/> at the specified index.</summary>
            <param name="index">The zero-based index of the FieldPair to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPairs.Item(System.String)">
            <summary>
            Gets the <see cref="T:RedGate.SQLDataCompare.Engine.FieldPair"/> at the specified index.
            </summary>
            <param name="name">The string-based index of the FieldPair to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FieldPairs.OrdinalCount">
            <summary>
            Returns the number of unique field ordinals in the small fields collection.
            </summary>
            <returns>number of ordinals.</returns>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.FileStoreTypes">
            <summary>
            Used internally for the results store for the information contained in the
            file.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.FileStoreTypes.Add(RedGate.SQLDataCompare.Engine.ResultsStore.FieldType)">
            <summary>
            Adds the field type to the results store list of types.
            </summary>
            <param name="value">The FieldType for entry in the results store.</param>
            <returns>index of created entry.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.FileStoreTypes.Item(System.Int32)">
            <summary>
            Gets a the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.FieldType"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="T:RedGate.SQLToolkit.Engine.Licensing.frmRegistration">
            <summary>
            Summary description for frmRegistration.
            </summary>
        </member>
        <member name="F:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.SQLToolkit.Engine.Licensing.frmRegistration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.IndexMapping">
            <summary>
            Contains a mapping between the indexes in the different databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMapping.#ctor(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Index)">
            <summary>Contructor. Calls the base constructor.</summary>
            <param name="obj1">The index in the first database.</param>
            <param name="obj2">The index in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMapping.#ctor(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">IndexMapping to copy.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMapping.ToString">
            <summary>
            Returns the index name from the first database, or if null, from the second
            database.
            </summary>
            <returns>The name of the index.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMapping.Obj1">
            <summary>
            Returns the index from the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMapping.Obj2">
            <summary>
            Returns the index from the second database.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.IndexMappings">
            <summary>
            Holds mappings of indexes. The indexes must be PrimaryKey, Unique, or
            UniqueConstraint to be included. The names of the indexes are not used for the
            mapping.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.#ctor(RedGate.SQLDataCompare.Engine.IndexMappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="indexMappings">The IndexMappings to copy.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.#ctor(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>Creates an IndexMapping.</summary>
            <param name="parentTable">The parent table mapping.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.ShouldInclude(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.EqualScore(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            They are equal when both indexes have the same number of fields and the fields
            are mapped in the FieldMappings for the parent table, and the fields are ordered
            in the same way. If the names of the indexes are identical then 100 is returned
            otherwise 99 is returned. In all cases where the fields are not the same in any way
            0 is returned.
            </summary>
            <param name="obj1">first index.</param>
            <param name="obj2">second index.</param>
            <returns>100 when the indexes can be mapped and have the same name, 99 when the indexes can be mapped
            and have different names, 0 otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Join(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Index)">
            <summary>
                Joins two indexes that are in different databases. Returns the created mapping. The
                mapping may not have its Include property set to <em>true</em> if it cannot be used
                to compare the databases. If the indexes are both primary keys, the parent table
                will have <see cref="M:RedGate.SQLDataCompare.Engine.TableMapping.UseIndexForMapping(RedGate.SQLDataCompare.Engine.IndexMapping)">UseIndexForMapping</see>
                called for this index.
            </summary>
            <returns>The created mapping.</returns>
            <param name="index1">Index from the first database.</param>
            <param name="index2">Index from the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.CreateMappings(RedGate.SQLCompare.Engine.Indexes,RedGate.SQLCompare.Engine.Indexes)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is
            possible.
            </summary>
            <param name="in1">A list of the objects in the first database, or null.</param>
            <param name="in2">A list of the objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Joins two indexes in different databases. Returns the created mapping. The
            mapping created may not have its status set as Success. If the indexes are both primary
            keys, the parent table will have UseIndexForMapping called for this index.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException">IndexMappings.Join must called with Field arguments.</exception>
            <param name="obj1">The index from the first database.</param>
            <param name="obj2">The index from the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Add(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>Adds an <see cref="T:RedGate.SQLDataCompare.Engine.IndexMapping"/> to the end of the IndexMappings collection.</summary>
            <returns>The IndexMappings index at which the IndexMapping has been added.</returns>
            <param name="mapping">The IndexMapping to be added to the end of the IndexMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Remove(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
                Removes the first occurrence of a specific <see cref="T:RedGate.SQLDataCompare.Engine.IndexMapping"/> from the
                <see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/> collection.
            </summary>
            <param name="mapping">The IndexMapping to remove from the IndexMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Contains(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
                Determines whether the <see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/> collection contains a
                specified IndexMapping.
            </summary>
            <returns>
            	<em>true</em> if the IndexMappings collection contains the specified
            IndexMapping; otherwise, <em>false</em>.
            </returns>
            <param name="mapping">The IndexMapping to locate in the IndexMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.IndexOf(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
                Searches for the specified <see cref="T:RedGate.SQLDataCompare.Engine.IndexMapping"/> and returns the
                zero-based index of the first occurrence within the
                <see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/> collection.
            </summary>
            <returns>
            If found, the zero-based index of the first occurrence of the IndexMapping within
            the IndexMappings collection; otherwise, -1.
            </returns>
            <param name="mapping">The IndexMapping to locate in the IndexMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.OnValidate(System.Object)">
            <summary>
            Performs additionl custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/> only supports <see cref="T:RedGate.SQLDataCompare.Engine.IndexMapping"/> objects.</exception>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.CopyTo(RedGate.SQLDataCompare.Engine.IndexMapping[],System.Int32)">
            <summary>
                Copies the <see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/> collection to a compatible
                one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="tables">
                The one-dimensional array that is the destination of the elements copied from
                <see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/>. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying is to begin.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Clear">
            <summary>Removes all objects from the IndexMappings instance.</summary>
            <remarks>
                If there is an index mapping, also sets the
                <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.IndexMapping"/> on the parent table class to null, and
                clears the <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.MatchingMappings"/>.
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.IndexMappings.Insert(System.Int32,RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException" caption="">Always throws %NotImplementedException%.</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMappings.PrimaryKey">
            <summary>
            Contains a reference to the mapping that is identified as a usable primary key
            shared on both tables; null if no usable primary key is found.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMappings.Options">
            <summary>The <see cref="T:RedGate.SQLDataCompare.Engine.MappingOptions">MappingOptions</see> currently used for mappings.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLDataCompare.Engine.IndexMapping"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the IndexMapping to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMappings.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the mapping to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.IndexMappings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:RedGate.SQLDataCompare.Engine.IndexMappings"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.Project">
            <summary>A SQL Data Compare project.</summary>
            <remarks>This class provides an easy way to load and save comparison settings.</remarks>
            <example>
                Saving a project to, and loading from, disk 
                <code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using Project = RedGate.SQLDataCompare.Engine.Project;
             
            namespace SQLDataCompareCodeSnippets
            {
                /// &lt;summary&gt;
                /// Summary description for ProjectExample.
                /// &lt;/summary&gt;
                public class ProjectExample
                {
                    public void RunExample()
                    {
                        Project project=new Project();
                             
                        project.DataSource1.DatabaseName = "WidgetDev";            
                        project.DataSource2.DatabaseName = "WidgetLive";            
                        project.SessionSettings = SessionSettings.Default;
                        project.Options = new EngineDataCompareOptions(MappingOptions.Default,ComparisonOptions.Default, SqlOptions.Default);
                        Console.WriteLine("Saving project");            
                        project.SaveToDisk(@"c:\testproject.sdc");
                
                        //load up the project
                        Project project2=Project.LoadFromDisk(@"c:\testproject.sdc");
                        Console.WriteLine("Project loaded");
                
                        //get the two databases
                        Database db1= new Database();
                        Database db2= new Database();
                        SchemaMappings mappings = new SchemaMappings();
                
                        //Should check if this is true
                        LiveDatabaseSource liveDb = project2.DataSource1 as LiveDatabaseSource;
                        db1.RegisterForDataCompare(liveDb.ToConnectionProperties());
             
                        //Should check if this is true
                        liveDb = project2.DataSource2 as LiveDatabaseSource;
                        db2.RegisterForDataCompare(liveDb.ToConnectionProperties());
                
                        mappings.Options = project2.Options;
                        mappings.CreateMappings(db1, db2);
                 
                        //Disable any mappings here that you may want....
                        ComparisonSession session=new ComparisonSession();
                        session.Options = project2.Options;
                        session.CompareDatabases(db1, db2, mappings);
                
                        Console.WriteLine("Comparison run");
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On
            
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports Project = RedGate.SQLDataCompare.Engine.Project
             
            Public Class ProjectExample
                Sub RunExample()
                    Dim project As New Project
             
                    project.DataSource1.DatabaseName = "WidgetDev"
                    project.DataSource2.DatabaseName = "WidgetLive"
                    project.SessionSettings = SessionSettings.Default
                    project.Options = New EngineDataCompareOptions(MappingOptions.Default, ComparisonOptions.Default, SqlOptions.Default)
                    Console.WriteLine("Saving project")
                    project.SaveToDisk("c:\testproject.sdc")
             
                    'load up the project
                    Dim project2 As Project = project.LoadFromDisk("c:\testproject.sdc")
                    Console.WriteLine("Project loaded")
             
                    'get the two databases
                    Dim db1 As New Database
                    Dim db2 As New Database
                    Dim mappings As New SchemaMappings
             
                    'Should check if this is true
                    Dim livedb As LiveDatabaseSource = DirectCast(project2.DataSource1, LiveDatabaseSource)
                    db1.RegisterForDataCompare(livedb.ToConnectionProperties())
             
                    'Should check if this is true
                    livedb = DirectCast(project2.DataSource2, LiveDatabaseSource)
                    db2.RegisterForDataCompare(livedb.ToConnectionProperties())
             
                    mappings.Options = project2.Options
                    mappings.CreateMappings(db1, db2)
             
                    'Disable any mappings here that you may want....
                    Dim session As New ComparisonSession
                    session.Options = project2.Options
                    session.CompareDatabases(db1, db2, mappings)
             
                    Console.WriteLine("Comparison run")
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.ToString">
            <summary>Returns a string representation of the project.</summary>
            <returns>Returns a string representation of the project.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.Deserialize(System.Int32,RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Support for serialization.</summary>
            <returns><em>true</em> on success.</returns>
            <param name="nVersionId">The version of the project that is being de-serialized.</param>
            <param name="formatter">The formatter to read from.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.Serialize(RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>Support for serialization.</summary>
            <param name="formatter">The formatter to write to.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.SaveToDisk(System.String)">
            <summary>Saves the project to disk.</summary>
            <param name="fileName">The file name for the project.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.LoadFromDisk(System.String)">
            <summary>
            Loads a project from disk. If the file cannot be found in the current folder, SQL
            Data Compare looks in the ProjectFolder for the file.
            </summary>
            <returns>A Project object.</returns>
            <param name="fileName">The file name of the project.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.DiscardClone">
            <summary>Discards a clone.</summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.SynchronizeClone">
            <summary>Synchronizes the instance with its clone.</summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.Project.DoSave(System.String)">
            <summary>
            Actually saves the file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.UserNote">
            <summary>A note relating to this project.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.IsNewProject">
            <summary><em>True</em> if the project has not yet been saved.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.Version">
            <summary>The current project version. Used during serialization.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.Direction">
            <summary>
            The direction in which the project migrates the changes to synchronize the
            databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.SessionSettings">
            <summary>The session settings used in the project comparison.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.DataSource1">
            <summary>The connection properties for the first database being compared.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.DataSource2">
            <summary>The connection properties for the second database being compared.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.Name">
            <summary>The name of the project.</summary>
            <remarks>The file name leaf, or <em>New Project</em>.</remarks>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.FileName">
            <summary>The file name of the project if it has been saved.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.LastCompared">
            <summary>The time at which the project was last compared.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.Options">
            <summary>The options used when running the engine.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.Clone">
            <summary>Returns a clone of the current project.</summary>
            <remarks>This is used for holding softstate inside the UI.</remarks>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.Project.SelectTableActions">
            <summary>Used to store user actions.</summary>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ProjectComparer">
            <summary>Compares two projects.</summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ProjectComparer.Compare(System.Object,System.Object)">
            <summary>Compares two projects.</summary>
            <returns>
            -1 if <em>x</em> is less than <em>y</em>, 0 if <em>x</em> and <em>y</em> are
            equal, 1 if <em>x</em> is greater than y.
            </returns>
            <param name="x">The first project.</param>
            <param name="y">The second project.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SchemaMapping">
            <summary>Contains a mapping between the schema, user, or role in two databases.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMapping.#ctor(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>Contructor. Calls the base constructor.</summary>
            <param name="obj1">The index in the first database.</param>
            <param name="obj2">The index in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMapping.#ctor(RedGate.SQLDataCompare.Engine.SchemaMapping)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">SchemaMapping to copy.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMapping.Obj1">
            <summary>Returns the schema, user, or role from the first database.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMapping.Obj2">
            <summary>Returns the schema, user, or role from the second database.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SchemaMappings">
            <summary>
            Holds mappings for schemas, users, or roles. Uses the database objects to create
            the mappings for the views and the tables from the two databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SchemaMappings.m_db1">
            <summary>
            The first database object.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SchemaMappings.m_db2">
            <summary>
            The second database object.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SchemaMappings.m_TableMappings">
            <summary>
            The table mappings is for all schemas, users or roles
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.#ctor(RedGate.SQLDataCompare.Engine.SchemaMappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="schemaMappings">The <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> to copy.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.#ctor">
            <summary>The default constructor.</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.FromOne(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns the object from the second database that is mapped to the specified
            object in the first database.
            </summary>
            <returns>
            The corresponding mapped object in the second database; null if no mapping
            exists.
            </returns>
            <param name="in1">The mapped object in the first database. Not null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.FromTwo(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns the object from the first database that is mapped to the specified object
            in the second database.
            </summary>
            <returns>
            The corresponding mapped object in the first database; null if no mapping
            exists.
            </returns>
            <param name="in2">The mapped object in the second database. Not null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.CreateMappings(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates a mapping for each schema, user, or role in the database where such a
            mapping is possible.
            </summary>
            <param name="db1">The first database, or null.</param>
            <param name="db2">The second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.Schema)">
            <summary>Joins two schemas, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="schema1">The schema in the first database.</param>
            <param name="schema2">The schema in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.User)">
            <summary>Joins two users, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="user1">The user in database one.</param>
            <param name="user2">The user in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.Role)">
            <summary>Joins two roles, attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="role1">The role in database one.</param>
            <param name="role2">The role in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.User)">
            <summary>Joins a user and a schema, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="schema1">The schema in database one.</param>
            <param name="user2">The user in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.Role)">
            <summary>Joins a role and a schema, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="schema1">The schema in database one.</param>
            <param name="role2">The role in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.Schema)">
            <summary>Joins a user and a schema, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="user1">The user in database one.</param>
            <param name="schema2">The schema in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.Role)">
            <summary>Joins a user and a role, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="user1">The user in database one.</param>
            <param name="role2">The role in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.User)">
            <summary>Joins a user and role, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="role1">Role in database one.</param>
            <param name="user2">User in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.Schema)">
            <summary>Joins a role and a schema, and attempts to map their tables and views.</summary>
            <returns>The created mapping.</returns>
            <param name="role1">The role in database one.</param>
            <param name="schema2">The schema in database two.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.ShouldInclude(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Joins two schemas, two users, or a schema and a user, and attempts to map their
            tables and views.
            </summary>
            <returns>the created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">SchemaMappings. Join must be called with Schema or Users arguments.</exception>
            <param name="obj1">The schema or user in the first database.</param>
            <param name="obj2">The schema or user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Add(RedGate.SQLDataCompare.Engine.SchemaMapping)">
            <summary>
                Adds a <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMapping"/> to the end of the
                <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> collection.
            </summary>
            <returns>The SchemaMappings index at which the SchemaMapping is added.</returns>
            <param name="mapping">The SchemaMapping to be added to the end of the SchemaMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Remove(RedGate.SQLDataCompare.Engine.SchemaMapping)">
            <summary>
                Removes the first occurrence of a specified <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMapping"/> from
                the <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> collection.
            </summary>
            <param name="mapping">The SchemaMapping to be removed from the SchemaMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Contains(RedGate.SQLDataCompare.Engine.SchemaMapping)">
            <summary>
                Determines whether the <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> collection contains a
                specified SchemaMapping.
            </summary>
            <returns>
            	<em>true</em> if the SchemaMappings collection contains the specified value;
            otherwise, <em>false</em>.
            </returns>
            <param name="mapping">The SchemaMapping to locate in the SchemaMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.IndexOf(RedGate.SQLDataCompare.Engine.SchemaMapping)">
            <summary>
                Searches for the specified <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMapping"/> and returns the
                zero-based index of the first occurrence within the
                <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> collection.
            </summary>
            <returns>
            If found, the zero-based index of the first occurrence of the specified
            SchemaMapping in the SchemaMappings collection; otherwise, -1.
            </returns>
            <param name="mapping">The SchemaMapping to locate in the SchemaMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.OnValidate(System.Object)">
            <summary>
            Performs additionl custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> only supports <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMapping"/> objects.</exception>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.CopyTo(RedGate.SQLDataCompare.Engine.SchemaMapping[],System.Int32)">
            <summary>
                Copies the <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/> collection to a compatible
                one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="tables">
            The one-dimensional array that is the destination of the elements copied from the
            SchemaMappings collection. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SchemaMappings.Insert(System.Int32,RedGate.SQLDataCompare.Engine.SchemaMapping)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException" caption="">Always throws %NotImplementedException%.</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMappings.TableMappings">
            <summary>
            Returns the table mappings for the databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMappings.Options">
            <summary>
                The <see cref="T:RedGate.SQLDataCompare.Engine.MappingOptions">MappingOptions</see> currently used for schema
                mappings.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMapping"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the SchemaMapping to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMappings.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the SchemaMapping to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SchemaMappings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:RedGate.SQLDataCompare.Engine.SchemaMappings"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SessionSettings">
            <summary>
            Settings for comparing objects.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SessionSettings.IncludeIdenticalRecords">
            <summary>
            Include records that are the same in both databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SessionSettings.IncludeDifferentRecords">
            <summary>Include records that exist in both databases and are different.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SessionSettings.IncludeRecordsInOne">
            <summary>Include records that exist in the first database, but not the second.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SessionSettings.IncludeRecordsInTwo">
            <summary>Include records that exist in the second database, but not the first.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SessionSettings.Default">
            <summary>The default setting.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SparseMatrix">
            <summary>
            	<para>This is the sparse matrix used to calculate dependencies, this is actually a
                hashtables of hashtables so that I can easily retrieve the dependents later when
                creating the appropriate order.</para>
            	<para>There is also an arraylist of id pairs stored, this is to allow a dynamic
                iterator so that items can be added to the hashtable and list whilst looping
                through the list.</para>.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SparseMatrix.m_Matrix">
            <summary>
            This is a hashtable for each parent which contains a hashtable containing the id
            as the key for each of it's dependents.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SparseMatrix.m_List">
            <summary>The array containing a composite key for each id</summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SparseMatrix.GetDependents(System.Int32)">
            <summary>Returns the hashtable containing the ids of all the dependent objects</summary>
            <param name="parent">The id of the source object.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SparseMatrix.MakeKey(System.Int32,System.Int32)">
            <summary>
            Creates a composite key from the two ids for storing in the
            <see cref="F:RedGate.SQLDataCompare.Engine.SparseMatrix.m_List">List Field</see>.
            </summary>
            <returns>A ulong made of the two ids.</returns>
            <param name="parent">The parent id.</param>
            <param name="child">The child id.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SynchronizationRecord">
            <summary>
            A record to be included in a synchronization. This is used by the script generation routines
            to confirm the inclusion of a record. Passed a parameter to the <see cref="T:RedGate.SQLDataCompare.Engine.SelectionDelegate"/>.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SynchronizationRecord.TableName">
            <summary>The name of the table to which the record belongs.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SynchronizationRecord.ResultsStoreType">
            <summary>
            The <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Row.RowType"/> of the record.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SynchronizationRecord.Bookmark">
            <summary>
            The bookmark in the <see cref="T:RedGate.SQLDataCompare.Engine.ResultsStore.Store"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SelectionDelegate">
            <summary>
            The delegate called to indicate whether a record should be included in the
            synchronization SQL script.
            </summary>
            <value>true if the record is to be included; false otherwise.</value>
            <param name="synchronizationRecord">The record to include.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SqlProvider">
            <summary>
            The provider for access to SQL Server databases.
            </summary>
            <remarks>
                Use %GetMigrationSQL(ComparisonSession, System.Boolean)% to get an
                <see cref="T:RedGate.SQL.Shared.ExecutionBlock"/> containing the SQL script to migrate data between
                two databases. It also provides helper methods used internally by SQL Data Compare.
            </remarks>
            <example>
                See <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession"/>for code samples on comparing data See
                <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,System.Boolean)"/>for code
                samples on synchronizing data.
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.Reset">
            <summary>
            Performs a reset of the member variables.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.CancelOperation">
            <summary>
            Cancels the current operation.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.OnStatus(RedGate.SQL.Shared.StatusEventArgs)">
            <summary>
            Fires the Status event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetRecordCount(System.Object,System.String)">
            <summary>
            Gets the number of records given a connection and a table name.
            </summary>
            <remarks>
            This is for internal use by SQL Data Compare.
            </remarks>
            <exclude/>
            <excludetoc/>
            <param name="tableName">The name of the table.</param>
            <param name="connection">Open connection to the database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetRecordCount(System.Data.SqlClient.SqlConnection,System.Collections.ArrayList)">
            <summary>
            Gets the approximate number of records in a list of table names.
            </summary>
            <remarks>
            This is for internal use by SQL Data Compare.
            </remarks>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetDependencyOrder(RedGate.SQLDataCompare.Engine.ComparisonSession,System.Boolean)">
            <summary>
            This is going to be slooooooow, O(n^2), it creates a hashtable of hashtables for
            each transitive dependency then using this it creates a list in reverse order for updating data.
            </summary>
            <param name="session">The comparison session that needs sorting out.</param>
            <param name="runOnTwo">true if we're running on the second db.</param>
            <returns>A list of the selected tabledifferences in the order to script them.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,RedGate.SQLDataCompare.Engine.TableDifference,System.Boolean)">
            <summary>Gets information about the SQL script for synchronizing a single table.</summary>
            <remarks>
            See <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,System.Boolean)"/> for more information.
            </remarks>
            <returns>An ExecutionBlock containing the SQL code to run.</returns>
            <param name="session">
                The <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession">ComparisonSession</see> used to compare the
                databases.
            </param>
            <param name="tableDifference">The table for which the the SQL script is to be retrieved.</param>
            <param name="runOnTwo"><em>true</em> if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,RedGate.SQLDataCompare.Engine.TableDifference,RedGate.SQLDataCompare.Engine.SelectionDelegate,System.Boolean)">
            <summary>Gets information about the SQL script for synchronizing a single table.</summary>
            <remarks>
            See <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,System.Boolean)"/> for more information.
            </remarks>
            <returns>An ExecutionBlock containing the SQL code to run.</returns>
            <param name="session">
                The <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession">ComparisonSession</see> used to compare the
                databases.
            </param>
            <param name="tableDifference">The table for which the the SQL script is to be retrieved.</param>
            <param name="select">
            The selection delegate used to include specific records in the
            synchronization.
            </param>
            <param name="runOnTwo"><em>true</em> if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,System.Boolean)">
            <summary>Gets information about the SQL script for synchronizing multiple tables.</summary>
            <returns>An ExecutionBlock containing the SQL code to run.</returns>
            <remarks>
                The <see cref="P:RedGate.SQLDataCompare.Engine.TableDifference.SqlSynchronization">Selected</see> property must be
                set on all the <see cref="T:RedGate.SQLDataCompare.Engine.TableDifference">TableDifferences</see> to be included in
                the SQL script.
            </remarks>
            <remarks>The Messages and Warnings properties will be available</remarks>
            <example>
                This example shows how to get and run the SQL script to synchronize two databases. 
                <code lang="CS">
            using System;
            using RedGate.SQL.Shared;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
             
            namespace SQLDataCompareCodeSnippets
            {
                public class SqlProviderExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
                
                        db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                        db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));
                
                        // Create the mappings between the two databases
                        TableMappings mappings = new TableMappings();
                        mappings.CreateMappings(db1.Tables, db2.Tables);
                
                        using (ComparisonSession session=new ComparisonSession())
                        {
                            session.CompareDatabases(db1, db2, mappings);
                
                            // now get the ExecutionBlock containing the SQL
                            // we want to run this on WidgetLive so we pass on true as the second parameter
                            SqlProvider provider=new SqlProvider();            
                            ExecutionBlock block;
                            try
                            {
                                block = provider.GetMigrationSQL(session, true);
                
                                Console.WriteLine("The synchronization SQL contains {0} lines in {1} batches", block.LineCount, block.BatchCount);
                
                                // if the ExecutionBlock was very large this could cause memory problems
                                Console.WriteLine("The SQL to be run is:");
                                Console.WriteLine(block.GetString());
                
                                // we can access the SQL in a memory efficient manner by accessing the underlying stream
                                // FileStream stream=block.GetFileStream();
                
                                // run the SQL ( commented out by default )
                                // BlockExecutor executor = new BlockExecutor();
                                // executor.ExecuteBlock(block, ".", "WidgetLive");
                            }
                            finally
                            {
                                block = provider.Block;
                                if (block != null)
                                {
                                    block.Dispose();    // dispose of the objects to delete temporary files
                                }
                            }
                        }
                        db1.Dispose();
                        db2.Dispose();
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On
            
            Imports RedGate.SQL.Shared
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
             
            Class SqlProviderExample
                Sub RunExample()
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    'create an intersection of the tables
                    Dim mappings As New TableMappings
                    mappings.CreateMappings(db1.Tables, db2.Tables)
             
                    'compare the databases
                    Dim session As New ComparisonSession
                    session.CompareDatabases(db1, db2, mappings)
             
                    'now get the ExecutionBlock containing the SQL
                    'we want to run this on WidgetLive so we pass on true as the second parameter
                    Dim provider As New SqlProvider
                    Dim block As ExecutionBlock
                    Try
                        block = provider.GetMigrationSQL(session, True)
             
                        Console.WriteLine("The synchronization SQL contains {0} lines in {1} batches", block.LineCount, block.BatchCount)
             
                        'if the ExecutionBlock was very large this could cause memory problems
                        Console.WriteLine("The SQL to be run is:")
                        Console.WriteLine(block.GetString())
             
                        'we can access the SQL in a memory efficient manner by accessing the underlying stream
                        'Dim stream As FileStream=block.GetFileStream()
             
                        'run the SQL ( commented out by default )
             
                        'Dim executor As RedGate.SQL.Shared.BlockExecutor = New BlockExecutor
                        'executor.ExecuteBlock(block, ".", "WidgetLive")
                    Finally
                        block = provider.Block
                        If (Typeof block Is ExecutionBlock) Then
                            block.Dispose()            'dispose of the objects to delete temporary files    
                        End If
                    End Try
             
                    'dispose of the objects to delete temporary files
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
            <exception cref="T:RedGate.SQLDataCompare.Engine.SqlProviderException" caption="">
            If attempting to migrate data from a table with no primary
            key, unique index, or unique constraint defined on it, which means that rows cannot
            be uniquely identified.
            </exception>
            <param name="session">
                The <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession">ComparisonSession</see> used to compare the
                databases.
            </param>
            <param name="runOnTwo"><em>true</em> if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,RedGate.SQLDataCompare.Engine.SelectionDelegate,System.Boolean)">
            <summary>Gets information about the SQL script for synchronizing multiple tables.</summary>
            <returns>An ExecutionBlock containing the SQL code to run.</returns>
            <remarks>
            See <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,System.Boolean)"/> for more information.
            </remarks>
            <exception cref="T:RedGate.SQLDataCompare.Engine.SqlProviderException" caption="">
            If attempting to migrate data from a table with no primary
            key, unique index, or unique constraint defined on it, which means that rows cannot
            be uniquely identified.
            </exception>
            <param name="session">
                The <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession">ComparisonSession</see> used to compare the
                databases.
            </param>
            <param name="select">
            The selection delegate used to include specific records in the
            synchronization.
            </param>
            <param name="runOnTwo"><em>true</em> if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.AddValueToString(System.Text.StringBuilder,System.Object,RedGate.SQLDataCompare.Engine.FieldPair,System.Boolean)">
            <summary>
            Adds the value to the values sql, if it's a string > 4000 chars or 8000 chars for
            ASCII only the first 4000 characters will be added and the function will return true.
            If it's a blob then the first 8000 bytes will be output and the function will return true.
            </summary>
            <param name="values">SQL which the value is appended to.</param>
            <param name="value">Value of the object ( beware of large strings or blobs ).</param>
            <param name="fieldPair">Type of the parameter to be targeted.</param>
            <param name="runOnTwo">true if running on the second database, false otherwise.</param>
            <returns>true if this value will need extra SQL to update successfully, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.AddLargeSQL(System.Object,RedGate.SQLDataCompare.Engine.FieldPair,System.String,RedGate.SQLDataCompare.Engine.FieldPairs,RedGate.SQLDataCompare.Engine.ResultsStore.Row,System.Boolean,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Adds the large sql to the Execution block for the row and field specified.
            </summary>
            <param name="value">Value to be added apart from the first 'start' characters.</param>
            <param name="fieldPair">Field of the value that is to be added.</param>
            <param name="tableName">name of the table to create the SQL statement.</param>
            <param name="fieldPairs">small fields of the table to create the WHERE clause.</param>
            <param name="row">row value information to create the WHERE clause.</param>
            <param name="runOnTwo">is the sql run on the second database or not needed to create the SQL statement.</param>
            <param name="whereStrings">the strings to create the where clause quicker.</param>
            <param name="repeatedKeys">does the results store have repeated comparison keys.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProvider.ExecEscapeSQL(System.String,System.Boolean)">
            <summary>
            This will take a SQL statement and wrap it up in an EXEC(N'sq'+N'l') call if it's
            greater than 4000 characters.
            </summary>
            <param name="sql">sql string to be escaped.</param>
            <param name="needPtrDeclaration">true if you need the @pv delcaration</param>
            <returns>valid sql.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlProvider.Options">
            <summary>The options to use when synchronizing the databases.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlProvider.Status">
            <summary>
            The event handler for status events.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlProvider.Messages">
            <summary>Informal messages about the contents of the created SQL script.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlProvider.Warnings">
            <summary>Warnings about the created SQL script.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlProvider.Block">
            <summary>
            The last execution block returned by <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL(RedGate.SQLDataCompare.Engine.ComparisonSession,RedGate.SQLDataCompare.Engine.TableDifference,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SqlProviderException">
            <summary>
                Exception thrown by <see cref="T:RedGate.SQLDataCompare.Engine.SqlProvider"/> when it encounters an error
                whilst generating SQL code.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProviderException.#ctor">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProviderException.#ctor(System.String)">
            <summary>
            Creates a new exception with the specified detail message.
            </summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception with the specified detail message and cause.
            </summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SqlTableReader">
            <summary>
            Summary description for SqlTableReader.
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SqlTableReader.CancelOperation">
            <summary>
            Cancels the current operation.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlTableReader.Status">
            <summary>
            The event handler for status events.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlTableReader.AllPairs">
            <summary>
            All the fields in the results in order.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlTableReader.MatchingFields">
            <summary>
            Just the unique fields - which come first in order.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SqlTableReader.TableMapping">
            <summary>
            The mapping for the sql table reader, used to retreive the where clause for the results store.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableForeignKeyPairs">
            <summary>
            Used to store a foreign key that should be disabled for data migration because of dependency issues.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableForeignKeyPair">
            <summary>
            Used to store a list of foreign keys that are disabled for data migration because of dependency issues.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SqlSynchronization">
            <summary>
            Controls which parts of the SQL script are produced when the synchronization
            script is created.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlSynchronization.None">
            <summary>
            No update SQL will be produced.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlSynchronization.UpdateSql">
            <summary>
            Include the update SQL.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlSynchronization.DeleteSql">
            <summary>
            Include the delete SQL.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlSynchronization.AddSql">
            <summary>
            Include the insertion SQL.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SqlSynchronization.AllSql">
            <summary>
            Include all SQL ( default ).
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableDifference">
            <summary>
            The results of a table being compared in two databases.
            </summary>
            <remarks>
            	<para>
                    When <see cref="M:RedGate.SQLDataCompare.Engine.ComparisonSession.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLDataCompare.Engine.SchemaMappings)"/> is called, its
                    <see cref="T:RedGate.SQLDataCompare.Engine.TableDifferences">TableDifferences</see> collection contains a set
                    of TableDifference objects, each one corresponding to a table that has been
                    compared. Each TableDifference object contains properties giving a summary of
                    the number of different records in the two tables, and a series of
                    <see cref="P:RedGate.SQLDataCompare.Engine.TableDifference.ResultsStore"/> objects containing the details of differing and
                    identical rows.
                </para>
            </remarks>
            <example>
            See <see cref="T:RedGate.SQLDataCompare.Engine.ComparisonSession"/> for an in-depth example.
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableDifference.Dispose">
            <summary>Disposes of the object.</summary>
            <remarks>
            Disposes of all the ResultsStore objects representing records in the two
            databases. These objects make extensive use of temporary files, therefore it is
            <strong>very</strong> important to call the Dispose method.
            </remarks>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableDifference.TargetTable(System.Boolean)">
            <summary>
            Returns the target table on the specified database, or returns the source table
            if the target table does not exist.
            </summary>
            <returns>The target table.</returns>
            <param name="onTwo"><em>true</em> for second database.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifference.RefreshSelected">
            <summary>
                Set if the table is to be included when refreshing the
                <see cref="T:RedGate.SQLDataCompare.Engine.TableDifferences"/>. Defaults to <em>true</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifference.TableMapping">
            <summary>The setting to be used when the table differences are refreshed.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifference.Name">
            <summary>The fully-qualified name of the table being compared.</summary>
            <remarks>
            This is the name of the table in the first database; if null, this is the name of
            the table in the second database.
            </remarks>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifference.ResultsStore">
            <summary>
                The records that are in the two databases. This can be affected by
                <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplyFilter(System.Boolean)"/>
                and <see cref="M:RedGate.SQLDataCompare.Engine.ResultsStore.Reader.ApplySort"/>.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifference.DifferencesSummary">
            <summary>
            The differences summary object for the table difference.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifference.SqlSynchronization">
            <summary>
            Affects which parts of the SQL code are produced when the synchronization SQL
            script is generated.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableDifferences">
            <summary>A collection of <see cref="T:RedGate.SQLDataCompare.Engine.TableDifference">TableDifference</see> objects.</summary>
            <remarks>Contains the results of a comparison.</remarks>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifferences.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLDataCompare.Engine.TableDifference"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the TableDifference to get or set.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableDifferences.Item(System.String)">
            <summary>
            Returns a given <see cref="T:RedGate.SQLDataCompare.Engine.TableDifference"/>. The index is the name of the table in the first
            database or if null, the name of the table in the second database.
            </summary>
            <param name="name">The string-based index of the TableDifference to get.</param>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableMappingStatus">
            <summary>
            The result of the mapping.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.TableMappingStatus.Success">
            <summary>The mapping was successful.</summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.TableMappingStatus.UnableToCompare">
            <summary>
            The mapping succeeded, but SQL Data Compare is unable to compare. This is usually
            because of type comparison failure.
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.TableMappingStatus.PartialSuccess">
            <summary>The mapping was a partial success; some columns remain unmapped.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableMapping">
            <summary>
            Contains a mapping from a view or table to another view or table. Also contains
            information on the criteria used for matching the two tables, which can be based on an
            index or an arbitrary set of mapped fields.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMapping.#ctor(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLDataCompare.Engine.TableMappingStatus)">
            <summary>
            Constructor. Calls the base constructor and initializes the index
            mappings.
            </summary>
            <param name="obj1">The view or table in the first database.</param>
            <param name="obj2">The view or table in the second database.</param>
            <param name="status">The status of the mapping.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMapping.RefreshMappingStatus">
            <summary>
            	<para>
                    Checks the current contents of <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.IndexMapping"/> and
                    <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.MatchingMappings"/> to determine whether the current
                    TableMapping can be compared.
                </para>
            	<para>
                    If the TableMapping can be compared, the
                    <see cref="T:RedGate.SQLDataCompare.Engine.TableMappingStatus">TableMapping Status</see> is set to Success;
                    otherwise the Status is set to UnableToCompare. If not all of the fields in the
                    table are mapped successfully, if the Status is not already set to
                    UnableToCompare, it is set to PartialSuccess.
                </para>
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMapping.UseIndexForMapping(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
                Changes the matching mappings to be the fields from the matched indexes. The
                property <see cref="P:RedGate.SQLDataCompare.Engine.TableMapping.IndexMapping"/> is set to the specified mapping; or null
                if a problem was encountered.
            </summary>
            <returns>
            	<em>true</em> if the mapping was successfully used; otherwise
            <em>false</em>.
            </returns>
            <param name="mapping">The IndexMapping to be used.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMapping.IsMatching(System.String,System.Boolean)">
            <summary>
            Determines whether the specified field is being used for matching the
            databases.
            </summary>
            <returns><em>true</em> if the field is being used for matching.</returns>
            <param name="fieldName">The name of the field.</param>
            <param name="inTwo"><em>true</em> if the check is to be performed on the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMapping.Clone">
            <summary>
            Creates a shallow copy.
            </summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.Messages">
            <summary>
            Messages that explain any issues concerning the mapping; null if no issues
            exist.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.Obj1">
            <summary>
            Returns the view or table in the first database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.Obj2">
            <summary>
            Returns the view or table in the second database.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.FieldMappings">
            <summary>
            Returns the field mappings for the tables.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.Include">
            <summary>The include property for tables.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.MatchingMappings">
            <summary>
            The FieldMappings that are used to compare the databases. These may have been set
            from an IndexMapping.
            </summary>
            <remarks>
            Changing the mapping of fields that are used for matching may have unforseen
            consequences.
            </remarks>
            <seealso cref="M:RedGate.SQLDataCompare.Engine.TableMapping.RefreshMappingStatus">RefreshMappingStatus Method</seealso>
            <seealso cref="M:RedGate.SQLDataCompare.Engine.TableMapping.UseIndexForMapping(RedGate.SQLDataCompare.Engine.IndexMapping)">UseIndexForMapping Method</seealso>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.IndexMappings">
            <summary>
            The IndexMappings for the indexes that can be used to compare tables or views.
            The indexes must be PrimaryKey, Unique, or UniqueConstraint.
            </summary>
            <seealso cref="M:RedGate.SQLDataCompare.Engine.TableMapping.UseIndexForMapping(RedGate.SQLDataCompare.Engine.IndexMapping)">UseIndexForMapping Method</seealso>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.IndexMapping">
            <summary>
            If an IndexMapping is being used for matching, this is the IndexMapping. Its
            FieldMapping is also in MatchingMappings.
            </summary>
            <seealso cref="M:RedGate.SQLDataCompare.Engine.TableMapping.UseIndexForMapping(RedGate.SQLDataCompare.Engine.IndexMapping)">UseIndexForMapping Method</seealso>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.Where">
            <summary>
            Where clause object used on the databases.
            </summary>
            <remarks>Initialized to empty strings.</remarks>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMapping.Status">
            <summary>The status of the Table Mapping.</summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TableMappings">
            <summary>
            Holds mappings for tables or views in a schema.
            </summary>
            <example>
            	<code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using RedGate.SQLDataCompare.Engine.ResultsStore;
             
            namespace RedGate.SQLDataCompare.ExampleTests
            {
                public class TableMappingExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
                        ComparisonSession session=new ComparisonSession();
                        TableMappings mappings = new TableMappings();        
                       
                        try
                        {
                            db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                            db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));                                    
                            
                            // Create the mappings between a certain table
                            TableMapping tableMapping = (TableMapping)mappings.Join(db1.Tables["[dbo].[WidgetPrices]"], db2.Tables["[dbo].[WidgetPrices]"]);
             
                            // Set the custom comparison key for the table
                            tableMapping.MatchingMappings.Clear();
                            tableMapping.MatchingMappings.Add(tableMapping.FieldMappings["WidgetID"]);
                            tableMapping.RefreshMappingStatus();
             
                            // Set the where clause for the comparison
                            tableMapping.Where = new WhereClause("Active = 'Y'");
             
                            // Peform the comparison
                            session.CompareDatabases(db1, db2, mappings);
                            
                            TableDifference difference=session.TableDifferences["[dbo].[WidgetPrices]"];
             
                            // Loop through all the rows
                            foreach(Row row in difference.ResultsStore)
                            {
                                Console.WriteLine("Row {0} type {1}", row.Index, row.Type.ToString());
                                int i=0;
                                foreach (FieldPair field in difference.ResultsStore.Fields)
                                {
                                    int field1=field.OrdinalInResults1;
                                    int field2=field.OrdinalInResults2;
                            
                                    if (field1 != field2)
                                    {
                                        //get the values
                                        object value1=row.Values[field1];
                                        object value2=row.Values[field2];
                                        if (value1 == null)
                                            value1="NULL";
                                        if (value2 == null)
                                            value2="NULL";
                                        Console.WriteLine("{0}\t{1}\t{2}\t{3}",field.Field(false).Name, value1.ToString(),row.FieldDifferent(i)?"&lt;&gt;":"==",  value2.ToString());
                                    }
                                    else
                                    {
                                        //this is part of the custom index we are comparing on
                                        object value=row.Values[field1];    
                                        Console.WriteLine("*{0}\t{1}",field.Field(false).Name, value.ToString());
                                    }
                                    i++;
                                }
                            }
                        }
                        finally
                        {
                            session.Dispose();
                            db1.Dispose();
                            db2.Dispose();
                        }
                    }
                }
            }
                </code>
            	<code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports RedGate.SQLDataCompare.Engine.ResultsStore
             
            Public Class TableMappingExample
                Sub RunExample()
                    Dim session As New ComparisonSession
             
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    Dim mappings As New TableMappings
             
                    Dim tableMapping As tableMapping = mappings.Join(db1.Tables("[dbo].[WidgetPrices]"), db2.Tables("[dbo].[WidgetPrices]"))
             
                    ' Set the custom comparison key for the table
                    tableMapping.MatchingMappings.Clear()
                    tableMapping.MatchingMappings.Add(tableMapping.FieldMappings("WidgetID"))
                    tableMapping.RefreshMappingStatus()
             
                    ' Set the where clause for the comparison
                    tableMapping.Where = New WhereClause("Active = 'Y'")
             
                    'compare the databases
                    session.CompareDatabases(db1, db2, mappings)
             
                    Dim mapping As TableMapping
             
             
                    Dim difference As TableDifference = session.TableDifferences("[dbo].[WidgetPrices]")
                    Dim row As row
                    For Each row In difference.ResultsStore  'loop through all the rows
                        Dim field As FieldPair
                        Dim i As Int32 = 0
                        Console.WriteLine("Row {0} type {1}", row.Index, row.Type.ToString())
                        For Each field In difference.ResultsStore.Fields
                            'work out where about in the results the field data is stored
                            'if we were comparing identical records, or records present in one
                            'database but not the other then we would not need to 
                            'use the OrdinalInResults1 and OrdinalInResults2 properties
                            'but just OrdinalInResults
                            Dim field1 As Int32 = field.OrdinalInResults1
                            Dim field2 As Int32 = field.OrdinalInResults2
             
                            If (field1 &lt;&gt; field2) Then
                                'get the values
                                Dim value1 As Object = row.Values(field1)
                                Dim value2 As Object = row.Values(field2)
                                If (value1 Is Nothing) Then
                                    value1 = "NULL"
                                End If
                                If (value2 Is Nothing) Then
                                    value2 = "NULL"
                                End If
                                If row.FieldDifferent(i) Then
                                    Console.WriteLine("{0}:{1} &lt;&gt; {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                Else
                                    Console.WriteLine("{0}:{1} == {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                End If
                            Else
                                'this is part of the unique index we are comparing on
                                Dim value As Object = row.Values(field1)
                                Console.WriteLine("*{0}:{1}", field.Field(False).Name, value.ToString())
                            End If
                            i += 1
                        Next
                    Next
                    'dispose of the objects
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.#ctor(RedGate.SQLDataCompare.Engine.TableMappings)">
            <summary>
            Shallow copy constructor.
            </summary>
            <param name="tableMappings">The <see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> to be copied.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.ShouldInclude(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the
            obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.CreateMappings(RedGate.SQLCompare.Engine.Tables,RedGate.SQLCompare.Engine.Tables)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is
            possible.
            </summary>
            <param name="in1">A list of objects in the first database, or null.</param>
            <param name="in2">A list of objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.CreateMappings(RedGate.SQLCompare.Engine.Views,RedGate.SQLCompare.Engine.Views)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is
            possible.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.Join(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ViewTableSuperClass)">
            <summary>
            Joins two views or tables, and attempts to map their fields and indexes. If there
            are no suitable indexes, the status is set to <em>Unable to Compare</em>.
            </summary>
            <returns>The created mapping.</returns>
            <param name="viewtable1">The table or view in the first database.</param>
            <param name="viewtable2">The table or view in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.Join(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Joins two views or tables, and attempts to map their fields and indexes. If there
            are no suitable indexes, the status is set to <em>Unable to Compare</em>.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">TableMappings. Join must be called with ViewTableSuperClass arguments.</exception>
            <param name="obj1">The table or view in the first database.</param>
            <param name="obj2">The table or view in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.Add(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>
                Adds a <see cref="T:RedGate.SQLDataCompare.Engine.TableMapping"/> to the end of the
                <see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> collection.
            </summary>
            <returns>The TableMappings index at which the value is added.</returns>
            <param name="mapping">
                The TableMapping to be added to the end of the
                TableMappings collection.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.Remove(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>
                Removes the first occurrence of a specified <see cref="T:RedGate.SQLDataCompare.Engine.TableMapping"/> from
                the <see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> collection.
            </summary>
            <param name="mapping">The TableMapping to remove from the TableMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.Contains(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>
                Determines whether the TableMappings collection contains a specified
                <see cref="T:RedGate.SQLDataCompare.Engine.TableMapping"/>.
            </summary>
            <returns>
            	<em>true</em> if the TableMappings contains the specified value; otherwise,
            <em>false</em>.
            </returns>
            <param name="mapping">The TableMapping to locate in the TableMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.IndexOf(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>
                Searches for the specified <see cref="T:RedGate.SQLDataCompare.Engine.TableMapping"/> and returns the
                zero-based index of the first occurrence within the
                <see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> collection.
            </summary>
            <returns>
            If found, the zero-based index of the first occurrence of the TableMapping in the
            TableMappings collection; otherwise, -1.
            </returns>
            <param name="mapping">The TableMapping to locate in the TableMappings collection.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.OnValidate(System.Object)">
            <summary>
            Performs additionl custom proccesses when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException"><see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> only supports <see cref="T:RedGate.SQLDataCompare.Engine.TableMapping"/> objects.</exception>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.CopyTo(RedGate.SQLDataCompare.Engine.TableMapping[],System.Int32)">
            <summary>
                Copies the <see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> collection to a compatible
                one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="tables">
            The one-dimensional array that is the destination of the elements to be copied
            from the TableMappings collection. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in the array at which copying is to begin.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TableMappings.Insert(System.Int32,RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException" caption="">Always throws %NotImplementedException%.</exception>
            <param name="index">Ignored.</param>
            <param name="mapping">Ignored.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMappings.Options">
            <summary>
                The <see cref="T:RedGate.SQLDataCompare.Engine.MappingOptions">MappingOptions</see> currently used for table
                mappings.
            </summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMappings.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:RedGate.SQLDataCompare.Engine.TableMapping"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the TableMapping to get or set.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMappings.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting
            to match against objects in the first database, then matching
            against objects in the second database. Returns null if
            no mapping is found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.TableMappings.SyncRoot">
            <summary>
                Gets an object that can be used to synchronize access to the
                <see cref="T:RedGate.SQLDataCompare.Engine.TableMappings"/> collection.
            </summary>
        </member>
        <member name="T:RedGate.SQLToolkit.Engine.Licensing.ToolkitLicenceProvider">
            <summary>
            Summary description for ToolkitLicenceProvider.
            </summary>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TypeMapping">
            <summary>
            Summary description for TypeMapping.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TypeMapping.#ctor">
            <summary>
            Apparently this will 'prevent the compiler from generating a default constructor.'
            </summary>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.TypeMapping.m_TypeMapping">
            <summary>
            This is a hash table from sql types to the type that is written to the results store, although
            reading from the results store uses the plain SqlType.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TypeMapping.GetFieldType(RedGate.SQLCompare.Engine.Field)">
            <summary>
            Looks up the FieldType for a given SqlType from field.
            </summary>
            <param name="source">Field.</param>
            <returns>FieldType.</returns>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TypeMapping.GetSqlType(RedGate.SQLCompare.Engine.Field)">
            <summary>
            Looks up the SqlType for a given field.
            </summary>
            <param name="source">Field.</param>
            <returns>sqltype for field - resolving UDTs.</returns>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SelectTableEventAction">
            <summary>
            An enum stating which action the user made
            </summary>    
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.None">
            <summary>
            Not used
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.SelectAll">
            <summary>
            Enum value used to represent a select all event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.SelectItem">
            <summary>
            Enum value used to represent a select item event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.DeselectAll">
            <summary>
            Enum value used to represent a deselect all event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.DeselectItem">
            <summary>
            Enum value used to represent a deselect item event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.SelectColumn">
            <summary>
            Enum value used to represent a select column event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.DeselectColumn">
            <summary>
            Enum value used to represent a deselect column event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.UseKey">
            <summary>
            Enum value used to represent a comparison key selection event
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.UseCustomKey">
            <summary>
            Enum value used to represent the user choosing to use a custom key
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.SelectColumnAsKey">
            <summary>
            Enum value used to represent the user choosing a column for thier key
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.DeselectColumnAsKey">
            <summary>
            Enum value used to represent the user choosing not to use a column for their key
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.SetLeftWhereClause">
            <summary>
            Enum value used to represent the user setting a left where caluse
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.SetRightWhereClause">
            <summary>
            Enum value used to represent the user setting a right where caluse
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.MapTables">
            <summary>
            Enum value used to represent the user mapping two tables
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.UnmapTables">
            <summary>
            Enum value used to represent the user unmapping two tables
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.MapColumn">
            <summary>
            Enum value used to represent the user mapping two columns
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.UnmapColumns">
            <summary>
            Enum value used to represent the user unmapping two columns
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.MapOwners">
            <summary>
            Enum value used to represent the user mapping two owners
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEventAction.UnmapOwners">
            <summary>
            Enum value used to represent the user unmapping two owners
            </summary>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.TablePairReference">
            <summary>
            A reference to a table pair
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.TablePairReference.Table1">
            <summary>
            The qualified name of the first table
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.TablePairReference.Table2">
            <summary>
            The qualified name of the second table
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.TablePairReference.#ctor(System.String,System.String)">
            <summary>
            Creates a new table pair reference
            </summary>
            <param name="one">the name of the first table</param>
            <param name="two">the name of the second table</param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.OwnerPairReference">
            <summary>
            A reference to an owner pair
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.OwnerPairReference.Owner1">
            <summary>
            The name of the first owner
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.OwnerPairReference.Owner2">
            <summary>
            The name of the second owner
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.OwnerPairReference.#ctor(System.String,System.String)">
            <summary>
            Creates a reference to an owner pair
            </summary>
            <param name="one">The first owner</param>
            <param name="two">The second owner</param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ColumnPairReference">
            <summary>
            A reference to a column pair
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ColumnPairReference.Col1">
            <summary>
            A column reference to the first column
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ColumnPairReference.Col2">
            <summary>
            A column reference to the second column
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ColumnPairReference.#ctor(RedGate.SQLDataCompare.Engine.ColumnReference,RedGate.SQLDataCompare.Engine.ColumnReference)">
            <summary>
            Creates a new reference to two columns
            </summary>
            <param name="one">A reference to the first column</param>
            <param name="two">A reference to the second column</param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.ColumnReference">
            <summary>
            A reference to a column
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ColumnReference.TableName">
            <summary>
            The tables name
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.ColumnReference.ColumnName">
            <summary>
            The columns name
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.ColumnReference.#ctor(RedGate.SQLDataCompare.Engine.TableMapping,RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>
            Creates a new column reference
            </summary>
            <param name="tm">The table mapping of the table to reference</param>
            <param name="fm">The field mapping of the field to reference</param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.KeyReference">
            <summary>
            A reference to a Key
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.KeyReference.TableName">
            <summary>
            The table name
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.KeyReference.IndexName">
            <summary>
            The name of the index
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.KeyReference.#ctor(RedGate.SQLDataCompare.Engine.TableMapping,RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
            Creates a reference to a key
            </summary>
            <param name="tm">The table mapping</param>
            <param name="im">The index mapping</param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.WhereClauseReference">
            <summary>
            A reference to a where clause
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.WhereClauseReference.TableName">
            <summary>
            The table name to which the where clause applies
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.WhereClauseReference.WhereClause">
            <summary>
            The text of the where clause
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.WhereClauseReference.#ctor(RedGate.SQLDataCompare.Engine.TableMapping,System.String)">
            <summary>
            Creates a new where clause reference
            </summary>
            <param name="tm">The table mapping</param>
            <param name="clause">The string of the where clause</param>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.SelectTableEvent">
            <summary>
            Struct representing a user action
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEvent.action">
            <summary>
            An enum denoting which action was performed
            </summary>
            <exclude/>
        </member>
        <member name="F:RedGate.SQLDataCompare.Engine.SelectTableEvent.data">
            <summary>
            Some data about the action
            </summary>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SelectTableEvent.#ctor(RedGate.SQLDataCompare.Engine.SelectTableEventAction,System.Object)">
            <summary>
            Creates a new select table event
            </summary>
            <param name="action">The action performed</param>
            <param name="data">The assosciated data for that action</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SelectTableEvent.Deserialize(System.Int32,RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>
            Serialization support
            </summary>
            <param name="nVersionId">The version we are deserializng</param>
            <param name="obj">The assosciated formatter</param>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.SelectTableEvent.Serialize(RedGate.SQL.Shared.ISerializeFormatter)">
            <summary>
            Serialization support
            </summary>
            <param name="obj">THe formatter to write out to</param>
            <exclude/>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.SelectTableEvent.Version">
            <summary>
            For serialization. The current version
            </summary>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.UserActionUtilities">
            <summary>
            Various utilities for use with user actions
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.UserActionUtilities.GetTableMappingFQN(RedGate.SQLDataCompare.Engine.TableMapping)">
            <summary>
            Returns a unique name for a mapping, this is NOT the same as the unique name used for
            TableDifferences
            </summary>
            <param name="t">The table mapping</param>
            <returns>a unique name</returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.UserActionUtilities.GetFieldMappingFQN(RedGate.SQLDataCompare.Engine.FieldMapping)">
            <summary>
            Returns a unique name for a field mapping.
            </summary>
            <param name="fm">The field mapping</param>
            <returns>A deterministically unique name</returns>
            <exclude/>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.UserActionUtilities.GetKeyFQN(RedGate.SQLDataCompare.Engine.IndexMapping)">
            <summary>
            Returns a unique name for an index mapping.
            </summary>
            <param name="im">The index mapping</param>
            <returns>A deterministically unique name</returns>
            <exclude/>
        </member>
        <member name="T:RedGate.SQLDataCompare.Engine.WhereClause">
            <summary>
            An encapsulation class for the WHERE clause used on the tables in the
            databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.WhereClause.Clause(System.Boolean)">
            <summary>
            A convenience function for easy access to the first or second WHERE clause.
            Returns the appropriate WHERE clause.
            </summary>
            <returns>The WHERE clause for the requested database.</returns>
            <param name="onTwo">
            	<em>true</em> to return the WHERE clause for the second database; <em>false</em>
            to return the WHERE clause for first database.
            </param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.WhereClause.#ctor">
            <summary>
            Default constructor. The WHERE clauses are set to empty strings for both
            databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.WhereClause.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="clause">The WHERE clause to be used on the tables in both databases.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.WhereClause.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="clause1">The WHERE clause to be used on the table in the first database.</param>
            <param name="clause2">The WHERE clause to be used on the table in the second database.</param>
        </member>
        <member name="M:RedGate.SQLDataCompare.Engine.WhereClause.#ctor(RedGate.SQLDataCompare.Engine.WhereClause)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source WHERE clause to be copied to the new class.</param>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.WhereClause.Clause1">
            <summary>The WHERE clause used on the table in the first database.</summary>
        </member>
        <member name="P:RedGate.SQLDataCompare.Engine.WhereClause.Clause2">
            <summary>The WHERE clause used on the table in the second database.</summary>
        </member>
    </members>
</doc>
